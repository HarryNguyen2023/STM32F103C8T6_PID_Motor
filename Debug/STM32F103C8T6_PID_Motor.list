
STM32F103C8T6_PID_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08007db0  08007db0  00017db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008264  08008264  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008264  08008264  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008264  08008264  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008264  08008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800826c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200001dc  08008448  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08008448  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d382  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da8  00000000  00000000  0002d587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0002f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00030048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001863f  00000000  00000000  00030ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd89  00000000  00000000  000492e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bdad  00000000  00000000  00057070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2e1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e4  00000000  00000000  000e2e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d98 	.word	0x08007d98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007d98 	.word	0x08007d98

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <SpeedCtrl>:
float prevError = 0;
const float deltaTime = 0.01;

// Function to control the speed of the motor
void SpeedCtrl(float dutyCycle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if(dutyCycle <= 1)
 8001118:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ffb9 	bl	8001094 <__aeabi_fcmple>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d100      	bne.n	800112a <SpeedCtrl+0x1a>
	{
		uint32_t speed = (uint32_t)(MAX_DC * dutyCycle);
		TIM4->CCR1 = speed;
	}
}
 8001128:	e00c      	b.n	8001144 <SpeedCtrl+0x34>
		uint32_t speed = (uint32_t)(MAX_DC * dutyCycle);
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <SpeedCtrl+0x3c>)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff fe09 	bl	8000d44 <__aeabi_fmul>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ffcb 	bl	80010d0 <__aeabi_f2uiz>
 800113a:	4603      	mov	r3, r0
 800113c:	60fb      	str	r3, [r7, #12]
		TIM4->CCR1 = speed;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <SpeedCtrl+0x40>)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	4479c000 	.word	0x4479c000
 8001150:	40000800 	.word	0x40000800

08001154 <MotorStop>:

// Function to stop the motor immediately
void MotorStop(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(M_PORT, DC1, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <MotorStop+0x28>)
 8001160:	f001 fb80 	bl	8002864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_PORT, DC2, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <MotorStop+0x28>)
 800116c:	f001 fb7a 	bl	8002864 <HAL_GPIO_WritePin>
	// End PWM pulse
	SpeedCtrl(0);
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	f7ff ffcc 	bl	8001110 <SpeedCtrl>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40010c00 	.word	0x40010c00

08001180 <MotorStart>:

// Function to start the motor
void MotorStart(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(M_PORT, DC1, 1);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MotorStart+0x20>)
 800118c:	f001 fb6a 	bl	8002864 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(M_PORT, DC2, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <MotorStart+0x20>)
 8001198:	f001 fb64 	bl	8002864 <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010c00 	.word	0x40010c00
 80011a4:	00000000 	.word	0x00000000

080011a8 <PositionCommand>:

// Function to handle command for position control of the motor
void PositionCommand(uint8_t comm)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	// Stop the motor
	MotorStop();
 80011b2:	f7ff ffcf 	bl	8001154 <MotorStop>
	// Reset the current encoder position
	currentPos = (TIM3->CNT) * RAD;
 80011b6:	4b84      	ldr	r3, [pc, #528]	; (80013c8 <PositionCommand+0x220>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f912 	bl	80003e4 <__aeabi_ui2d>
 80011c0:	a373      	add	r3, pc, #460	; (adr r3, 8001390 <PositionCommand+0x1e8>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff f987 	bl	80004d8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b7d      	ldr	r3, [pc, #500]	; (80013cc <PositionCommand+0x224>)
 80011d8:	f7ff faa8 	bl	800072c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fc50 	bl	8000a88 <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a79      	ldr	r2, [pc, #484]	; (80013d0 <PositionCommand+0x228>)
 80011ec:	6013      	str	r3, [r2, #0]
	// Execute the command
	if(comm == Angle45)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b34      	cmp	r3, #52	; 0x34
 80011f2:	d11e      	bne.n	8001232 <PositionCommand+0x8a>
	{
		targetPos = currentPos + 45 * RAD;
 80011f4:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <PositionCommand+0x228>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f915 	bl	8000428 <__aeabi_f2d>
 80011fe:	a366      	add	r3, pc, #408	; (adr r3, 8001398 <PositionCommand+0x1f0>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7fe ffb2 	bl	800016c <__adddf3>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fc3a 	bl	8000a88 <__aeabi_d2f>
 8001214:	4603      	mov	r3, r0
 8001216:	4a6f      	ldr	r2, [pc, #444]	; (80013d4 <PositionCommand+0x22c>)
 8001218:	6013      	str	r3, [r2, #0]
		// Input PID parameters
		Kp = 0.4;
 800121a:	4b6f      	ldr	r3, [pc, #444]	; (80013d8 <PositionCommand+0x230>)
 800121c:	4a6f      	ldr	r2, [pc, #444]	; (80013dc <PositionCommand+0x234>)
 800121e:	601a      	str	r2, [r3, #0]
		Ki = 0;
 8001220:	4b6f      	ldr	r3, [pc, #444]	; (80013e0 <PositionCommand+0x238>)
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
		Kd = 0;
 8001228:	4b6e      	ldr	r3, [pc, #440]	; (80013e4 <PositionCommand+0x23c>)
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e0a4      	b.n	800137c <PositionCommand+0x1d4>
	}
	else if(comm == Angle60)
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b35      	cmp	r3, #53	; 0x35
 8001236:	d11e      	bne.n	8001276 <PositionCommand+0xce>
	{
		targetPos = currentPos + 60 * RAD;
 8001238:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <PositionCommand+0x228>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f8f3 	bl	8000428 <__aeabi_f2d>
 8001242:	a357      	add	r3, pc, #348	; (adr r3, 80013a0 <PositionCommand+0x1f8>)
 8001244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001248:	f7fe ff90 	bl	800016c <__adddf3>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fc18 	bl	8000a88 <__aeabi_d2f>
 8001258:	4603      	mov	r3, r0
 800125a:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <PositionCommand+0x22c>)
 800125c:	6013      	str	r3, [r2, #0]
		// Input PID parameters
		Kp = 0.35;
 800125e:	4b5e      	ldr	r3, [pc, #376]	; (80013d8 <PositionCommand+0x230>)
 8001260:	4a61      	ldr	r2, [pc, #388]	; (80013e8 <PositionCommand+0x240>)
 8001262:	601a      	str	r2, [r3, #0]
		Ki = 0;
 8001264:	4b5e      	ldr	r3, [pc, #376]	; (80013e0 <PositionCommand+0x238>)
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
		Kd = 0;
 800126c:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <PositionCommand+0x23c>)
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e082      	b.n	800137c <PositionCommand+0x1d4>
	}
	else if(comm == Angle90)
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b36      	cmp	r3, #54	; 0x36
 800127a:	d11d      	bne.n	80012b8 <PositionCommand+0x110>
	{
		targetPos = currentPos + 90 * RAD;
 800127c:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <PositionCommand+0x228>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f8d1 	bl	8000428 <__aeabi_f2d>
 8001286:	a348      	add	r3, pc, #288	; (adr r3, 80013a8 <PositionCommand+0x200>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7fe ff6e 	bl	800016c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fbf6 	bl	8000a88 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <PositionCommand+0x22c>)
 80012a0:	6013      	str	r3, [r2, #0]
		// Input PID parameters
		Kp = 0.2;
 80012a2:	4b4d      	ldr	r3, [pc, #308]	; (80013d8 <PositionCommand+0x230>)
 80012a4:	4a51      	ldr	r2, [pc, #324]	; (80013ec <PositionCommand+0x244>)
 80012a6:	601a      	str	r2, [r3, #0]
		Ki = 0.005;
 80012a8:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <PositionCommand+0x238>)
 80012aa:	4a51      	ldr	r2, [pc, #324]	; (80013f0 <PositionCommand+0x248>)
 80012ac:	601a      	str	r2, [r3, #0]
		Kd = 0;
 80012ae:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <PositionCommand+0x23c>)
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e061      	b.n	800137c <PositionCommand+0x1d4>
	}
	else if(comm == Angle180)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b37      	cmp	r3, #55	; 0x37
 80012bc:	d11d      	bne.n	80012fa <PositionCommand+0x152>
	{
		targetPos = currentPos + 180 * RAD;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <PositionCommand+0x228>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f8b0 	bl	8000428 <__aeabi_f2d>
 80012c8:	a339      	add	r3, pc, #228	; (adr r3, 80013b0 <PositionCommand+0x208>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7fe ff4d 	bl	800016c <__adddf3>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fbd5 	bl	8000a88 <__aeabi_d2f>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a3c      	ldr	r2, [pc, #240]	; (80013d4 <PositionCommand+0x22c>)
 80012e2:	6013      	str	r3, [r2, #0]
		// Input PID parameters
		Kp = 0.1;
 80012e4:	4b3c      	ldr	r3, [pc, #240]	; (80013d8 <PositionCommand+0x230>)
 80012e6:	4a43      	ldr	r2, [pc, #268]	; (80013f4 <PositionCommand+0x24c>)
 80012e8:	601a      	str	r2, [r3, #0]
		Ki = 0.005;
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <PositionCommand+0x238>)
 80012ec:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <PositionCommand+0x248>)
 80012ee:	601a      	str	r2, [r3, #0]
		Kd = 0;
 80012f0:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <PositionCommand+0x23c>)
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e040      	b.n	800137c <PositionCommand+0x1d4>
	}
	else if(comm == Angle270)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b38      	cmp	r3, #56	; 0x38
 80012fe:	d11d      	bne.n	800133c <PositionCommand+0x194>
	{
		targetPos = currentPos + 270 * RAD;
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <PositionCommand+0x228>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f88f 	bl	8000428 <__aeabi_f2d>
 800130a:	a32b      	add	r3, pc, #172	; (adr r3, 80013b8 <PositionCommand+0x210>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7fe ff2c 	bl	800016c <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fbb4 	bl	8000a88 <__aeabi_d2f>
 8001320:	4603      	mov	r3, r0
 8001322:	4a2c      	ldr	r2, [pc, #176]	; (80013d4 <PositionCommand+0x22c>)
 8001324:	6013      	str	r3, [r2, #0]
		// Input PID parameters
		Kp = 0.055;
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <PositionCommand+0x230>)
 8001328:	4a33      	ldr	r2, [pc, #204]	; (80013f8 <PositionCommand+0x250>)
 800132a:	601a      	str	r2, [r3, #0]
		Ki = 0.008;
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <PositionCommand+0x238>)
 800132e:	4a33      	ldr	r2, [pc, #204]	; (80013fc <PositionCommand+0x254>)
 8001330:	601a      	str	r2, [r3, #0]
		Kd = 0;
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <PositionCommand+0x23c>)
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e01f      	b.n	800137c <PositionCommand+0x1d4>
	}
	else if(comm == Angle360)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b39      	cmp	r3, #57	; 0x39
 8001340:	d11c      	bne.n	800137c <PositionCommand+0x1d4>
	{
		targetPos = currentPos + 360 * RAD;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <PositionCommand+0x228>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f86e 	bl	8000428 <__aeabi_f2d>
 800134c:	a31c      	add	r3, pc, #112	; (adr r3, 80013c0 <PositionCommand+0x218>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7fe ff0b 	bl	800016c <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fb93 	bl	8000a88 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <PositionCommand+0x22c>)
 8001366:	6013      	str	r3, [r2, #0]
		// Input PID parameters
		Kp = 0.035;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <PositionCommand+0x230>)
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <PositionCommand+0x258>)
 800136c:	601a      	str	r2, [r3, #0]
		Ki = 0.008;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <PositionCommand+0x238>)
 8001370:	4a22      	ldr	r2, [pc, #136]	; (80013fc <PositionCommand+0x254>)
 8001372:	601a      	str	r2, [r3, #0]
		Kd = 0;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <PositionCommand+0x23c>)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
	}
	// Start the TIMER 2 timer mode
	HAL_TIM_Base_Start_IT(&htim2);
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <PositionCommand+0x25c>)
 800137e:	f001 ff41 	bl	8003204 <HAL_TIM_Base_Start_IT>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	f3af 8000 	nop.w
 8001390:	2e48e8a7 	.word	0x2e48e8a7
 8001394:	400921ff 	.word	0x400921ff
 8001398:	2e48e8a6 	.word	0x2e48e8a6
 800139c:	3fe921ff 	.word	0x3fe921ff
 80013a0:	c985f070 	.word	0xc985f070
 80013a4:	3ff0c154 	.word	0x3ff0c154
 80013a8:	2e48e8a6 	.word	0x2e48e8a6
 80013ac:	3ff921ff 	.word	0x3ff921ff
 80013b0:	2e48e8a6 	.word	0x2e48e8a6
 80013b4:	400921ff 	.word	0x400921ff
 80013b8:	62b6ae7d 	.word	0x62b6ae7d
 80013bc:	4012d97f 	.word	0x4012d97f
 80013c0:	2e48e8a6 	.word	0x2e48e8a6
 80013c4:	401921ff 	.word	0x401921ff
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40668000 	.word	0x40668000
 80013d0:	2000034c 	.word	0x2000034c
 80013d4:	20000348 	.word	0x20000348
 80013d8:	20000334 	.word	0x20000334
 80013dc:	3ecccccd 	.word	0x3ecccccd
 80013e0:	20000338 	.word	0x20000338
 80013e4:	2000033c 	.word	0x2000033c
 80013e8:	3eb33333 	.word	0x3eb33333
 80013ec:	3e4ccccd 	.word	0x3e4ccccd
 80013f0:	3ba3d70a 	.word	0x3ba3d70a
 80013f4:	3dcccccd 	.word	0x3dcccccd
 80013f8:	3d6147ae 	.word	0x3d6147ae
 80013fc:	3c03126f 	.word	0x3c03126f
 8001400:	3d0f5c29 	.word	0x3d0f5c29
 8001404:	200001f8 	.word	0x200001f8

08001408 <PIDControl>:

// Function to get the control signal of PID controller
float PIDControl()
{
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
	float controlSignal = 0;
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
	currentPos = (TIM3->CNT) * RAD;
 8001416:	4b52      	ldr	r3, [pc, #328]	; (8001560 <PIDControl+0x158>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe ffe2 	bl	80003e4 <__aeabi_ui2d>
 8001420:	a34d      	add	r3, pc, #308	; (adr r3, 8001558 <PIDControl+0x150>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f857 	bl	80004d8 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <PIDControl+0x15c>)
 8001438:	f7ff f978 	bl	800072c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fb20 	bl	8000a88 <__aeabi_d2f>
 8001448:	4603      	mov	r3, r0
 800144a:	4a47      	ldr	r2, [pc, #284]	; (8001568 <PIDControl+0x160>)
 800144c:	6013      	str	r3, [r2, #0]
	// Get the error value
	nowError = targetPos - currentPos;
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <PIDControl+0x164>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a45      	ldr	r2, [pc, #276]	; (8001568 <PIDControl+0x160>)
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fb69 	bl	8000b30 <__aeabi_fsub>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b43      	ldr	r3, [pc, #268]	; (8001570 <PIDControl+0x168>)
 8001464:	601a      	str	r2, [r3, #0]
	// Get the integral of error using trapezoidal rule
	intError += deltaTime * ((nowError + prevError)/2.0);
 8001466:	4b43      	ldr	r3, [pc, #268]	; (8001574 <PIDControl+0x16c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe ffdc 	bl	8000428 <__aeabi_f2d>
 8001470:	4604      	mov	r4, r0
 8001472:	460d      	mov	r5, r1
 8001474:	4b40      	ldr	r3, [pc, #256]	; (8001578 <PIDControl+0x170>)
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe ffd6 	bl	8000428 <__aeabi_f2d>
 800147c:	4680      	mov	r8, r0
 800147e:	4689      	mov	r9, r1
 8001480:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <PIDControl+0x168>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a3d      	ldr	r2, [pc, #244]	; (800157c <PIDControl+0x174>)
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb52 	bl	8000b34 <__addsf3>
 8001490:	4603      	mov	r3, r0
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ffc8 	bl	8000428 <__aeabi_f2d>
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a0:	f7ff f944 	bl	800072c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4640      	mov	r0, r8
 80014aa:	4649      	mov	r1, r9
 80014ac:	f7ff f814 	bl	80004d8 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7fe fe58 	bl	800016c <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fae0 	bl	8000a88 <__aeabi_d2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a2a      	ldr	r2, [pc, #168]	; (8001574 <PIDControl+0x16c>)
 80014cc:	6013      	str	r3, [r2, #0]
	// Get the derivative of error
	devError = (nowError - prevError)/deltaTime;
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <PIDControl+0x168>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a2a      	ldr	r2, [pc, #168]	; (800157c <PIDControl+0x174>)
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fb29 	bl	8000b30 <__aeabi_fsub>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <PIDControl+0x170>)
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff fce0 	bl	8000eac <__aeabi_fdiv>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <PIDControl+0x178>)
 80014f2:	601a      	str	r2, [r3, #0]
	// Calculate the PID control value
	controlSignal = (Kp*nowError) + (Ki*intError) + (Kd*devError);
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <PIDControl+0x17c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <PIDControl+0x168>)
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc20 	bl	8000d44 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	461c      	mov	r4, r3
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <PIDControl+0x180>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a19      	ldr	r2, [pc, #100]	; (8001574 <PIDControl+0x16c>)
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fc16 	bl	8000d44 <__aeabi_fmul>
 8001518:	4603      	mov	r3, r0
 800151a:	4619      	mov	r1, r3
 800151c:	4620      	mov	r0, r4
 800151e:	f7ff fb09 	bl	8000b34 <__addsf3>
 8001522:	4603      	mov	r3, r0
 8001524:	461c      	mov	r4, r3
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <PIDControl+0x184>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <PIDControl+0x178>)
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fc07 	bl	8000d44 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff fafa 	bl	8000b34 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	607b      	str	r3, [r7, #4]
	// Assign the new error
	prevError = nowError;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <PIDControl+0x168>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <PIDControl+0x174>)
 800154a:	6013      	str	r3, [r2, #0]

	return controlSignal;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001558:	2e48e8a7 	.word	0x2e48e8a7
 800155c:	400921ff 	.word	0x400921ff
 8001560:	40000400 	.word	0x40000400
 8001564:	40668000 	.word	0x40668000
 8001568:	2000034c 	.word	0x2000034c
 800156c:	20000348 	.word	0x20000348
 8001570:	20000350 	.word	0x20000350
 8001574:	20000340 	.word	0x20000340
 8001578:	3c23d70a 	.word	0x3c23d70a
 800157c:	20000354 	.word	0x20000354
 8001580:	20000344 	.word	0x20000344
 8001584:	20000334 	.word	0x20000334
 8001588:	20000338 	.word	0x20000338
 800158c:	2000033c 	.word	0x2000033c

08001590 <PositionCtrl>:

// Function to control the position of the motor shaft
void PositionCtrl()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	// Get the PID control signal
	float ctrlSig = PIDControl();
 8001596:	f7ff ff37 	bl	8001408 <PIDControl>
 800159a:	6078      	str	r0, [r7, #4]
	// Check if control signal is valid
	if(ctrlSig > 1)
 800159c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fd8b 	bl	80010bc <__aeabi_fcmpgt>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <PositionCtrl+0x24>
	{
		ctrlSig = 1;
 80015ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e023      	b.n	80015fc <PositionCtrl+0x6c>
	}
	else if(ctrlSig < 0.15 && ctrlSig > 0)
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7fe ff37 	bl	8000428 <__aeabi_f2d>
 80015ba:	a319      	add	r3, pc, #100	; (adr r3, 8001620 <PositionCtrl+0x90>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f9fc 	bl	80009bc <__aeabi_dcmplt>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00a      	beq.n	80015e0 <PositionCtrl+0x50>
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fd74 	bl	80010bc <__aeabi_fcmpgt>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <PositionCtrl+0x50>
	{
		ctrlSig = 0.15;
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <PositionCtrl+0x98>)
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	e00d      	b.n	80015fc <PositionCtrl+0x6c>
	}else if(ctrlSig == 0)
 80015e0:	f04f 0100 	mov.w	r1, #0
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fd41 	bl	800106c <__aeabi_fcmpeq>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <PositionCtrl+0x6c>
	{
		// Stop the motor
		MotorStop();
 80015f0:	f7ff fdb0 	bl	8001154 <MotorStop>
		// Stop the timer
		HAL_TIM_Base_Stop(&htim2);
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <PositionCtrl+0x9c>)
 80015f6:	f001 fdde 	bl	80031b6 <HAL_TIM_Base_Stop>
		return;
 80015fa:	e00e      	b.n	800161a <PositionCtrl+0x8a>
	}
	// Drive the motor
	HAL_GPIO_WritePin(M_PORT, DC1, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001602:	480b      	ldr	r0, [pc, #44]	; (8001630 <PositionCtrl+0xa0>)
 8001604:	f001 f92e 	bl	8002864 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M_PORT, DC2, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <PositionCtrl+0xa0>)
 8001610:	f001 f928 	bl	8002864 <HAL_GPIO_WritePin>
	SpeedCtrl(ctrlSig);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fd7b 	bl	8001110 <SpeedCtrl>
}
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	33333333 	.word	0x33333333
 8001624:	3fc33333 	.word	0x3fc33333
 8001628:	3e19999a 	.word	0x3e19999a
 800162c:	200001f8 	.word	0x200001f8
 8001630:	40010c00 	.word	0x40010c00

08001634 <Command_Handling>:


// Function to execute the command sent by UART
void Command_Handling(uint8_t com)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	if(com == Dir)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b30      	cmp	r3, #48	; 0x30
 8001642:	d10e      	bne.n	8001662 <Command_Handling+0x2e>
	{
		HAL_GPIO_TogglePin(M_PORT, DC1);
 8001644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001648:	4832      	ldr	r0, [pc, #200]	; (8001714 <Command_Handling+0xe0>)
 800164a:	f001 f923 	bl	8002894 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(M_PORT, DC2);
 800164e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001652:	4830      	ldr	r0, [pc, #192]	; (8001714 <Command_Handling+0xe0>)
 8001654:	f001 f91e 	bl	8002894 <HAL_GPIO_TogglePin>
		// Send feedback
		sprintf(rcvMsg, "Direction changed\r\n");
 8001658:	492f      	ldr	r1, [pc, #188]	; (8001718 <Command_Handling+0xe4>)
 800165a:	4830      	ldr	r0, [pc, #192]	; (800171c <Command_Handling+0xe8>)
 800165c:	f004 f922 	bl	80058a4 <siprintf>
 8001660:	e049      	b.n	80016f6 <Command_Handling+0xc2>

	}
	else if(com == Speed1)
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b31      	cmp	r3, #49	; 0x31
 8001666:	d10a      	bne.n	800167e <Command_Handling+0x4a>
	{
		MotorStart();
 8001668:	f7ff fd8a 	bl	8001180 <MotorStart>
		SpeedCtrl(0.5);
 800166c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001670:	f7ff fd4e 	bl	8001110 <SpeedCtrl>
		// Send feedback
		sprintf(rcvMsg, "Speed 1 running\r\n");
 8001674:	492a      	ldr	r1, [pc, #168]	; (8001720 <Command_Handling+0xec>)
 8001676:	4829      	ldr	r0, [pc, #164]	; (800171c <Command_Handling+0xe8>)
 8001678:	f004 f914 	bl	80058a4 <siprintf>
 800167c:	e03b      	b.n	80016f6 <Command_Handling+0xc2>
	}
	else if(com == Speed2)
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b32      	cmp	r3, #50	; 0x32
 8001682:	d10a      	bne.n	800169a <Command_Handling+0x66>
	{
		MotorStart();
 8001684:	f7ff fd7c 	bl	8001180 <MotorStart>
		SpeedCtrl(0.75);
 8001688:	f04f 507d 	mov.w	r0, #1061158912	; 0x3f400000
 800168c:	f7ff fd40 	bl	8001110 <SpeedCtrl>
		// Send feedback
		sprintf(rcvMsg, "Speed 2 running\r\n");
 8001690:	4924      	ldr	r1, [pc, #144]	; (8001724 <Command_Handling+0xf0>)
 8001692:	4822      	ldr	r0, [pc, #136]	; (800171c <Command_Handling+0xe8>)
 8001694:	f004 f906 	bl	80058a4 <siprintf>
 8001698:	e02d      	b.n	80016f6 <Command_Handling+0xc2>
	}
	else if(com == Speed3)
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b33      	cmp	r3, #51	; 0x33
 800169e:	d10a      	bne.n	80016b6 <Command_Handling+0x82>
	{
		MotorStart();
 80016a0:	f7ff fd6e 	bl	8001180 <MotorStart>
		SpeedCtrl(1);
 80016a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80016a8:	f7ff fd32 	bl	8001110 <SpeedCtrl>
		// Send feedback
		sprintf(rcvMsg, "Speed 3 running\r\n");
 80016ac:	491e      	ldr	r1, [pc, #120]	; (8001728 <Command_Handling+0xf4>)
 80016ae:	481b      	ldr	r0, [pc, #108]	; (800171c <Command_Handling+0xe8>)
 80016b0:	f004 f8f8 	bl	80058a4 <siprintf>
 80016b4:	e01f      	b.n	80016f6 <Command_Handling+0xc2>
	}
	else if(com == Angle45 || com == Angle60 || com == Angle90 || com == Angle180 || com == Angle270 || com == Angle360)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b34      	cmp	r3, #52	; 0x34
 80016ba:	d00e      	beq.n	80016da <Command_Handling+0xa6>
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b35      	cmp	r3, #53	; 0x35
 80016c0:	d00b      	beq.n	80016da <Command_Handling+0xa6>
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b36      	cmp	r3, #54	; 0x36
 80016c6:	d008      	beq.n	80016da <Command_Handling+0xa6>
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b37      	cmp	r3, #55	; 0x37
 80016cc:	d005      	beq.n	80016da <Command_Handling+0xa6>
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b38      	cmp	r3, #56	; 0x38
 80016d2:	d002      	beq.n	80016da <Command_Handling+0xa6>
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b39      	cmp	r3, #57	; 0x39
 80016d8:	d109      	bne.n	80016ee <Command_Handling+0xba>
	{
		sprintf(rcvMsg, "Position control mode\r\n");
 80016da:	4914      	ldr	r1, [pc, #80]	; (800172c <Command_Handling+0xf8>)
 80016dc:	480f      	ldr	r0, [pc, #60]	; (800171c <Command_Handling+0xe8>)
 80016de:	f004 f8e1 	bl	80058a4 <siprintf>
		PositionCommand(command);
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <Command_Handling+0xfc>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fd5e 	bl	80011a8 <PositionCommand>
 80016ec:	e003      	b.n	80016f6 <Command_Handling+0xc2>
	}
	else
	{
		sprintf(rcvMsg, "Invalid command\r\n");
 80016ee:	4911      	ldr	r1, [pc, #68]	; (8001734 <Command_Handling+0x100>)
 80016f0:	480a      	ldr	r0, [pc, #40]	; (800171c <Command_Handling+0xe8>)
 80016f2:	f004 f8d7 	bl	80058a4 <siprintf>
	}
	HAL_UART_Transmit(&huart1, rcvMsg, strlen(rcvMsg), 100);
 80016f6:	4809      	ldr	r0, [pc, #36]	; (800171c <Command_Handling+0xe8>)
 80016f8:	f7fe fd2a 	bl	8000150 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	2364      	movs	r3, #100	; 0x64
 8001702:	4906      	ldr	r1, [pc, #24]	; (800171c <Command_Handling+0xe8>)
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <Command_Handling+0x104>)
 8001706:	f002 fe13 	bl	8004330 <HAL_UART_Transmit>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40010c00 	.word	0x40010c00
 8001718:	08007db0 	.word	0x08007db0
 800171c:	20000318 	.word	0x20000318
 8001720:	08007dc4 	.word	0x08007dc4
 8001724:	08007dd8 	.word	0x08007dd8
 8001728:	08007dec 	.word	0x08007dec
 800172c:	08007e00 	.word	0x08007e00
 8001730:	20000331 	.word	0x20000331
 8001734:	08007e18 	.word	0x08007e18
 8001738:	200002d0 	.word	0x200002d0

0800173c <HAL_UART_RxCpltCallback>:

// Call back function when receive message on UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	// Receive the data and clear the flag bit
	HAL_UART_Receive_IT(huart, &command, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	490f      	ldr	r1, [pc, #60]	; (8001784 <HAL_UART_RxCpltCallback+0x48>)
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f002 fe74 	bl	8004436 <HAL_UART_Receive_IT>
	// Check the received command
	sprintf(rcvMsg,"Received : %c\r\n", command);
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_UART_RxCpltCallback+0x48>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	; (8001788 <HAL_UART_RxCpltCallback+0x4c>)
 8001756:	480d      	ldr	r0, [pc, #52]	; (800178c <HAL_UART_RxCpltCallback+0x50>)
 8001758:	f004 f8a4 	bl	80058a4 <siprintf>
	HAL_UART_Transmit(&huart1, rcvMsg, strlen(rcvMsg), 100);
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <HAL_UART_RxCpltCallback+0x50>)
 800175e:	f7fe fcf7 	bl	8000150 <strlen>
 8001762:	4603      	mov	r3, r0
 8001764:	b29a      	uxth	r2, r3
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	4908      	ldr	r1, [pc, #32]	; (800178c <HAL_UART_RxCpltCallback+0x50>)
 800176a:	4809      	ldr	r0, [pc, #36]	; (8001790 <HAL_UART_RxCpltCallback+0x54>)
 800176c:	f002 fde0 	bl	8004330 <HAL_UART_Transmit>
	// Handling the command
	Command_Handling(command);
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <HAL_UART_RxCpltCallback+0x48>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <Command_Handling>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000331 	.word	0x20000331
 8001788:	08007e2c 	.word	0x08007e2c
 800178c:	20000318 	.word	0x20000318
 8001790:	200002d0 	.word	0x200002d0

08001794 <main>:

int main(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  // System initialization
  HAL_Init();
 8001798:	f000 fcbe 	bl	8002118 <HAL_Init>
  SystemClock_Config();
 800179c:	f000 f87e 	bl	800189c <SystemClock_Config>
  MX_GPIO_Init();
 80017a0:	f000 fa04 	bl	8001bac <MX_GPIO_Init>
  MX_TIM2_Init();
 80017a4:	f000 f8c0 	bl	8001928 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017a8:	f000 f90c 	bl	80019c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017ac:	f000 f95e 	bl	8001a6c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80017b0:	f000 f9d2 	bl	8001b58 <MX_USART1_UART_Init>

  // Configure the UART reception location
  HAL_UART_Receive_IT(&huart1, &command, 1);
 80017b4:	2201      	movs	r2, #1
 80017b6:	4909      	ldr	r1, [pc, #36]	; (80017dc <main+0x48>)
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <main+0x4c>)
 80017ba:	f002 fe3c 	bl	8004436 <HAL_UART_Receive_IT>
  // Configure the PWM mode on TIMER 4
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017be:	2100      	movs	r1, #0
 80017c0:	4808      	ldr	r0, [pc, #32]	; (80017e4 <main+0x50>)
 80017c2:	f001 fdc9 	bl	8003358 <HAL_TIM_PWM_Start>
  // Configure the Encoder mode on TIMER 3
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80017c6:	213c      	movs	r1, #60	; 0x3c
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <main+0x54>)
 80017ca:	f001 ff09 	bl	80035e0 <HAL_TIM_Encoder_Start>

  // Initiate the motor
  MotorStart();
 80017ce:	f7ff fcd7 	bl	8001180 <MotorStart>
  SpeedCtrl(0.3);
 80017d2:	4806      	ldr	r0, [pc, #24]	; (80017ec <main+0x58>)
 80017d4:	f7ff fc9c 	bl	8001110 <SpeedCtrl>

  while (1)
 80017d8:	e7fe      	b.n	80017d8 <main+0x44>
 80017da:	bf00      	nop
 80017dc:	20000331 	.word	0x20000331
 80017e0:	200002d0 	.word	0x200002d0
 80017e4:	20000288 	.word	0x20000288
 80017e8:	20000240 	.word	0x20000240
 80017ec:	3e99999a 	.word	0x3e99999a

080017f0 <HAL_TIM_PeriodElapsedCallback>:
  return 0;
}

// Function to handle callback of timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	PositionCtrl();
 80017f8:	f7ff feca 	bl	8001590 <PositionCtrl>
	if(++count == 100)
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b64      	cmp	r3, #100	; 0x64
 800180e:	d113      	bne.n	8001838 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		count = 0;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
		sprintf(rcvMsg,"Pulse : %d\r\n", TIM3->CNT);
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	461a      	mov	r2, r3
 800181c:	490a      	ldr	r1, [pc, #40]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800181e:	480b      	ldr	r0, [pc, #44]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001820:	f004 f840 	bl	80058a4 <siprintf>
	    HAL_UART_Transmit(&huart1, rcvMsg, strlen(rcvMsg), 100);
 8001824:	4809      	ldr	r0, [pc, #36]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001826:	f7fe fc93 	bl	8000150 <strlen>
 800182a:	4603      	mov	r3, r0
 800182c:	b29a      	uxth	r2, r3
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	4906      	ldr	r1, [pc, #24]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001834:	f002 fd7c 	bl	8004330 <HAL_UART_Transmit>
	}
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000332 	.word	0x20000332
 8001844:	40000400 	.word	0x40000400
 8001848:	08007e3c 	.word	0x08007e3c
 800184c:	20000318 	.word	0x20000318
 8001850:	200002d0 	.word	0x200002d0

08001854 <HAL_GPIO_EXTI_Callback>:

// Function to handle external interrupt service
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
	// Immediately stop the motor
	if(GPIO_Pin == GPIO_PIN_15)
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001864:	d10f      	bne.n	8001886 <HAL_GPIO_EXTI_Callback+0x32>
	{
		MotorStop();
 8001866:	f7ff fc75 	bl	8001154 <MotorStop>
		// Send feedback
		sprintf(rcvMsg, "Motor stopped\r\n");
 800186a:	4909      	ldr	r1, [pc, #36]	; (8001890 <HAL_GPIO_EXTI_Callback+0x3c>)
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <HAL_GPIO_EXTI_Callback+0x40>)
 800186e:	f004 f819 	bl	80058a4 <siprintf>
		HAL_UART_Transmit(&huart1, rcvMsg, strlen(rcvMsg), 100);
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <HAL_GPIO_EXTI_Callback+0x40>)
 8001874:	f7fe fc6c 	bl	8000150 <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	2364      	movs	r3, #100	; 0x64
 800187e:	4905      	ldr	r1, [pc, #20]	; (8001894 <HAL_GPIO_EXTI_Callback+0x40>)
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_GPIO_EXTI_Callback+0x44>)
 8001882:	f002 fd55 	bl	8004330 <HAL_UART_Transmit>
	}
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	08007e4c 	.word	0x08007e4c
 8001894:	20000318 	.word	0x20000318
 8001898:	200002d0 	.word	0x200002d0

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b090      	sub	sp, #64	; 0x40
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0318 	add.w	r3, r7, #24
 80018a6:	2228      	movs	r2, #40	; 0x28
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 fb92 	bl	8004fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018cc:	2301      	movs	r3, #1
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d0:	2302      	movs	r3, #2
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 f807 	bl	80028f8 <HAL_RCC_OscConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80018f0:	f000 f9be 	bl	8001c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f4:	230f      	movs	r3, #15
 80018f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f8:	2302      	movs	r3, #2
 80018fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2102      	movs	r1, #2
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fa74 	bl	8002dfc <HAL_RCC_ClockConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800191a:	f000 f9a9 	bl	8001c70 <Error_Handler>
  }
}
 800191e:	bf00      	nop
 8001920:	3740      	adds	r7, #64	; 0x40
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	463b      	mov	r3, r7
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_TIM2_Init+0x98>)
 8001946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_TIM2_Init+0x98>)
 800194e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001952:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_TIM2_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 720;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_TIM2_Init+0x98>)
 800195c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001960:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_TIM2_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_TIM2_Init+0x98>)
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <MX_TIM2_Init+0x98>)
 8001970:	f001 fbd2 	bl	8003118 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800197a:	f000 f979 	bl	8001c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001982:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4619      	mov	r1, r3
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_TIM2_Init+0x98>)
 800198c:	f002 f880 	bl	8003a90 <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001996:	f000 f96b 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a2:	463b      	mov	r3, r7
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_TIM2_Init+0x98>)
 80019a8:	f002 fc02 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019b2:	f000 f95d 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200001f8 	.word	0x200001f8

080019c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 fafe 	bl	8004fd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <MX_TIM3_Init+0xa4>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019e8:	2204      	movs	r2, #4
 80019ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_TIM3_Init+0xa0>)
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a06:	2303      	movs	r3, #3
 8001a08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a16:	230a      	movs	r3, #10
 8001a18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_TIM3_Init+0xa0>)
 8001a32:	f001 fd33 	bl	800349c <HAL_TIM_Encoder_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a3c:	f000 f918 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_TIM3_Init+0xa0>)
 8001a4e:	f002 fbaf 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a58:	f000 f90a 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000240 	.word	0x20000240
 8001a68:	40000400 	.word	0x40000400

08001a6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	; 0x38
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a9c:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <MX_TIM4_Init+0xe8>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001aa4:	2223      	movs	r2, #35	; 0x23
 8001aa6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ac2:	4823      	ldr	r0, [pc, #140]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001ac4:	f001 fb28 	bl	8003118 <HAL_TIM_Base_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ace:	f000 f8cf 	bl	8001c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001adc:	4619      	mov	r1, r3
 8001ade:	481c      	ldr	r0, [pc, #112]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001ae0:	f001 ffd6 	bl	8003a90 <HAL_TIM_ConfigClockSource>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001aea:	f000 f8c1 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aee:	4818      	ldr	r0, [pc, #96]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001af0:	f001 fbda 	bl	80032a8 <HAL_TIM_PWM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001afa:	f000 f8b9 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b06:	f107 0320 	add.w	r3, r7, #32
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4810      	ldr	r0, [pc, #64]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001b0e:	f002 fb4f 	bl	80041b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b18:	f000 f8aa 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1c:	2360      	movs	r3, #96	; 0x60
 8001b1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001b34:	f001 feea 	bl	800390c <HAL_TIM_PWM_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b3e:	f000 f897 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <MX_TIM4_Init+0xe4>)
 8001b44:	f000 f932 	bl	8001dac <HAL_TIM_MspPostInit>

}
 8001b48:	bf00      	nop
 8001b4a:	3738      	adds	r7, #56	; 0x38
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000288 	.word	0x20000288
 8001b54:	40000800 	.word	0x40000800

08001b58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_USART1_UART_Init+0x50>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART1_UART_Init+0x4c>)
 8001b90:	f002 fb7e 	bl	8004290 <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b9a:	f000 f869 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002d0 	.word	0x200002d0
 8001ba8:	40013800 	.word	0x40013800

08001bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bc6:	f043 0320 	orr.w	r3, r3, #32
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bf6:	f043 0308 	orr.w	r3, r3, #8
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <MX_GPIO_Init+0xb8>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001c0e:	4816      	ldr	r0, [pc, #88]	; (8001c68 <MX_GPIO_Init+0xbc>)
 8001c10:	f000 fe28 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001c14:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480e      	ldr	r0, [pc, #56]	; (8001c68 <MX_GPIO_Init+0xbc>)
 8001c2e:	f000 fc95 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_GPIO_Init+0xc0>)
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	4808      	ldr	r0, [pc, #32]	; (8001c68 <MX_GPIO_Init+0xbc>)
 8001c48:	f000 fc88 	bl	800255c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f000 fb9a 	bl	800238a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c56:	2028      	movs	r0, #40	; 0x28
 8001c58:	f000 fbb3 	bl	80023c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c5c:	bf00      	nop
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010c00 	.word	0x40010c00
 8001c6c:	10110000 	.word	0x10110000

08001c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c74:	b672      	cpsid	i
}
 8001c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <Error_Handler+0x8>
	...

08001c7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_MspInit+0x40>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <HAL_MspInit+0x40>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6193      	str	r3, [r2, #24]
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_MspInit+0x40>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_MspInit+0x40>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_MspInit+0x40>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	61d3      	str	r3, [r2, #28]
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_MspInit+0x40>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd0:	d114      	bne.n	8001cfc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_TIM_Base_MspInit+0x68>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <HAL_TIM_Base_MspInit+0x68>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_TIM_Base_MspInit+0x68>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	201c      	movs	r0, #28
 8001cf0:	f000 fb4b 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cf4:	201c      	movs	r0, #28
 8001cf6:	f000 fb64 	bl	80023c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cfa:	e010      	b.n	8001d1e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_TIM_Base_MspInit+0x6c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10b      	bne.n	8001d1e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_TIM_Base_MspInit+0x68>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_TIM_Base_MspInit+0x68>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_TIM_Base_MspInit+0x68>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40000800 	.word	0x40000800

08001d30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <HAL_TIM_Encoder_MspInit+0x70>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d123      	bne.n	8001d98 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	61d3      	str	r3, [r2, #28]
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_TIM_Encoder_MspInit+0x74>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4619      	mov	r1, r3
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <HAL_TIM_Encoder_MspInit+0x78>)
 8001d94:	f000 fbe2 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010800 	.word	0x40010800

08001dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_TIM_MspPostInit+0x58>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d117      	bne.n	8001dfc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_TIM_MspPostInit+0x5c>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <HAL_TIM_MspPostInit+0x5c>)
 8001dd2:	f043 0308 	orr.w	r3, r3, #8
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_TIM_MspPostInit+0x5c>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001de4:	2340      	movs	r3, #64	; 0x40
 8001de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4619      	mov	r1, r3
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_TIM_MspPostInit+0x60>)
 8001df8:	f000 fbb0 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40000800 	.word	0x40000800
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010c00 	.word	0x40010c00

08001e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a20      	ldr	r2, [pc, #128]	; (8001eac <HAL_UART_MspInit+0x9c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d139      	bne.n	8001ea4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_UART_MspInit+0xa0>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_UART_MspInit+0xa0>)
 8001e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_UART_MspInit+0xa0>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_UART_MspInit+0xa0>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_UART_MspInit+0xa0>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6193      	str	r3, [r2, #24]
 8001e54:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_UART_MspInit+0xa0>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	4619      	mov	r1, r3
 8001e74:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <HAL_UART_MspInit+0xa4>)
 8001e76:	f000 fb71 	bl	800255c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <HAL_UART_MspInit+0xa4>)
 8001e90:	f000 fb64 	bl	800255c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	2025      	movs	r0, #37	; 0x25
 8001e9a:	f000 fa76 	bl	800238a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e9e:	2025      	movs	r0, #37	; 0x25
 8001ea0:	f000 fa8f 	bl	80023c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010800 	.word	0x40010800

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <NMI_Handler+0x4>

08001ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <HardFault_Handler+0x4>

08001ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler+0x4>

08001eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efe:	f000 f951 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <TIM2_IRQHandler+0x10>)
 8001f0e:	f001 fbf5 	bl	80036fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200001f8 	.word	0x200001f8

08001f1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <USART1_IRQHandler+0x10>)
 8001f22:	f002 faad 	bl	8004480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200002d0 	.word	0x200002d0

08001f30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001f34:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f38:	f000 fcc6 	bl	80028c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <_kill>:

int _kill(int pid, int sig)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f58:	f003 f812 	bl	8004f80 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2216      	movs	r2, #22
 8001f60:	601a      	str	r2, [r3, #0]
  return -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_exit>:

void _exit (int status)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f76:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffe7 	bl	8001f4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f80:	e7fe      	b.n	8001f80 <_exit+0x12>

08001f82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e00a      	b.n	8001faa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f94:	f3af 8000 	nop.w
 8001f98:	4601      	mov	r1, r0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	60ba      	str	r2, [r7, #8]
 8001fa0:	b2ca      	uxtb	r2, r1
 8001fa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	dbf0      	blt.n	8001f94 <_read+0x12>
  }

  return len;
 8001fb2:	687b      	ldr	r3, [r7, #4]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e009      	b.n	8001fe2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	60ba      	str	r2, [r7, #8]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dbf1      	blt.n	8001fce <_write+0x12>
  }
  return len;
 8001fea:	687b      	ldr	r3, [r7, #4]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_close>:

int _close(int file)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800201a:	605a      	str	r2, [r3, #4]
  return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <_isatty>:

int _isatty(int file)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f002 ff7c 	bl	8004f80 <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20005000 	.word	0x20005000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	20000358 	.word	0x20000358
 80020bc:	20000370 	.word	0x20000370

080020c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020cc:	f7ff fff8 	bl	80020c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d0:	480b      	ldr	r0, [pc, #44]	; (8002100 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020d2:	490c      	ldr	r1, [pc, #48]	; (8002104 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020d4:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020e8:	4c09      	ldr	r4, [pc, #36]	; (8002110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f6:	f002 ff49 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020fa:	f7ff fb4b 	bl	8001794 <main>
  bx lr
 80020fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002108:	0800826c 	.word	0x0800826c
  ldr r2, =_sbss
 800210c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002110:	20000370 	.word	0x20000370

08002114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC1_2_IRQHandler>
	...

08002118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_Init+0x28>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_Init+0x28>)
 8002122:	f043 0310 	orr.w	r3, r3, #16
 8002126:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 f923 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212e:	200f      	movs	r0, #15
 8002130:	f000 f808 	bl	8002144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002134:	f7ff fda2 	bl	8001c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40022000 	.word	0x40022000

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_InitTick+0x54>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_InitTick+0x58>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	fbb3 f3f1 	udiv	r3, r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f93b 	bl	80023de <HAL_SYSTICK_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e00e      	b.n	8002190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d80a      	bhi.n	800218e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002178:	2200      	movs	r2, #0
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f000 f903 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <HAL_InitTick+0x5c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000000 	.word	0x20000000
 800219c:	20000008 	.word	0x20000008
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_IncTick+0x1c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_IncTick+0x20>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a03      	ldr	r2, [pc, #12]	; (80021c4 <HAL_IncTick+0x20>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	20000008 	.word	0x20000008
 80021c4:	2000035c 	.word	0x2000035c

080021c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b02      	ldr	r3, [pc, #8]	; (80021d8 <HAL_GetTick+0x10>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	2000035c 	.word	0x2000035c

080021dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220e:	4a04      	ldr	r2, [pc, #16]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60d3      	str	r3, [r2, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <__NVIC_GetPriorityGrouping+0x18>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0307 	and.w	r3, r3, #7
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	2b00      	cmp	r3, #0
 8002250:	db0b      	blt.n	800226a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4906      	ldr	r1, [pc, #24]	; (8002274 <__NVIC_EnableIRQ+0x34>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2001      	movs	r0, #1
 8002262:	fa00 f202 	lsl.w	r2, r0, r2
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	; (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	; 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	f7ff ff90 	bl	8002278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff2d 	bl	80021dc <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff42 	bl	8002224 <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff90 	bl	80022cc <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff5f 	bl	8002278 <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff35 	bl	8002240 <__NVIC_EnableIRQ>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff ffa2 	bl	8002330 <SysTick_Config>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d008      	beq.n	8002420 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e020      	b.n	8002462 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 020e 	bic.w	r2, r2, #14
 800242e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d005      	beq.n	8002490 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e051      	b.n	8002534 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 020e 	bic.w	r2, r2, #14
 800249e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a22      	ldr	r2, [pc, #136]	; (8002540 <HAL_DMA_Abort_IT+0xd4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d029      	beq.n	800250e <HAL_DMA_Abort_IT+0xa2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a21      	ldr	r2, [pc, #132]	; (8002544 <HAL_DMA_Abort_IT+0xd8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d022      	beq.n	800250a <HAL_DMA_Abort_IT+0x9e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_DMA_Abort_IT+0xdc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01a      	beq.n	8002504 <HAL_DMA_Abort_IT+0x98>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_DMA_Abort_IT+0xe0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d012      	beq.n	80024fe <HAL_DMA_Abort_IT+0x92>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <HAL_DMA_Abort_IT+0xe4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00a      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x8c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <HAL_DMA_Abort_IT+0xe8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d102      	bne.n	80024f2 <HAL_DMA_Abort_IT+0x86>
 80024ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024f0:	e00e      	b.n	8002510 <HAL_DMA_Abort_IT+0xa4>
 80024f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f6:	e00b      	b.n	8002510 <HAL_DMA_Abort_IT+0xa4>
 80024f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024fc:	e008      	b.n	8002510 <HAL_DMA_Abort_IT+0xa4>
 80024fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002502:	e005      	b.n	8002510 <HAL_DMA_Abort_IT+0xa4>
 8002504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002508:	e002      	b.n	8002510 <HAL_DMA_Abort_IT+0xa4>
 800250a:	2310      	movs	r3, #16
 800250c:	e000      	b.n	8002510 <HAL_DMA_Abort_IT+0xa4>
 800250e:	2301      	movs	r3, #1
 8002510:	4a11      	ldr	r2, [pc, #68]	; (8002558 <HAL_DMA_Abort_IT+0xec>)
 8002512:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	4798      	blx	r3
    } 
  }
  return status;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40020008 	.word	0x40020008
 8002544:	4002001c 	.word	0x4002001c
 8002548:	40020030 	.word	0x40020030
 800254c:	40020044 	.word	0x40020044
 8002550:	40020058 	.word	0x40020058
 8002554:	4002006c 	.word	0x4002006c
 8002558:	40020000 	.word	0x40020000

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b08b      	sub	sp, #44	; 0x2c
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256e:	e169      	b.n	8002844 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002570:	2201      	movs	r2, #1
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8158 	bne.w	800283e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a9a      	ldr	r2, [pc, #616]	; (80027fc <HAL_GPIO_Init+0x2a0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d05e      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 8002598:	4a98      	ldr	r2, [pc, #608]	; (80027fc <HAL_GPIO_Init+0x2a0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d875      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 800259e:	4a98      	ldr	r2, [pc, #608]	; (8002800 <HAL_GPIO_Init+0x2a4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d058      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025a4:	4a96      	ldr	r2, [pc, #600]	; (8002800 <HAL_GPIO_Init+0x2a4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d86f      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025aa:	4a96      	ldr	r2, [pc, #600]	; (8002804 <HAL_GPIO_Init+0x2a8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d052      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025b0:	4a94      	ldr	r2, [pc, #592]	; (8002804 <HAL_GPIO_Init+0x2a8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d869      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025b6:	4a94      	ldr	r2, [pc, #592]	; (8002808 <HAL_GPIO_Init+0x2ac>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04c      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025bc:	4a92      	ldr	r2, [pc, #584]	; (8002808 <HAL_GPIO_Init+0x2ac>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d863      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025c2:	4a92      	ldr	r2, [pc, #584]	; (800280c <HAL_GPIO_Init+0x2b0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d046      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025c8:	4a90      	ldr	r2, [pc, #576]	; (800280c <HAL_GPIO_Init+0x2b0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d85d      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025ce:	2b12      	cmp	r3, #18
 80025d0:	d82a      	bhi.n	8002628 <HAL_GPIO_Init+0xcc>
 80025d2:	2b12      	cmp	r3, #18
 80025d4:	d859      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <HAL_GPIO_Init+0x80>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	08002657 	.word	0x08002657
 80025e0:	08002631 	.word	0x08002631
 80025e4:	08002643 	.word	0x08002643
 80025e8:	08002685 	.word	0x08002685
 80025ec:	0800268b 	.word	0x0800268b
 80025f0:	0800268b 	.word	0x0800268b
 80025f4:	0800268b 	.word	0x0800268b
 80025f8:	0800268b 	.word	0x0800268b
 80025fc:	0800268b 	.word	0x0800268b
 8002600:	0800268b 	.word	0x0800268b
 8002604:	0800268b 	.word	0x0800268b
 8002608:	0800268b 	.word	0x0800268b
 800260c:	0800268b 	.word	0x0800268b
 8002610:	0800268b 	.word	0x0800268b
 8002614:	0800268b 	.word	0x0800268b
 8002618:	0800268b 	.word	0x0800268b
 800261c:	0800268b 	.word	0x0800268b
 8002620:	08002639 	.word	0x08002639
 8002624:	0800264d 	.word	0x0800264d
 8002628:	4a79      	ldr	r2, [pc, #484]	; (8002810 <HAL_GPIO_Init+0x2b4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800262e:	e02c      	b.n	800268a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	623b      	str	r3, [r7, #32]
          break;
 8002636:	e029      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	3304      	adds	r3, #4
 800263e:	623b      	str	r3, [r7, #32]
          break;
 8002640:	e024      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	3308      	adds	r3, #8
 8002648:	623b      	str	r3, [r7, #32]
          break;
 800264a:	e01f      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	330c      	adds	r3, #12
 8002652:	623b      	str	r3, [r7, #32]
          break;
 8002654:	e01a      	b.n	800268c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800265e:	2304      	movs	r3, #4
 8002660:	623b      	str	r3, [r7, #32]
          break;
 8002662:	e013      	b.n	800268c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800266c:	2308      	movs	r3, #8
 800266e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	611a      	str	r2, [r3, #16]
          break;
 8002676:	e009      	b.n	800268c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002678:	2308      	movs	r3, #8
 800267a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	615a      	str	r2, [r3, #20]
          break;
 8002682:	e003      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
          break;
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x130>
          break;
 800268a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2bff      	cmp	r3, #255	; 0xff
 8002690:	d801      	bhi.n	8002696 <HAL_GPIO_Init+0x13a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	e001      	b.n	800269a <HAL_GPIO_Init+0x13e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2bff      	cmp	r3, #255	; 0xff
 80026a0:	d802      	bhi.n	80026a8 <HAL_GPIO_Init+0x14c>
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	e002      	b.n	80026ae <HAL_GPIO_Init+0x152>
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	3b08      	subs	r3, #8
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	210f      	movs	r1, #15
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	401a      	ands	r2, r3
 80026c0:	6a39      	ldr	r1, [r7, #32]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	431a      	orrs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80b1 	beq.w	800283e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026dc:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <HAL_GPIO_Init+0x2b8>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <HAL_GPIO_Init+0x2b8>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <HAL_GPIO_Init+0x2b8>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026f4:	4a48      	ldr	r2, [pc, #288]	; (8002818 <HAL_GPIO_Init+0x2bc>)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a40      	ldr	r2, [pc, #256]	; (800281c <HAL_GPIO_Init+0x2c0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <HAL_GPIO_Init+0x1ec>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a3f      	ldr	r2, [pc, #252]	; (8002820 <HAL_GPIO_Init+0x2c4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d00d      	beq.n	8002744 <HAL_GPIO_Init+0x1e8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a3e      	ldr	r2, [pc, #248]	; (8002824 <HAL_GPIO_Init+0x2c8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d007      	beq.n	8002740 <HAL_GPIO_Init+0x1e4>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a3d      	ldr	r2, [pc, #244]	; (8002828 <HAL_GPIO_Init+0x2cc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_GPIO_Init+0x1e0>
 8002738:	2303      	movs	r3, #3
 800273a:	e006      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 800273c:	2304      	movs	r3, #4
 800273e:	e004      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002740:	2302      	movs	r3, #2
 8002742:	e002      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_GPIO_Init+0x1ee>
 8002748:	2300      	movs	r3, #0
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	f002 0203 	and.w	r2, r2, #3
 8002750:	0092      	lsls	r2, r2, #2
 8002752:	4093      	lsls	r3, r2
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800275a:	492f      	ldr	r1, [pc, #188]	; (8002818 <HAL_GPIO_Init+0x2bc>)
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_GPIO_Init+0x2d0>)
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	492c      	ldr	r1, [pc, #176]	; (800282c <HAL_GPIO_Init+0x2d0>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002782:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_GPIO_Init+0x2d0>)
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	43db      	mvns	r3, r3
 800278a:	4928      	ldr	r1, [pc, #160]	; (800282c <HAL_GPIO_Init+0x2d0>)
 800278c:	4013      	ands	r3, r2
 800278e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_GPIO_Init+0x2d0>)
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	4922      	ldr	r1, [pc, #136]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60cb      	str	r3, [r1, #12]
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	491e      	ldr	r1, [pc, #120]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4918      	ldr	r1, [pc, #96]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	43db      	mvns	r3, r3
 80027da:	4914      	ldr	r1, [pc, #80]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d021      	beq.n	8002830 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	490e      	ldr	r1, [pc, #56]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e021      	b.n	800283e <HAL_GPIO_Init+0x2e2>
 80027fa:	bf00      	nop
 80027fc:	10320000 	.word	0x10320000
 8002800:	10310000 	.word	0x10310000
 8002804:	10220000 	.word	0x10220000
 8002808:	10210000 	.word	0x10210000
 800280c:	10120000 	.word	0x10120000
 8002810:	10110000 	.word	0x10110000
 8002814:	40021000 	.word	0x40021000
 8002818:	40010000 	.word	0x40010000
 800281c:	40010800 	.word	0x40010800
 8002820:	40010c00 	.word	0x40010c00
 8002824:	40011000 	.word	0x40011000
 8002828:	40011400 	.word	0x40011400
 800282c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_GPIO_Init+0x304>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	43db      	mvns	r3, r3
 8002838:	4909      	ldr	r1, [pc, #36]	; (8002860 <HAL_GPIO_Init+0x304>)
 800283a:	4013      	ands	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	3301      	adds	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	f47f ae8e 	bne.w	8002570 <HAL_GPIO_Init+0x14>
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	372c      	adds	r7, #44	; 0x2c
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	40010400 	.word	0x40010400

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43d9      	mvns	r1, r3
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	400b      	ands	r3, r1
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	611a      	str	r2, [r3, #16]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe ffb4 	bl	8001854 <HAL_GPIO_EXTI_Callback>
  }
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40010400 	.word	0x40010400

080028f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e272      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8087 	beq.w	8002a26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002918:	4b92      	ldr	r3, [pc, #584]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b04      	cmp	r3, #4
 8002922:	d00c      	beq.n	800293e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002924:	4b8f      	ldr	r3, [pc, #572]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d112      	bne.n	8002956 <HAL_RCC_OscConfig+0x5e>
 8002930:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d10b      	bne.n	8002956 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293e:	4b89      	ldr	r3, [pc, #548]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x12c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d168      	bne.n	8002a24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e24c      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x76>
 8002960:	4b80      	ldr	r3, [pc, #512]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a7f      	ldr	r2, [pc, #508]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e02e      	b.n	80029cc <HAL_RCC_OscConfig+0xd4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x98>
 8002976:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7a      	ldr	r2, [pc, #488]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 800297c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a77      	ldr	r2, [pc, #476]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xd4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0xbc>
 800299a:	4b72      	ldr	r3, [pc, #456]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a71      	ldr	r2, [pc, #452]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b6f      	ldr	r3, [pc, #444]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6e      	ldr	r2, [pc, #440]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xd4>
 80029b4:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6a      	ldr	r2, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b68      	ldr	r3, [pc, #416]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a67      	ldr	r2, [pc, #412]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff fbf8 	bl	80021c8 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7ff fbf4 	bl	80021c8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e200      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xe4>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7ff fbe4 	bl	80021c8 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7ff fbe0 	bl	80021c8 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1ec      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x10c>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d063      	beq.n	8002afa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a32:	4b4c      	ldr	r3, [pc, #304]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a3e:	4b49      	ldr	r3, [pc, #292]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x18c>
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x176>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1c0      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4939      	ldr	r1, [pc, #228]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	e03a      	b.n	8002afa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7ff fb99 	bl	80021c8 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7ff fb95 	bl	80021c8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1a1      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4927      	ldr	r1, [pc, #156]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
 8002acc:	e015      	b.n	8002afa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7ff fb78 	bl	80021c8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002adc:	f7ff fb74 	bl	80021c8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e180      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d03a      	beq.n	8002b7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d019      	beq.n	8002b42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7ff fb58 	bl	80021c8 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7ff fb54 	bl	80021c8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e160      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f000 face 	bl	80030dc <RCC_Delay>
 8002b40:	e01c      	b.n	8002b7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7ff fb3e 	bl	80021c8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4e:	e00f      	b.n	8002b70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b50:	f7ff fb3a 	bl	80021c8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d908      	bls.n	8002b70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e146      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	42420000 	.word	0x42420000
 8002b6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	4b92      	ldr	r3, [pc, #584]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e9      	bne.n	8002b50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a6 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8e:	4b8b      	ldr	r3, [pc, #556]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4a87      	ldr	r2, [pc, #540]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	61d3      	str	r3, [r2, #28]
 8002ba6:	4b85      	ldr	r3, [pc, #532]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b82      	ldr	r3, [pc, #520]	; (8002dc0 <HAL_RCC_OscConfig+0x4c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d118      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc2:	4b7f      	ldr	r3, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x4c8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a7e      	ldr	r2, [pc, #504]	; (8002dc0 <HAL_RCC_OscConfig+0x4c8>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bce:	f7ff fafb 	bl	80021c8 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd6:	f7ff faf7 	bl	80021c8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b64      	cmp	r3, #100	; 0x64
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e103      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	4b75      	ldr	r3, [pc, #468]	; (8002dc0 <HAL_RCC_OscConfig+0x4c8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x312>
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6213      	str	r3, [r2, #32]
 8002c08:	e02d      	b.n	8002c66 <HAL_RCC_OscConfig+0x36e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x334>
 8002c12:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a69      	ldr	r2, [pc, #420]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6213      	str	r3, [r2, #32]
 8002c1e:	4b67      	ldr	r3, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a66      	ldr	r2, [pc, #408]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	f023 0304 	bic.w	r3, r3, #4
 8002c28:	6213      	str	r3, [r2, #32]
 8002c2a:	e01c      	b.n	8002c66 <HAL_RCC_OscConfig+0x36e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d10c      	bne.n	8002c4e <HAL_RCC_OscConfig+0x356>
 8002c34:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4a60      	ldr	r2, [pc, #384]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	f043 0304 	orr.w	r3, r3, #4
 8002c3e:	6213      	str	r3, [r2, #32]
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4a5d      	ldr	r2, [pc, #372]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6213      	str	r3, [r2, #32]
 8002c4c:	e00b      	b.n	8002c66 <HAL_RCC_OscConfig+0x36e>
 8002c4e:	4b5b      	ldr	r3, [pc, #364]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4a5a      	ldr	r2, [pc, #360]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6213      	str	r3, [r2, #32]
 8002c5a:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	4a57      	ldr	r2, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d015      	beq.n	8002c9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6e:	f7ff faab 	bl	80021c8 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7ff faa7 	bl	80021c8 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0b1      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ee      	beq.n	8002c76 <HAL_RCC_OscConfig+0x37e>
 8002c98:	e014      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9a:	f7ff fa95 	bl	80021c8 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7ff fa91 	bl	80021c8 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e09b      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb8:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1ee      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cca:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4a3b      	ldr	r2, [pc, #236]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8087 	beq.w	8002dee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce0:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d061      	beq.n	8002db0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d146      	bne.n	8002d82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfa:	f7ff fa65 	bl	80021c8 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7ff fa61 	bl	80021c8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e06d      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d108      	bne.n	8002d3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4921      	ldr	r1, [pc, #132]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a19      	ldr	r1, [r3, #32]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	491b      	ldr	r1, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7ff fa35 	bl	80021c8 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d62:	f7ff fa31 	bl	80021c8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e03d      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x46a>
 8002d80:	e035      	b.n	8002dee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7ff fa1e 	bl	80021c8 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7ff fa1a 	bl	80021c8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e026      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x498>
 8002dae:	e01e      	b.n	8002dee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e019      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_OscConfig+0x500>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d106      	bne.n	8002dea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0d0      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d910      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 0207 	bic.w	r2, r3, #7
 8002e26:	4965      	ldr	r1, [pc, #404]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d040      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d115      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e073      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06b      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eda:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f023 0203 	bic.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4936      	ldr	r1, [pc, #216]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eec:	f7ff f96c 	bl	80021c8 <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7ff f968 	bl	80021c8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e053      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 020c 	and.w	r2, r3, #12
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d1eb      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d210      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	4922      	ldr	r1, [pc, #136]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f821 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	490a      	ldr	r1, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	5ccb      	ldrb	r3, [r1, r3]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1d0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f8ca 	bl	8002144 <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08007e5c 	.word	0x08007e5c
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d002      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x30>
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d003      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x36>
 8002ffe:	e027      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_GetSysClockFreq+0x98>)
 8003002:	613b      	str	r3, [r7, #16]
      break;
 8003004:	e027      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	0c9b      	lsrs	r3, r3, #18
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	4a17      	ldr	r2, [pc, #92]	; (800306c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003010:	5cd3      	ldrb	r3, [r2, r3]
 8003012:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_RCC_GetSysClockFreq+0x94>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	0c5b      	lsrs	r3, r3, #17
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	4a11      	ldr	r2, [pc, #68]	; (8003070 <HAL_RCC_GetSysClockFreq+0xa0>)
 800302a:	5cd3      	ldrb	r3, [r2, r3]
 800302c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	fb03 f202 	mul.w	r2, r3, r2
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	e004      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003044:	fb02 f303 	mul.w	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	613b      	str	r3, [r7, #16]
      break;
 800304e:	e002      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetSysClockFreq+0x98>)
 8003052:	613b      	str	r3, [r7, #16]
      break;
 8003054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003056:	693b      	ldr	r3, [r7, #16]
}
 8003058:	4618      	mov	r0, r3
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	007a1200 	.word	0x007a1200
 800306c:	08007e74 	.word	0x08007e74
 8003070:	08007e84 	.word	0x08007e84
 8003074:	003d0900 	.word	0x003d0900

08003078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800307c:	4b02      	ldr	r3, [pc, #8]	; (8003088 <HAL_RCC_GetHCLKFreq+0x10>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	20000000 	.word	0x20000000

0800308c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003090:	f7ff fff2 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4903      	ldr	r1, [pc, #12]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08007e6c 	.word	0x08007e6c

080030b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030b8:	f7ff ffde 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0adb      	lsrs	r3, r3, #11
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08007e6c 	.word	0x08007e6c

080030dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <RCC_Delay+0x34>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <RCC_Delay+0x38>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0a5b      	lsrs	r3, r3, #9
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030f8:	bf00      	nop
  }
  while (Delay --);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	60fa      	str	r2, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <RCC_Delay+0x1c>
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	20000000 	.word	0x20000000
 8003114:	10624dd3 	.word	0x10624dd3

08003118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e041      	b.n	80031ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe fdbe 	bl	8001cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f000 fd86 	bl	8003c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <HAL_TIM_Base_Stop+0x38>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	f240 4344 	movw	r3, #1092	; 0x444
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d107      	bne.n	80031ee <HAL_TIM_Base_Stop+0x38>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
	...

08003204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d001      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e03a      	b.n	8003292 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_TIM_Base_Start_IT+0x98>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00e      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x58>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d009      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x58>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x58>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d111      	bne.n	8003280 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d010      	beq.n	8003290 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	e007      	b.n	8003290 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40000800 	.word	0x40000800

080032a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e041      	b.n	800333e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f839 	bl	8003346 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 fcbe 	bl	8003c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_TIM_PWM_Start+0x24>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e022      	b.n	80033c2 <HAL_TIM_PWM_Start+0x6a>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d109      	bne.n	8003396 <HAL_TIM_PWM_Start+0x3e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e015      	b.n	80033c2 <HAL_TIM_PWM_Start+0x6a>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d109      	bne.n	80033b0 <HAL_TIM_PWM_Start+0x58>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	e008      	b.n	80033c2 <HAL_TIM_PWM_Start+0x6a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e05e      	b.n	8003488 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d104      	bne.n	80033da <HAL_TIM_PWM_Start+0x82>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d8:	e013      	b.n	8003402 <HAL_TIM_PWM_Start+0xaa>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d104      	bne.n	80033ea <HAL_TIM_PWM_Start+0x92>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e8:	e00b      	b.n	8003402 <HAL_TIM_PWM_Start+0xaa>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d104      	bne.n	80033fa <HAL_TIM_PWM_Start+0xa2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f8:	e003      	b.n	8003402 <HAL_TIM_PWM_Start+0xaa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	6839      	ldr	r1, [r7, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 feac 	bl	8004168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <HAL_TIM_PWM_Start+0x138>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d107      	bne.n	800342a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_TIM_PWM_Start+0x138>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_TIM_PWM_Start+0xfa>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d009      	beq.n	8003452 <HAL_TIM_PWM_Start+0xfa>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_TIM_PWM_Start+0x13c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_TIM_PWM_Start+0xfa>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a12      	ldr	r2, [pc, #72]	; (8003498 <HAL_TIM_PWM_Start+0x140>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d010      	beq.n	8003486 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	e007      	b.n	8003486 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800

0800349c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e093      	b.n	80035d8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d106      	bne.n	80034ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fe fc33 	bl	8001d30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e0:	f023 0307 	bic.w	r3, r3, #7
 80034e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f000 fbb9 	bl	8003c68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	4313      	orrs	r3, r2
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800353c:	f023 030c 	bic.w	r3, r3, #12
 8003540:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003548:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800354c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	4313      	orrs	r3, r2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	011a      	lsls	r2, r3, #4
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	031b      	lsls	r3, r3, #12
 800356c:	4313      	orrs	r3, r2
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800357a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	4313      	orrs	r3, r2
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003600:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003608:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d110      	bne.n	8003632 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d102      	bne.n	800361c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003616:	7b7b      	ldrb	r3, [r7, #13]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d001      	beq.n	8003620 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e069      	b.n	80036f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003630:	e031      	b.n	8003696 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d110      	bne.n	800365a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003638:	7bbb      	ldrb	r3, [r7, #14]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d102      	bne.n	8003644 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800363e:	7b3b      	ldrb	r3, [r7, #12]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e055      	b.n	80036f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003658:	e01d      	b.n	8003696 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d108      	bne.n	8003672 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003660:	7bbb      	ldrb	r3, [r7, #14]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d105      	bne.n	8003672 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003666:	7b7b      	ldrb	r3, [r7, #13]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d102      	bne.n	8003672 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800366c:	7b3b      	ldrb	r3, [r7, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d001      	beq.n	8003676 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e03e      	b.n	80036f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_TIM_Encoder_Start+0xc4>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d008      	beq.n	80036b4 <HAL_TIM_Encoder_Start+0xd4>
 80036a2:	e00f      	b.n	80036c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2201      	movs	r2, #1
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fd5b 	bl	8004168 <TIM_CCxChannelCmd>
      break;
 80036b2:	e016      	b.n	80036e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	2104      	movs	r1, #4
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fd53 	bl	8004168 <TIM_CCxChannelCmd>
      break;
 80036c2:	e00e      	b.n	80036e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fd4b 	bl	8004168 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	2104      	movs	r1, #4
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fd44 	bl	8004168 <TIM_CCxChannelCmd>
      break;
 80036e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b02      	cmp	r3, #2
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b02      	cmp	r3, #2
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0202 	mvn.w	r2, #2
 8003728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa76 	bl	8003c30 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa69 	bl	8003c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fa78 	bl	8003c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0204 	mvn.w	r2, #4
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa4c 	bl	8003c30 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa3f 	bl	8003c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fa4e 	bl	8003c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0208 	mvn.w	r2, #8
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2204      	movs	r2, #4
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa22 	bl	8003c30 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa15 	bl	8003c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fa24 	bl	8003c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b10      	cmp	r3, #16
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b10      	cmp	r3, #16
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0210 	mvn.w	r2, #16
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2208      	movs	r2, #8
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f9f8 	bl	8003c30 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9eb 	bl	8003c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f9fa 	bl	8003c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d10e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0201 	mvn.w	r2, #1
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd ffb8 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b80      	cmp	r3, #128	; 0x80
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fce9 	bl	800427e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f9be 	bl	8003c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0220 	mvn.w	r2, #32
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fcb4 	bl	800426c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003926:	2302      	movs	r3, #2
 8003928:	e0ae      	b.n	8003a88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b0c      	cmp	r3, #12
 8003936:	f200 809f 	bhi.w	8003a78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003975 	.word	0x08003975
 8003944:	08003a79 	.word	0x08003a79
 8003948:	08003a79 	.word	0x08003a79
 800394c:	08003a79 	.word	0x08003a79
 8003950:	080039b5 	.word	0x080039b5
 8003954:	08003a79 	.word	0x08003a79
 8003958:	08003a79 	.word	0x08003a79
 800395c:	08003a79 	.word	0x08003a79
 8003960:	080039f7 	.word	0x080039f7
 8003964:	08003a79 	.word	0x08003a79
 8003968:	08003a79 	.word	0x08003a79
 800396c:	08003a79 	.word	0x08003a79
 8003970:	08003a37 	.word	0x08003a37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f9d6 	bl	8003d2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0208 	orr.w	r2, r2, #8
 800398e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0204 	bic.w	r2, r2, #4
 800399e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6999      	ldr	r1, [r3, #24]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	619a      	str	r2, [r3, #24]
      break;
 80039b2:	e064      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fa1c 	bl	8003df8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6999      	ldr	r1, [r3, #24]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	021a      	lsls	r2, r3, #8
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	619a      	str	r2, [r3, #24]
      break;
 80039f4:	e043      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fa65 	bl	8003ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0208 	orr.w	r2, r2, #8
 8003a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0204 	bic.w	r2, r2, #4
 8003a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69d9      	ldr	r1, [r3, #28]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	61da      	str	r2, [r3, #28]
      break;
 8003a34:	e023      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 faaf 	bl	8003fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69d9      	ldr	r1, [r3, #28]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	021a      	lsls	r2, r3, #8
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	61da      	str	r2, [r3, #28]
      break;
 8003a76:	e002      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_TIM_ConfigClockSource+0x1c>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e0b4      	b.n	8003c16 <HAL_TIM_ConfigClockSource+0x186>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae4:	d03e      	beq.n	8003b64 <HAL_TIM_ConfigClockSource+0xd4>
 8003ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aea:	f200 8087 	bhi.w	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	f000 8086 	beq.w	8003c02 <HAL_TIM_ConfigClockSource+0x172>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d87f      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003afc:	2b70      	cmp	r3, #112	; 0x70
 8003afe:	d01a      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0xa6>
 8003b00:	2b70      	cmp	r3, #112	; 0x70
 8003b02:	d87b      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b60      	cmp	r3, #96	; 0x60
 8003b06:	d050      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0x11a>
 8003b08:	2b60      	cmp	r3, #96	; 0x60
 8003b0a:	d877      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b50      	cmp	r3, #80	; 0x50
 8003b0e:	d03c      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xfa>
 8003b10:	2b50      	cmp	r3, #80	; 0x50
 8003b12:	d873      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d058      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x13a>
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d86f      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b30      	cmp	r3, #48	; 0x30
 8003b1e:	d064      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x15a>
 8003b20:	2b30      	cmp	r3, #48	; 0x30
 8003b22:	d86b      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d060      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d867      	bhi.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d05c      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d05a      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x15a>
 8003b34:	e062      	b.n	8003bfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f000 faf0 	bl	800412a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	609a      	str	r2, [r3, #8]
      break;
 8003b62:	e04f      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	6899      	ldr	r1, [r3, #8]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f000 fad9 	bl	800412a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b86:	609a      	str	r2, [r3, #8]
      break;
 8003b88:	e03c      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	461a      	mov	r2, r3
 8003b98:	f000 fa50 	bl	800403c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2150      	movs	r1, #80	; 0x50
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 faa7 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003ba8:	e02c      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f000 fa6e 	bl	8004098 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2160      	movs	r1, #96	; 0x60
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fa97 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003bc8:	e01c      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f000 fa30 	bl	800403c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2140      	movs	r1, #64	; 0x40
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fa87 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003be8:	e00c      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f000 fa7e 	bl	80040f6 <TIM_ITRx_SetConfig>
      break;
 8003bfa:	e003      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003c00:	e000      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
	...

08003c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <TIM_Base_SetConfig+0xb8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_Base_SetConfig+0x30>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d007      	beq.n	8003c98 <TIM_Base_SetConfig+0x30>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <TIM_Base_SetConfig+0xbc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x30>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <TIM_Base_SetConfig+0xc0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d108      	bne.n	8003caa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <TIM_Base_SetConfig+0xb8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00b      	beq.n	8003cca <TIM_Base_SetConfig+0x62>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb8:	d007      	beq.n	8003cca <TIM_Base_SetConfig+0x62>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a19      	ldr	r2, [pc, #100]	; (8003d24 <TIM_Base_SetConfig+0xbc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d003      	beq.n	8003cca <TIM_Base_SetConfig+0x62>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <TIM_Base_SetConfig+0xc0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d108      	bne.n	8003cdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <TIM_Base_SetConfig+0xb8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d103      	bne.n	8003d10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	615a      	str	r2, [r3, #20]
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800

08003d2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f023 0201 	bic.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 0302 	bic.w	r3, r3, #2
 8003d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <TIM_OC1_SetConfig+0xc8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d10c      	bne.n	8003da2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 0308 	bic.w	r3, r3, #8
 8003d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <TIM_OC1_SetConfig+0xc8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d111      	bne.n	8003dce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40012c00 	.word	0x40012c00

08003df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f023 0210 	bic.w	r2, r3, #16
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0320 	bic.w	r3, r3, #32
 8003e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <TIM_OC2_SetConfig+0xd0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10d      	bne.n	8003e74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <TIM_OC2_SetConfig+0xd0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d113      	bne.n	8003ea4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	40012c00 	.word	0x40012c00

08003ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <TIM_OC3_SetConfig+0xd0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10d      	bne.n	8003f46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <TIM_OC3_SetConfig+0xd0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d113      	bne.n	8003f76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	621a      	str	r2, [r3, #32]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40012c00 	.word	0x40012c00

08003fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	031b      	lsls	r3, r3, #12
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <TIM_OC4_SetConfig+0x98>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d109      	bne.n	8004014 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	019b      	lsls	r3, r3, #6
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00

0800403c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 030a 	bic.w	r3, r3, #10
 8004078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f023 0210 	bic.w	r2, r3, #16
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	031b      	lsls	r3, r3, #12
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	621a      	str	r2, [r3, #32]
}
 80040ec:	bf00      	nop
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	f043 0307 	orr.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800412a:	b480      	push	{r7}
 800412c:	b087      	sub	sp, #28
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004144:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	021a      	lsls	r2, r3, #8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	431a      	orrs	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	609a      	str	r2, [r3, #8]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2201      	movs	r2, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e046      	b.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a16      	ldr	r2, [pc, #88]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00e      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d009      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a12      	ldr	r2, [pc, #72]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a10      	ldr	r2, [pc, #64]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10c      	bne.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	4313      	orrs	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800

0800426c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e042      	b.n	8004328 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd fdaa 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	; 0x24
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fdc5 	bl	8004e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b20      	cmp	r3, #32
 800434e:	d16d      	bne.n	800442c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UART_Transmit+0x2c>
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e066      	b.n	800442e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2221      	movs	r2, #33	; 0x21
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800436e:	f7fd ff2b 	bl	80021c8 <HAL_GetTick>
 8004372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004388:	d108      	bne.n	800439c <HAL_UART_Transmit+0x6c>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e003      	b.n	80043a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043a4:	e02a      	b.n	80043fc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2200      	movs	r2, #0
 80043ae:	2180      	movs	r1, #128	; 0x80
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 fb14 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e036      	b.n	800442e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10b      	bne.n	80043de <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	3302      	adds	r3, #2
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	e007      	b.n	80043ee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1cf      	bne.n	80043a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	2140      	movs	r1, #64	; 0x40
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fae4 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e006      	b.n	800442e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	4613      	mov	r3, r2
 8004442:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b20      	cmp	r3, #32
 800444e:	d112      	bne.n	8004476 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_UART_Receive_IT+0x26>
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e00b      	b.n	8004478 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	461a      	mov	r2, r3
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fb24 	bl	8004aba <UART_Start_Receive_IT>
 8004472:	4603      	mov	r3, r0
 8004474:	e000      	b.n	8004478 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
  }
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b0ba      	sub	sp, #232	; 0xe8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10f      	bne.n	80044e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_UART_IRQHandler+0x66>
 80044d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fc01 	bl	8004ce6 <UART_Receive_IT>
      return;
 80044e4:	e25b      	b.n	800499e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80de 	beq.w	80046ac <HAL_UART_IRQHandler+0x22c>
 80044f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004500:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80d1 	beq.w	80046ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_UART_IRQHandler+0xae>
 8004516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f043 0201 	orr.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_UART_IRQHandler+0xd2>
 800453a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	f043 0202 	orr.w	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_UART_IRQHandler+0xf6>
 800455e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d011      	beq.n	80045a6 <HAL_UART_IRQHandler+0x126>
 8004582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800458e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f043 0208 	orr.w	r2, r3, #8
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 81f2 	beq.w	8004994 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_UART_IRQHandler+0x14e>
 80045bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fb8c 	bl	8004ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <HAL_UART_IRQHandler+0x17a>
 80045f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d04f      	beq.n	800469a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa96 	bl	8004b2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d041      	beq.n	8004692 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004624:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800463a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800463e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004646:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1d9      	bne.n	800460e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d013      	beq.n	800468a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	4a7e      	ldr	r2, [pc, #504]	; (8004860 <HAL_UART_IRQHandler+0x3e0>)
 8004668:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	4618      	mov	r0, r3
 8004670:	f7fd fefc 	bl	800246c <HAL_DMA_Abort_IT>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d016      	beq.n	80046a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004684:	4610      	mov	r0, r2
 8004686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004688:	e00e      	b.n	80046a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f993 	bl	80049b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	e00a      	b.n	80046a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f98f 	bl	80049b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004698:	e006      	b.n	80046a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f98b 	bl	80049b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80046a6:	e175      	b.n	8004994 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	bf00      	nop
    return;
 80046aa:	e173      	b.n	8004994 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	f040 814f 	bne.w	8004954 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8148 	beq.w	8004954 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8141 	beq.w	8004954 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80b6 	beq.w	8004864 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004704:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8145 	beq.w	8004998 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004716:	429a      	cmp	r2, r3
 8004718:	f080 813e 	bcs.w	8004998 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004722:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b20      	cmp	r3, #32
 800472c:	f000 8088 	beq.w	8004840 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004746:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800474a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800474e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800475c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004768:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004774:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1d9      	bne.n	8004730 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3314      	adds	r3, #20
 8004782:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800478c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3314      	adds	r3, #20
 800479c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e1      	bne.n	800477c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3314      	adds	r3, #20
 80047be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3314      	adds	r3, #20
 80047d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e3      	bne.n	80047b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	330c      	adds	r3, #12
 8004804:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	f023 0310 	bic.w	r3, r3, #16
 8004814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004822:	65ba      	str	r2, [r7, #88]	; 0x58
 8004824:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e3      	bne.n	80047fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fddb 	bl	80023f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800484e:	b29b      	uxth	r3, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	4619      	mov	r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8b6 	bl	80049c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800485c:	e09c      	b.n	8004998 <HAL_UART_IRQHandler+0x518>
 800485e:	bf00      	nop
 8004860:	08004bf1 	.word	0x08004bf1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800486c:	b29b      	uxth	r3, r3
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 808e 	beq.w	800499c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8089 	beq.w	800499c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048ae:	647a      	str	r2, [r7, #68]	; 0x44
 80048b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e3      	bne.n	800488a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3314      	adds	r3, #20
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	623b      	str	r3, [r7, #32]
   return(result);
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3314      	adds	r3, #20
 80048e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048e6:	633a      	str	r2, [r7, #48]	; 0x30
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e3      	bne.n	80048c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	60fb      	str	r3, [r7, #12]
   return(result);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0310 	bic.w	r3, r3, #16
 800491e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800492c:	61fa      	str	r2, [r7, #28]
 800492e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	69b9      	ldr	r1, [r7, #24]
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	617b      	str	r3, [r7, #20]
   return(result);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e3      	bne.n	8004908 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004946:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f83b 	bl	80049c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004952:	e023      	b.n	800499c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d009      	beq.n	8004974 <HAL_UART_IRQHandler+0x4f4>
 8004960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f953 	bl	8004c18 <UART_Transmit_IT>
    return;
 8004972:	e014      	b.n	800499e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00e      	beq.n	800499e <HAL_UART_IRQHandler+0x51e>
 8004980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f992 	bl	8004cb6 <UART_EndTransmit_IT>
    return;
 8004992:	e004      	b.n	800499e <HAL_UART_IRQHandler+0x51e>
    return;
 8004994:	bf00      	nop
 8004996:	e002      	b.n	800499e <HAL_UART_IRQHandler+0x51e>
      return;
 8004998:	bf00      	nop
 800499a:	e000      	b.n	800499e <HAL_UART_IRQHandler+0x51e>
      return;
 800499c:	bf00      	nop
  }
}
 800499e:	37e8      	adds	r7, #232	; 0xe8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b090      	sub	sp, #64	; 0x40
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ee:	e050      	b.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d04c      	beq.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x30>
 80049fe:	f7fd fbe3 	bl	80021c8 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d241      	bcs.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a2e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a30:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e5      	bne.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	613b      	str	r3, [r7, #16]
   return(result);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a62:	623a      	str	r2, [r7, #32]
 8004a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	69f9      	ldr	r1, [r7, #28]
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e5      	bne.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e00f      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d09f      	beq.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3740      	adds	r7, #64	; 0x40
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2222      	movs	r2, #34	; 0x22
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0220 	orr.w	r2, r2, #32
 8004b1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b095      	sub	sp, #84	; 0x54
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	330c      	adds	r3, #12
 8004b52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b54:	643a      	str	r2, [r7, #64]	; 0x40
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3314      	adds	r3, #20
 8004b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f023 0301 	bic.w	r3, r3, #1
 8004b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e5      	bne.n	8004b68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d119      	bne.n	8004bd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f023 0310 	bic.w	r3, r3, #16
 8004bba:	647b      	str	r3, [r7, #68]	; 0x44
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bc4:	61ba      	str	r2, [r7, #24]
 8004bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6979      	ldr	r1, [r7, #20]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e5      	bne.n	8004ba4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004be6:	bf00      	nop
 8004be8:	3754      	adds	r7, #84	; 0x54
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fed3 	bl	80049b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b21      	cmp	r3, #33	; 0x21
 8004c2a:	d13e      	bne.n	8004caa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c34:	d114      	bne.n	8004c60 <UART_Transmit_IT+0x48>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d110      	bne.n	8004c60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]
 8004c5e:	e008      	b.n	8004c72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	1c59      	adds	r1, r3, #1
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6211      	str	r1, [r2, #32]
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
  }
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fe64 	bl	80049a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b08c      	sub	sp, #48	; 0x30
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b22      	cmp	r3, #34	; 0x22
 8004cf8:	f040 80ae 	bne.w	8004e58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d04:	d117      	bne.n	8004d36 <UART_Receive_IT+0x50>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d113      	bne.n	8004d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	629a      	str	r2, [r3, #40]	; 0x28
 8004d34:	e026      	b.n	8004d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d48:	d007      	beq.n	8004d5a <UART_Receive_IT+0x74>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <UART_Receive_IT+0x82>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e008      	b.n	8004d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4619      	mov	r1, r3
 8004d92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d15d      	bne.n	8004e54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0220 	bic.w	r2, r2, #32
 8004da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d135      	bne.n	8004e4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	613b      	str	r3, [r7, #16]
   return(result);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f023 0310 	bic.w	r3, r3, #16
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e04:	623a      	str	r2, [r7, #32]
 8004e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	69f9      	ldr	r1, [r7, #28]
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e5      	bne.n	8004de4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d10a      	bne.n	8004e3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fdc0 	bl	80049c8 <HAL_UARTEx_RxEventCallback>
 8004e48:	e002      	b.n	8004e50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fc76 	bl	800173c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e002      	b.n	8004e5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e000      	b.n	8004e5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
  }
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3730      	adds	r7, #48	; 0x30
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e9e:	f023 030c 	bic.w	r3, r3, #12
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2c      	ldr	r2, [pc, #176]	; (8004f78 <UART_SetConfig+0x114>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d103      	bne.n	8004ed4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ecc:	f7fe f8f2 	bl	80030b4 <HAL_RCC_GetPCLK2Freq>
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	e002      	b.n	8004eda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fe f8da 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8004ed8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009a      	lsls	r2, r3, #2
 8004ee4:	441a      	add	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <UART_SetConfig+0x118>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	0119      	lsls	r1, r3, #4
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009a      	lsls	r2, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f10:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <UART_SetConfig+0x118>)
 8004f12:	fba3 0302 	umull	r0, r3, r3, r2
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	2064      	movs	r0, #100	; 0x64
 8004f1a:	fb00 f303 	mul.w	r3, r0, r3
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	3332      	adds	r3, #50	; 0x32
 8004f24:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <UART_SetConfig+0x118>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f30:	4419      	add	r1, r3
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009a      	lsls	r2, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <UART_SetConfig+0x118>)
 8004f4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2064      	movs	r0, #100	; 0x64
 8004f52:	fb00 f303 	mul.w	r3, r0, r3
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	3332      	adds	r3, #50	; 0x32
 8004f5c:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <UART_SetConfig+0x118>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	f003 020f 	and.w	r2, r3, #15
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40013800 	.word	0x40013800
 8004f7c:	51eb851f 	.word	0x51eb851f

08004f80 <__errno>:
 8004f80:	4b01      	ldr	r3, [pc, #4]	; (8004f88 <__errno+0x8>)
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	2000000c 	.word	0x2000000c

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	2600      	movs	r6, #0
 8004f90:	4d0c      	ldr	r5, [pc, #48]	; (8004fc4 <__libc_init_array+0x38>)
 8004f92:	4c0d      	ldr	r4, [pc, #52]	; (8004fc8 <__libc_init_array+0x3c>)
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	f002 fefc 	bl	8007d98 <_init>
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	4d0a      	ldr	r5, [pc, #40]	; (8004fcc <__libc_init_array+0x40>)
 8004fa4:	4c0a      	ldr	r4, [pc, #40]	; (8004fd0 <__libc_init_array+0x44>)
 8004fa6:	1b64      	subs	r4, r4, r5
 8004fa8:	10a4      	asrs	r4, r4, #2
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	08008264 	.word	0x08008264
 8004fc8:	08008264 	.word	0x08008264
 8004fcc:	08008264 	.word	0x08008264
 8004fd0:	08008268 	.word	0x08008268

08004fd4 <memset>:
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	4402      	add	r2, r0
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d100      	bne.n	8004fde <memset+0xa>
 8004fdc:	4770      	bx	lr
 8004fde:	f803 1b01 	strb.w	r1, [r3], #1
 8004fe2:	e7f9      	b.n	8004fd8 <memset+0x4>

08004fe4 <__cvt>:
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fea:	461f      	mov	r7, r3
 8004fec:	bfbb      	ittet	lt
 8004fee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004ff2:	461f      	movlt	r7, r3
 8004ff4:	2300      	movge	r3, #0
 8004ff6:	232d      	movlt	r3, #45	; 0x2d
 8004ff8:	b088      	sub	sp, #32
 8004ffa:	4614      	mov	r4, r2
 8004ffc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ffe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005000:	7013      	strb	r3, [r2, #0]
 8005002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005004:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005008:	f023 0820 	bic.w	r8, r3, #32
 800500c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005010:	d005      	beq.n	800501e <__cvt+0x3a>
 8005012:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005016:	d100      	bne.n	800501a <__cvt+0x36>
 8005018:	3501      	adds	r5, #1
 800501a:	2302      	movs	r3, #2
 800501c:	e000      	b.n	8005020 <__cvt+0x3c>
 800501e:	2303      	movs	r3, #3
 8005020:	aa07      	add	r2, sp, #28
 8005022:	9204      	str	r2, [sp, #16]
 8005024:	aa06      	add	r2, sp, #24
 8005026:	e9cd a202 	strd	sl, r2, [sp, #8]
 800502a:	e9cd 3500 	strd	r3, r5, [sp]
 800502e:	4622      	mov	r2, r4
 8005030:	463b      	mov	r3, r7
 8005032:	f000 fce5 	bl	8005a00 <_dtoa_r>
 8005036:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800503a:	4606      	mov	r6, r0
 800503c:	d102      	bne.n	8005044 <__cvt+0x60>
 800503e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005040:	07db      	lsls	r3, r3, #31
 8005042:	d522      	bpl.n	800508a <__cvt+0xa6>
 8005044:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005048:	eb06 0905 	add.w	r9, r6, r5
 800504c:	d110      	bne.n	8005070 <__cvt+0x8c>
 800504e:	7833      	ldrb	r3, [r6, #0]
 8005050:	2b30      	cmp	r3, #48	; 0x30
 8005052:	d10a      	bne.n	800506a <__cvt+0x86>
 8005054:	2200      	movs	r2, #0
 8005056:	2300      	movs	r3, #0
 8005058:	4620      	mov	r0, r4
 800505a:	4639      	mov	r1, r7
 800505c:	f7fb fca4 	bl	80009a8 <__aeabi_dcmpeq>
 8005060:	b918      	cbnz	r0, 800506a <__cvt+0x86>
 8005062:	f1c5 0501 	rsb	r5, r5, #1
 8005066:	f8ca 5000 	str.w	r5, [sl]
 800506a:	f8da 3000 	ldr.w	r3, [sl]
 800506e:	4499      	add	r9, r3
 8005070:	2200      	movs	r2, #0
 8005072:	2300      	movs	r3, #0
 8005074:	4620      	mov	r0, r4
 8005076:	4639      	mov	r1, r7
 8005078:	f7fb fc96 	bl	80009a8 <__aeabi_dcmpeq>
 800507c:	b108      	cbz	r0, 8005082 <__cvt+0x9e>
 800507e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005082:	2230      	movs	r2, #48	; 0x30
 8005084:	9b07      	ldr	r3, [sp, #28]
 8005086:	454b      	cmp	r3, r9
 8005088:	d307      	bcc.n	800509a <__cvt+0xb6>
 800508a:	4630      	mov	r0, r6
 800508c:	9b07      	ldr	r3, [sp, #28]
 800508e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005090:	1b9b      	subs	r3, r3, r6
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	b008      	add	sp, #32
 8005096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	9107      	str	r1, [sp, #28]
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e7f0      	b.n	8005084 <__cvt+0xa0>

080050a2 <__exponent>:
 80050a2:	4603      	mov	r3, r0
 80050a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a6:	2900      	cmp	r1, #0
 80050a8:	f803 2b02 	strb.w	r2, [r3], #2
 80050ac:	bfb6      	itet	lt
 80050ae:	222d      	movlt	r2, #45	; 0x2d
 80050b0:	222b      	movge	r2, #43	; 0x2b
 80050b2:	4249      	neglt	r1, r1
 80050b4:	2909      	cmp	r1, #9
 80050b6:	7042      	strb	r2, [r0, #1]
 80050b8:	dd2b      	ble.n	8005112 <__exponent+0x70>
 80050ba:	f10d 0407 	add.w	r4, sp, #7
 80050be:	46a4      	mov	ip, r4
 80050c0:	270a      	movs	r7, #10
 80050c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80050c6:	460a      	mov	r2, r1
 80050c8:	46a6      	mov	lr, r4
 80050ca:	fb07 1516 	mls	r5, r7, r6, r1
 80050ce:	2a63      	cmp	r2, #99	; 0x63
 80050d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80050d4:	4631      	mov	r1, r6
 80050d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80050da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050de:	dcf0      	bgt.n	80050c2 <__exponent+0x20>
 80050e0:	3130      	adds	r1, #48	; 0x30
 80050e2:	f1ae 0502 	sub.w	r5, lr, #2
 80050e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80050ea:	4629      	mov	r1, r5
 80050ec:	1c44      	adds	r4, r0, #1
 80050ee:	4561      	cmp	r1, ip
 80050f0:	d30a      	bcc.n	8005108 <__exponent+0x66>
 80050f2:	f10d 0209 	add.w	r2, sp, #9
 80050f6:	eba2 020e 	sub.w	r2, r2, lr
 80050fa:	4565      	cmp	r5, ip
 80050fc:	bf88      	it	hi
 80050fe:	2200      	movhi	r2, #0
 8005100:	4413      	add	r3, r2
 8005102:	1a18      	subs	r0, r3, r0
 8005104:	b003      	add	sp, #12
 8005106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005108:	f811 2b01 	ldrb.w	r2, [r1], #1
 800510c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005110:	e7ed      	b.n	80050ee <__exponent+0x4c>
 8005112:	2330      	movs	r3, #48	; 0x30
 8005114:	3130      	adds	r1, #48	; 0x30
 8005116:	7083      	strb	r3, [r0, #2]
 8005118:	70c1      	strb	r1, [r0, #3]
 800511a:	1d03      	adds	r3, r0, #4
 800511c:	e7f1      	b.n	8005102 <__exponent+0x60>
	...

08005120 <_printf_float>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	b091      	sub	sp, #68	; 0x44
 8005126:	460c      	mov	r4, r1
 8005128:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800512c:	4616      	mov	r6, r2
 800512e:	461f      	mov	r7, r3
 8005130:	4605      	mov	r5, r0
 8005132:	f001 fa53 	bl	80065dc <_localeconv_r>
 8005136:	6803      	ldr	r3, [r0, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	9309      	str	r3, [sp, #36]	; 0x24
 800513c:	f7fb f808 	bl	8000150 <strlen>
 8005140:	2300      	movs	r3, #0
 8005142:	930e      	str	r3, [sp, #56]	; 0x38
 8005144:	f8d8 3000 	ldr.w	r3, [r8]
 8005148:	900a      	str	r0, [sp, #40]	; 0x28
 800514a:	3307      	adds	r3, #7
 800514c:	f023 0307 	bic.w	r3, r3, #7
 8005150:	f103 0208 	add.w	r2, r3, #8
 8005154:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005158:	f8d4 b000 	ldr.w	fp, [r4]
 800515c:	f8c8 2000 	str.w	r2, [r8]
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005168:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800516c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005170:	930b      	str	r3, [sp, #44]	; 0x2c
 8005172:	f04f 32ff 	mov.w	r2, #4294967295
 8005176:	4640      	mov	r0, r8
 8005178:	4b9c      	ldr	r3, [pc, #624]	; (80053ec <_printf_float+0x2cc>)
 800517a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800517c:	f7fb fc46 	bl	8000a0c <__aeabi_dcmpun>
 8005180:	bb70      	cbnz	r0, 80051e0 <_printf_float+0xc0>
 8005182:	f04f 32ff 	mov.w	r2, #4294967295
 8005186:	4640      	mov	r0, r8
 8005188:	4b98      	ldr	r3, [pc, #608]	; (80053ec <_printf_float+0x2cc>)
 800518a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800518c:	f7fb fc20 	bl	80009d0 <__aeabi_dcmple>
 8005190:	bb30      	cbnz	r0, 80051e0 <_printf_float+0xc0>
 8005192:	2200      	movs	r2, #0
 8005194:	2300      	movs	r3, #0
 8005196:	4640      	mov	r0, r8
 8005198:	4651      	mov	r1, sl
 800519a:	f7fb fc0f 	bl	80009bc <__aeabi_dcmplt>
 800519e:	b110      	cbz	r0, 80051a6 <_printf_float+0x86>
 80051a0:	232d      	movs	r3, #45	; 0x2d
 80051a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a6:	4b92      	ldr	r3, [pc, #584]	; (80053f0 <_printf_float+0x2d0>)
 80051a8:	4892      	ldr	r0, [pc, #584]	; (80053f4 <_printf_float+0x2d4>)
 80051aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80051ae:	bf94      	ite	ls
 80051b0:	4698      	movls	r8, r3
 80051b2:	4680      	movhi	r8, r0
 80051b4:	2303      	movs	r3, #3
 80051b6:	f04f 0a00 	mov.w	sl, #0
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	f02b 0304 	bic.w	r3, fp, #4
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	4633      	mov	r3, r6
 80051c4:	4621      	mov	r1, r4
 80051c6:	4628      	mov	r0, r5
 80051c8:	9700      	str	r7, [sp, #0]
 80051ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80051cc:	f000 f9d4 	bl	8005578 <_printf_common>
 80051d0:	3001      	adds	r0, #1
 80051d2:	f040 8090 	bne.w	80052f6 <_printf_float+0x1d6>
 80051d6:	f04f 30ff 	mov.w	r0, #4294967295
 80051da:	b011      	add	sp, #68	; 0x44
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	4642      	mov	r2, r8
 80051e2:	4653      	mov	r3, sl
 80051e4:	4640      	mov	r0, r8
 80051e6:	4651      	mov	r1, sl
 80051e8:	f7fb fc10 	bl	8000a0c <__aeabi_dcmpun>
 80051ec:	b148      	cbz	r0, 8005202 <_printf_float+0xe2>
 80051ee:	f1ba 0f00 	cmp.w	sl, #0
 80051f2:	bfb8      	it	lt
 80051f4:	232d      	movlt	r3, #45	; 0x2d
 80051f6:	4880      	ldr	r0, [pc, #512]	; (80053f8 <_printf_float+0x2d8>)
 80051f8:	bfb8      	it	lt
 80051fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051fe:	4b7f      	ldr	r3, [pc, #508]	; (80053fc <_printf_float+0x2dc>)
 8005200:	e7d3      	b.n	80051aa <_printf_float+0x8a>
 8005202:	6863      	ldr	r3, [r4, #4]
 8005204:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	d142      	bne.n	8005292 <_printf_float+0x172>
 800520c:	2306      	movs	r3, #6
 800520e:	6063      	str	r3, [r4, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	9206      	str	r2, [sp, #24]
 8005214:	aa0e      	add	r2, sp, #56	; 0x38
 8005216:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800521a:	aa0d      	add	r2, sp, #52	; 0x34
 800521c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005220:	9203      	str	r2, [sp, #12]
 8005222:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005226:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	4642      	mov	r2, r8
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	4628      	mov	r0, r5
 8005234:	4653      	mov	r3, sl
 8005236:	910b      	str	r1, [sp, #44]	; 0x2c
 8005238:	f7ff fed4 	bl	8004fe4 <__cvt>
 800523c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800523e:	4680      	mov	r8, r0
 8005240:	2947      	cmp	r1, #71	; 0x47
 8005242:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005244:	d108      	bne.n	8005258 <_printf_float+0x138>
 8005246:	1cc8      	adds	r0, r1, #3
 8005248:	db02      	blt.n	8005250 <_printf_float+0x130>
 800524a:	6863      	ldr	r3, [r4, #4]
 800524c:	4299      	cmp	r1, r3
 800524e:	dd40      	ble.n	80052d2 <_printf_float+0x1b2>
 8005250:	f1a9 0902 	sub.w	r9, r9, #2
 8005254:	fa5f f989 	uxtb.w	r9, r9
 8005258:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800525c:	d81f      	bhi.n	800529e <_printf_float+0x17e>
 800525e:	464a      	mov	r2, r9
 8005260:	3901      	subs	r1, #1
 8005262:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005266:	910d      	str	r1, [sp, #52]	; 0x34
 8005268:	f7ff ff1b 	bl	80050a2 <__exponent>
 800526c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800526e:	4682      	mov	sl, r0
 8005270:	1813      	adds	r3, r2, r0
 8005272:	2a01      	cmp	r2, #1
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	dc02      	bgt.n	800527e <_printf_float+0x15e>
 8005278:	6822      	ldr	r2, [r4, #0]
 800527a:	07d2      	lsls	r2, r2, #31
 800527c:	d501      	bpl.n	8005282 <_printf_float+0x162>
 800527e:	3301      	adds	r3, #1
 8005280:	6123      	str	r3, [r4, #16]
 8005282:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005286:	2b00      	cmp	r3, #0
 8005288:	d09b      	beq.n	80051c2 <_printf_float+0xa2>
 800528a:	232d      	movs	r3, #45	; 0x2d
 800528c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005290:	e797      	b.n	80051c2 <_printf_float+0xa2>
 8005292:	2947      	cmp	r1, #71	; 0x47
 8005294:	d1bc      	bne.n	8005210 <_printf_float+0xf0>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1ba      	bne.n	8005210 <_printf_float+0xf0>
 800529a:	2301      	movs	r3, #1
 800529c:	e7b7      	b.n	800520e <_printf_float+0xee>
 800529e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80052a2:	d118      	bne.n	80052d6 <_printf_float+0x1b6>
 80052a4:	2900      	cmp	r1, #0
 80052a6:	6863      	ldr	r3, [r4, #4]
 80052a8:	dd0b      	ble.n	80052c2 <_printf_float+0x1a2>
 80052aa:	6121      	str	r1, [r4, #16]
 80052ac:	b913      	cbnz	r3, 80052b4 <_printf_float+0x194>
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	07d0      	lsls	r0, r2, #31
 80052b2:	d502      	bpl.n	80052ba <_printf_float+0x19a>
 80052b4:	3301      	adds	r3, #1
 80052b6:	440b      	add	r3, r1
 80052b8:	6123      	str	r3, [r4, #16]
 80052ba:	f04f 0a00 	mov.w	sl, #0
 80052be:	65a1      	str	r1, [r4, #88]	; 0x58
 80052c0:	e7df      	b.n	8005282 <_printf_float+0x162>
 80052c2:	b913      	cbnz	r3, 80052ca <_printf_float+0x1aa>
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	07d2      	lsls	r2, r2, #31
 80052c8:	d501      	bpl.n	80052ce <_printf_float+0x1ae>
 80052ca:	3302      	adds	r3, #2
 80052cc:	e7f4      	b.n	80052b8 <_printf_float+0x198>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e7f2      	b.n	80052b8 <_printf_float+0x198>
 80052d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80052d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052d8:	4299      	cmp	r1, r3
 80052da:	db05      	blt.n	80052e8 <_printf_float+0x1c8>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	6121      	str	r1, [r4, #16]
 80052e0:	07d8      	lsls	r0, r3, #31
 80052e2:	d5ea      	bpl.n	80052ba <_printf_float+0x19a>
 80052e4:	1c4b      	adds	r3, r1, #1
 80052e6:	e7e7      	b.n	80052b8 <_printf_float+0x198>
 80052e8:	2900      	cmp	r1, #0
 80052ea:	bfcc      	ite	gt
 80052ec:	2201      	movgt	r2, #1
 80052ee:	f1c1 0202 	rsble	r2, r1, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	e7e0      	b.n	80052b8 <_printf_float+0x198>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	055a      	lsls	r2, r3, #21
 80052fa:	d407      	bmi.n	800530c <_printf_float+0x1ec>
 80052fc:	6923      	ldr	r3, [r4, #16]
 80052fe:	4642      	mov	r2, r8
 8005300:	4631      	mov	r1, r6
 8005302:	4628      	mov	r0, r5
 8005304:	47b8      	blx	r7
 8005306:	3001      	adds	r0, #1
 8005308:	d12b      	bne.n	8005362 <_printf_float+0x242>
 800530a:	e764      	b.n	80051d6 <_printf_float+0xb6>
 800530c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005310:	f240 80dd 	bls.w	80054ce <_printf_float+0x3ae>
 8005314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005318:	2200      	movs	r2, #0
 800531a:	2300      	movs	r3, #0
 800531c:	f7fb fb44 	bl	80009a8 <__aeabi_dcmpeq>
 8005320:	2800      	cmp	r0, #0
 8005322:	d033      	beq.n	800538c <_printf_float+0x26c>
 8005324:	2301      	movs	r3, #1
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	4a35      	ldr	r2, [pc, #212]	; (8005400 <_printf_float+0x2e0>)
 800532c:	47b8      	blx	r7
 800532e:	3001      	adds	r0, #1
 8005330:	f43f af51 	beq.w	80051d6 <_printf_float+0xb6>
 8005334:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005338:	429a      	cmp	r2, r3
 800533a:	db02      	blt.n	8005342 <_printf_float+0x222>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	07d8      	lsls	r0, r3, #31
 8005340:	d50f      	bpl.n	8005362 <_printf_float+0x242>
 8005342:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005346:	4631      	mov	r1, r6
 8005348:	4628      	mov	r0, r5
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	f43f af42 	beq.w	80051d6 <_printf_float+0xb6>
 8005352:	f04f 0800 	mov.w	r8, #0
 8005356:	f104 091a 	add.w	r9, r4, #26
 800535a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800535c:	3b01      	subs	r3, #1
 800535e:	4543      	cmp	r3, r8
 8005360:	dc09      	bgt.n	8005376 <_printf_float+0x256>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	079b      	lsls	r3, r3, #30
 8005366:	f100 8102 	bmi.w	800556e <_printf_float+0x44e>
 800536a:	68e0      	ldr	r0, [r4, #12]
 800536c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800536e:	4298      	cmp	r0, r3
 8005370:	bfb8      	it	lt
 8005372:	4618      	movlt	r0, r3
 8005374:	e731      	b.n	80051da <_printf_float+0xba>
 8005376:	2301      	movs	r3, #1
 8005378:	464a      	mov	r2, r9
 800537a:	4631      	mov	r1, r6
 800537c:	4628      	mov	r0, r5
 800537e:	47b8      	blx	r7
 8005380:	3001      	adds	r0, #1
 8005382:	f43f af28 	beq.w	80051d6 <_printf_float+0xb6>
 8005386:	f108 0801 	add.w	r8, r8, #1
 800538a:	e7e6      	b.n	800535a <_printf_float+0x23a>
 800538c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800538e:	2b00      	cmp	r3, #0
 8005390:	dc38      	bgt.n	8005404 <_printf_float+0x2e4>
 8005392:	2301      	movs	r3, #1
 8005394:	4631      	mov	r1, r6
 8005396:	4628      	mov	r0, r5
 8005398:	4a19      	ldr	r2, [pc, #100]	; (8005400 <_printf_float+0x2e0>)
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	f43f af1a 	beq.w	80051d6 <_printf_float+0xb6>
 80053a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053a6:	4313      	orrs	r3, r2
 80053a8:	d102      	bne.n	80053b0 <_printf_float+0x290>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	07d9      	lsls	r1, r3, #31
 80053ae:	d5d8      	bpl.n	8005362 <_printf_float+0x242>
 80053b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053b4:	4631      	mov	r1, r6
 80053b6:	4628      	mov	r0, r5
 80053b8:	47b8      	blx	r7
 80053ba:	3001      	adds	r0, #1
 80053bc:	f43f af0b 	beq.w	80051d6 <_printf_float+0xb6>
 80053c0:	f04f 0900 	mov.w	r9, #0
 80053c4:	f104 0a1a 	add.w	sl, r4, #26
 80053c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ca:	425b      	negs	r3, r3
 80053cc:	454b      	cmp	r3, r9
 80053ce:	dc01      	bgt.n	80053d4 <_printf_float+0x2b4>
 80053d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d2:	e794      	b.n	80052fe <_printf_float+0x1de>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4652      	mov	r2, sl
 80053d8:	4631      	mov	r1, r6
 80053da:	4628      	mov	r0, r5
 80053dc:	47b8      	blx	r7
 80053de:	3001      	adds	r0, #1
 80053e0:	f43f aef9 	beq.w	80051d6 <_printf_float+0xb6>
 80053e4:	f109 0901 	add.w	r9, r9, #1
 80053e8:	e7ee      	b.n	80053c8 <_printf_float+0x2a8>
 80053ea:	bf00      	nop
 80053ec:	7fefffff 	.word	0x7fefffff
 80053f0:	08007e8c 	.word	0x08007e8c
 80053f4:	08007e90 	.word	0x08007e90
 80053f8:	08007e98 	.word	0x08007e98
 80053fc:	08007e94 	.word	0x08007e94
 8005400:	08007e9c 	.word	0x08007e9c
 8005404:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005406:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005408:	429a      	cmp	r2, r3
 800540a:	bfa8      	it	ge
 800540c:	461a      	movge	r2, r3
 800540e:	2a00      	cmp	r2, #0
 8005410:	4691      	mov	r9, r2
 8005412:	dc37      	bgt.n	8005484 <_printf_float+0x364>
 8005414:	f04f 0b00 	mov.w	fp, #0
 8005418:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800541c:	f104 021a 	add.w	r2, r4, #26
 8005420:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005424:	ebaa 0309 	sub.w	r3, sl, r9
 8005428:	455b      	cmp	r3, fp
 800542a:	dc33      	bgt.n	8005494 <_printf_float+0x374>
 800542c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005430:	429a      	cmp	r2, r3
 8005432:	db3b      	blt.n	80054ac <_printf_float+0x38c>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	07da      	lsls	r2, r3, #31
 8005438:	d438      	bmi.n	80054ac <_printf_float+0x38c>
 800543a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800543c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800543e:	eba3 020a 	sub.w	r2, r3, sl
 8005442:	eba3 0901 	sub.w	r9, r3, r1
 8005446:	4591      	cmp	r9, r2
 8005448:	bfa8      	it	ge
 800544a:	4691      	movge	r9, r2
 800544c:	f1b9 0f00 	cmp.w	r9, #0
 8005450:	dc34      	bgt.n	80054bc <_printf_float+0x39c>
 8005452:	f04f 0800 	mov.w	r8, #0
 8005456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800545a:	f104 0a1a 	add.w	sl, r4, #26
 800545e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	eba3 0309 	sub.w	r3, r3, r9
 8005468:	4543      	cmp	r3, r8
 800546a:	f77f af7a 	ble.w	8005362 <_printf_float+0x242>
 800546e:	2301      	movs	r3, #1
 8005470:	4652      	mov	r2, sl
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	f43f aeac 	beq.w	80051d6 <_printf_float+0xb6>
 800547e:	f108 0801 	add.w	r8, r8, #1
 8005482:	e7ec      	b.n	800545e <_printf_float+0x33e>
 8005484:	4613      	mov	r3, r2
 8005486:	4631      	mov	r1, r6
 8005488:	4642      	mov	r2, r8
 800548a:	4628      	mov	r0, r5
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	d1c0      	bne.n	8005414 <_printf_float+0x2f4>
 8005492:	e6a0      	b.n	80051d6 <_printf_float+0xb6>
 8005494:	2301      	movs	r3, #1
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	920b      	str	r2, [sp, #44]	; 0x2c
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f43f ae99 	beq.w	80051d6 <_printf_float+0xb6>
 80054a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054a6:	f10b 0b01 	add.w	fp, fp, #1
 80054aa:	e7b9      	b.n	8005420 <_printf_float+0x300>
 80054ac:	4631      	mov	r1, r6
 80054ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b2:	4628      	mov	r0, r5
 80054b4:	47b8      	blx	r7
 80054b6:	3001      	adds	r0, #1
 80054b8:	d1bf      	bne.n	800543a <_printf_float+0x31a>
 80054ba:	e68c      	b.n	80051d6 <_printf_float+0xb6>
 80054bc:	464b      	mov	r3, r9
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	eb08 020a 	add.w	r2, r8, sl
 80054c6:	47b8      	blx	r7
 80054c8:	3001      	adds	r0, #1
 80054ca:	d1c2      	bne.n	8005452 <_printf_float+0x332>
 80054cc:	e683      	b.n	80051d6 <_printf_float+0xb6>
 80054ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054d0:	2a01      	cmp	r2, #1
 80054d2:	dc01      	bgt.n	80054d8 <_printf_float+0x3b8>
 80054d4:	07db      	lsls	r3, r3, #31
 80054d6:	d537      	bpl.n	8005548 <_printf_float+0x428>
 80054d8:	2301      	movs	r3, #1
 80054da:	4642      	mov	r2, r8
 80054dc:	4631      	mov	r1, r6
 80054de:	4628      	mov	r0, r5
 80054e0:	47b8      	blx	r7
 80054e2:	3001      	adds	r0, #1
 80054e4:	f43f ae77 	beq.w	80051d6 <_printf_float+0xb6>
 80054e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f ae6f 	beq.w	80051d6 <_printf_float+0xb6>
 80054f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054fc:	2200      	movs	r2, #0
 80054fe:	2300      	movs	r3, #0
 8005500:	f7fb fa52 	bl	80009a8 <__aeabi_dcmpeq>
 8005504:	b9d8      	cbnz	r0, 800553e <_printf_float+0x41e>
 8005506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005508:	f108 0201 	add.w	r2, r8, #1
 800550c:	3b01      	subs	r3, #1
 800550e:	4631      	mov	r1, r6
 8005510:	4628      	mov	r0, r5
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	d10e      	bne.n	8005536 <_printf_float+0x416>
 8005518:	e65d      	b.n	80051d6 <_printf_float+0xb6>
 800551a:	2301      	movs	r3, #1
 800551c:	464a      	mov	r2, r9
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	f43f ae56 	beq.w	80051d6 <_printf_float+0xb6>
 800552a:	f108 0801 	add.w	r8, r8, #1
 800552e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005530:	3b01      	subs	r3, #1
 8005532:	4543      	cmp	r3, r8
 8005534:	dcf1      	bgt.n	800551a <_printf_float+0x3fa>
 8005536:	4653      	mov	r3, sl
 8005538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800553c:	e6e0      	b.n	8005300 <_printf_float+0x1e0>
 800553e:	f04f 0800 	mov.w	r8, #0
 8005542:	f104 091a 	add.w	r9, r4, #26
 8005546:	e7f2      	b.n	800552e <_printf_float+0x40e>
 8005548:	2301      	movs	r3, #1
 800554a:	4642      	mov	r2, r8
 800554c:	e7df      	b.n	800550e <_printf_float+0x3ee>
 800554e:	2301      	movs	r3, #1
 8005550:	464a      	mov	r2, r9
 8005552:	4631      	mov	r1, r6
 8005554:	4628      	mov	r0, r5
 8005556:	47b8      	blx	r7
 8005558:	3001      	adds	r0, #1
 800555a:	f43f ae3c 	beq.w	80051d6 <_printf_float+0xb6>
 800555e:	f108 0801 	add.w	r8, r8, #1
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005566:	1a5b      	subs	r3, r3, r1
 8005568:	4543      	cmp	r3, r8
 800556a:	dcf0      	bgt.n	800554e <_printf_float+0x42e>
 800556c:	e6fd      	b.n	800536a <_printf_float+0x24a>
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	f104 0919 	add.w	r9, r4, #25
 8005576:	e7f4      	b.n	8005562 <_printf_float+0x442>

08005578 <_printf_common>:
 8005578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800557c:	4616      	mov	r6, r2
 800557e:	4699      	mov	r9, r3
 8005580:	688a      	ldr	r2, [r1, #8]
 8005582:	690b      	ldr	r3, [r1, #16]
 8005584:	4607      	mov	r7, r0
 8005586:	4293      	cmp	r3, r2
 8005588:	bfb8      	it	lt
 800558a:	4613      	movlt	r3, r2
 800558c:	6033      	str	r3, [r6, #0]
 800558e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005592:	460c      	mov	r4, r1
 8005594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005598:	b10a      	cbz	r2, 800559e <_printf_common+0x26>
 800559a:	3301      	adds	r3, #1
 800559c:	6033      	str	r3, [r6, #0]
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	0699      	lsls	r1, r3, #26
 80055a2:	bf42      	ittt	mi
 80055a4:	6833      	ldrmi	r3, [r6, #0]
 80055a6:	3302      	addmi	r3, #2
 80055a8:	6033      	strmi	r3, [r6, #0]
 80055aa:	6825      	ldr	r5, [r4, #0]
 80055ac:	f015 0506 	ands.w	r5, r5, #6
 80055b0:	d106      	bne.n	80055c0 <_printf_common+0x48>
 80055b2:	f104 0a19 	add.w	sl, r4, #25
 80055b6:	68e3      	ldr	r3, [r4, #12]
 80055b8:	6832      	ldr	r2, [r6, #0]
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	42ab      	cmp	r3, r5
 80055be:	dc28      	bgt.n	8005612 <_printf_common+0x9a>
 80055c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055c4:	1e13      	subs	r3, r2, #0
 80055c6:	6822      	ldr	r2, [r4, #0]
 80055c8:	bf18      	it	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	0692      	lsls	r2, r2, #26
 80055ce:	d42d      	bmi.n	800562c <_printf_common+0xb4>
 80055d0:	4649      	mov	r1, r9
 80055d2:	4638      	mov	r0, r7
 80055d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055d8:	47c0      	blx	r8
 80055da:	3001      	adds	r0, #1
 80055dc:	d020      	beq.n	8005620 <_printf_common+0xa8>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	68e5      	ldr	r5, [r4, #12]
 80055e2:	f003 0306 	and.w	r3, r3, #6
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	bf18      	it	ne
 80055ea:	2500      	movne	r5, #0
 80055ec:	6832      	ldr	r2, [r6, #0]
 80055ee:	f04f 0600 	mov.w	r6, #0
 80055f2:	68a3      	ldr	r3, [r4, #8]
 80055f4:	bf08      	it	eq
 80055f6:	1aad      	subeq	r5, r5, r2
 80055f8:	6922      	ldr	r2, [r4, #16]
 80055fa:	bf08      	it	eq
 80055fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005600:	4293      	cmp	r3, r2
 8005602:	bfc4      	itt	gt
 8005604:	1a9b      	subgt	r3, r3, r2
 8005606:	18ed      	addgt	r5, r5, r3
 8005608:	341a      	adds	r4, #26
 800560a:	42b5      	cmp	r5, r6
 800560c:	d11a      	bne.n	8005644 <_printf_common+0xcc>
 800560e:	2000      	movs	r0, #0
 8005610:	e008      	b.n	8005624 <_printf_common+0xac>
 8005612:	2301      	movs	r3, #1
 8005614:	4652      	mov	r2, sl
 8005616:	4649      	mov	r1, r9
 8005618:	4638      	mov	r0, r7
 800561a:	47c0      	blx	r8
 800561c:	3001      	adds	r0, #1
 800561e:	d103      	bne.n	8005628 <_printf_common+0xb0>
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005628:	3501      	adds	r5, #1
 800562a:	e7c4      	b.n	80055b6 <_printf_common+0x3e>
 800562c:	2030      	movs	r0, #48	; 0x30
 800562e:	18e1      	adds	r1, r4, r3
 8005630:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800563a:	4422      	add	r2, r4
 800563c:	3302      	adds	r3, #2
 800563e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005642:	e7c5      	b.n	80055d0 <_printf_common+0x58>
 8005644:	2301      	movs	r3, #1
 8005646:	4622      	mov	r2, r4
 8005648:	4649      	mov	r1, r9
 800564a:	4638      	mov	r0, r7
 800564c:	47c0      	blx	r8
 800564e:	3001      	adds	r0, #1
 8005650:	d0e6      	beq.n	8005620 <_printf_common+0xa8>
 8005652:	3601      	adds	r6, #1
 8005654:	e7d9      	b.n	800560a <_printf_common+0x92>
	...

08005658 <_printf_i>:
 8005658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800565c:	7e0f      	ldrb	r7, [r1, #24]
 800565e:	4691      	mov	r9, r2
 8005660:	2f78      	cmp	r7, #120	; 0x78
 8005662:	4680      	mov	r8, r0
 8005664:	460c      	mov	r4, r1
 8005666:	469a      	mov	sl, r3
 8005668:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800566a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800566e:	d807      	bhi.n	8005680 <_printf_i+0x28>
 8005670:	2f62      	cmp	r7, #98	; 0x62
 8005672:	d80a      	bhi.n	800568a <_printf_i+0x32>
 8005674:	2f00      	cmp	r7, #0
 8005676:	f000 80d9 	beq.w	800582c <_printf_i+0x1d4>
 800567a:	2f58      	cmp	r7, #88	; 0x58
 800567c:	f000 80a4 	beq.w	80057c8 <_printf_i+0x170>
 8005680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005688:	e03a      	b.n	8005700 <_printf_i+0xa8>
 800568a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800568e:	2b15      	cmp	r3, #21
 8005690:	d8f6      	bhi.n	8005680 <_printf_i+0x28>
 8005692:	a101      	add	r1, pc, #4	; (adr r1, 8005698 <_printf_i+0x40>)
 8005694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005698:	080056f1 	.word	0x080056f1
 800569c:	08005705 	.word	0x08005705
 80056a0:	08005681 	.word	0x08005681
 80056a4:	08005681 	.word	0x08005681
 80056a8:	08005681 	.word	0x08005681
 80056ac:	08005681 	.word	0x08005681
 80056b0:	08005705 	.word	0x08005705
 80056b4:	08005681 	.word	0x08005681
 80056b8:	08005681 	.word	0x08005681
 80056bc:	08005681 	.word	0x08005681
 80056c0:	08005681 	.word	0x08005681
 80056c4:	08005813 	.word	0x08005813
 80056c8:	08005735 	.word	0x08005735
 80056cc:	080057f5 	.word	0x080057f5
 80056d0:	08005681 	.word	0x08005681
 80056d4:	08005681 	.word	0x08005681
 80056d8:	08005835 	.word	0x08005835
 80056dc:	08005681 	.word	0x08005681
 80056e0:	08005735 	.word	0x08005735
 80056e4:	08005681 	.word	0x08005681
 80056e8:	08005681 	.word	0x08005681
 80056ec:	080057fd 	.word	0x080057fd
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	1d1a      	adds	r2, r3, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	602a      	str	r2, [r5, #0]
 80056f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005700:	2301      	movs	r3, #1
 8005702:	e0a4      	b.n	800584e <_printf_i+0x1f6>
 8005704:	6820      	ldr	r0, [r4, #0]
 8005706:	6829      	ldr	r1, [r5, #0]
 8005708:	0606      	lsls	r6, r0, #24
 800570a:	f101 0304 	add.w	r3, r1, #4
 800570e:	d50a      	bpl.n	8005726 <_printf_i+0xce>
 8005710:	680e      	ldr	r6, [r1, #0]
 8005712:	602b      	str	r3, [r5, #0]
 8005714:	2e00      	cmp	r6, #0
 8005716:	da03      	bge.n	8005720 <_printf_i+0xc8>
 8005718:	232d      	movs	r3, #45	; 0x2d
 800571a:	4276      	negs	r6, r6
 800571c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005720:	230a      	movs	r3, #10
 8005722:	485e      	ldr	r0, [pc, #376]	; (800589c <_printf_i+0x244>)
 8005724:	e019      	b.n	800575a <_printf_i+0x102>
 8005726:	680e      	ldr	r6, [r1, #0]
 8005728:	f010 0f40 	tst.w	r0, #64	; 0x40
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	bf18      	it	ne
 8005730:	b236      	sxthne	r6, r6
 8005732:	e7ef      	b.n	8005714 <_printf_i+0xbc>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	6820      	ldr	r0, [r4, #0]
 8005738:	1d19      	adds	r1, r3, #4
 800573a:	6029      	str	r1, [r5, #0]
 800573c:	0601      	lsls	r1, r0, #24
 800573e:	d501      	bpl.n	8005744 <_printf_i+0xec>
 8005740:	681e      	ldr	r6, [r3, #0]
 8005742:	e002      	b.n	800574a <_printf_i+0xf2>
 8005744:	0646      	lsls	r6, r0, #25
 8005746:	d5fb      	bpl.n	8005740 <_printf_i+0xe8>
 8005748:	881e      	ldrh	r6, [r3, #0]
 800574a:	2f6f      	cmp	r7, #111	; 0x6f
 800574c:	bf0c      	ite	eq
 800574e:	2308      	moveq	r3, #8
 8005750:	230a      	movne	r3, #10
 8005752:	4852      	ldr	r0, [pc, #328]	; (800589c <_printf_i+0x244>)
 8005754:	2100      	movs	r1, #0
 8005756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800575a:	6865      	ldr	r5, [r4, #4]
 800575c:	2d00      	cmp	r5, #0
 800575e:	bfa8      	it	ge
 8005760:	6821      	ldrge	r1, [r4, #0]
 8005762:	60a5      	str	r5, [r4, #8]
 8005764:	bfa4      	itt	ge
 8005766:	f021 0104 	bicge.w	r1, r1, #4
 800576a:	6021      	strge	r1, [r4, #0]
 800576c:	b90e      	cbnz	r6, 8005772 <_printf_i+0x11a>
 800576e:	2d00      	cmp	r5, #0
 8005770:	d04d      	beq.n	800580e <_printf_i+0x1b6>
 8005772:	4615      	mov	r5, r2
 8005774:	fbb6 f1f3 	udiv	r1, r6, r3
 8005778:	fb03 6711 	mls	r7, r3, r1, r6
 800577c:	5dc7      	ldrb	r7, [r0, r7]
 800577e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005782:	4637      	mov	r7, r6
 8005784:	42bb      	cmp	r3, r7
 8005786:	460e      	mov	r6, r1
 8005788:	d9f4      	bls.n	8005774 <_printf_i+0x11c>
 800578a:	2b08      	cmp	r3, #8
 800578c:	d10b      	bne.n	80057a6 <_printf_i+0x14e>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	07de      	lsls	r6, r3, #31
 8005792:	d508      	bpl.n	80057a6 <_printf_i+0x14e>
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	6861      	ldr	r1, [r4, #4]
 8005798:	4299      	cmp	r1, r3
 800579a:	bfde      	ittt	le
 800579c:	2330      	movle	r3, #48	; 0x30
 800579e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057a6:	1b52      	subs	r2, r2, r5
 80057a8:	6122      	str	r2, [r4, #16]
 80057aa:	464b      	mov	r3, r9
 80057ac:	4621      	mov	r1, r4
 80057ae:	4640      	mov	r0, r8
 80057b0:	f8cd a000 	str.w	sl, [sp]
 80057b4:	aa03      	add	r2, sp, #12
 80057b6:	f7ff fedf 	bl	8005578 <_printf_common>
 80057ba:	3001      	adds	r0, #1
 80057bc:	d14c      	bne.n	8005858 <_printf_i+0x200>
 80057be:	f04f 30ff 	mov.w	r0, #4294967295
 80057c2:	b004      	add	sp, #16
 80057c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c8:	4834      	ldr	r0, [pc, #208]	; (800589c <_printf_i+0x244>)
 80057ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057ce:	6829      	ldr	r1, [r5, #0]
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80057d6:	6029      	str	r1, [r5, #0]
 80057d8:	061d      	lsls	r5, r3, #24
 80057da:	d514      	bpl.n	8005806 <_printf_i+0x1ae>
 80057dc:	07df      	lsls	r7, r3, #31
 80057de:	bf44      	itt	mi
 80057e0:	f043 0320 	orrmi.w	r3, r3, #32
 80057e4:	6023      	strmi	r3, [r4, #0]
 80057e6:	b91e      	cbnz	r6, 80057f0 <_printf_i+0x198>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	f023 0320 	bic.w	r3, r3, #32
 80057ee:	6023      	str	r3, [r4, #0]
 80057f0:	2310      	movs	r3, #16
 80057f2:	e7af      	b.n	8005754 <_printf_i+0xfc>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	f043 0320 	orr.w	r3, r3, #32
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	2378      	movs	r3, #120	; 0x78
 80057fe:	4828      	ldr	r0, [pc, #160]	; (80058a0 <_printf_i+0x248>)
 8005800:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005804:	e7e3      	b.n	80057ce <_printf_i+0x176>
 8005806:	0659      	lsls	r1, r3, #25
 8005808:	bf48      	it	mi
 800580a:	b2b6      	uxthmi	r6, r6
 800580c:	e7e6      	b.n	80057dc <_printf_i+0x184>
 800580e:	4615      	mov	r5, r2
 8005810:	e7bb      	b.n	800578a <_printf_i+0x132>
 8005812:	682b      	ldr	r3, [r5, #0]
 8005814:	6826      	ldr	r6, [r4, #0]
 8005816:	1d18      	adds	r0, r3, #4
 8005818:	6961      	ldr	r1, [r4, #20]
 800581a:	6028      	str	r0, [r5, #0]
 800581c:	0635      	lsls	r5, r6, #24
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	d501      	bpl.n	8005826 <_printf_i+0x1ce>
 8005822:	6019      	str	r1, [r3, #0]
 8005824:	e002      	b.n	800582c <_printf_i+0x1d4>
 8005826:	0670      	lsls	r0, r6, #25
 8005828:	d5fb      	bpl.n	8005822 <_printf_i+0x1ca>
 800582a:	8019      	strh	r1, [r3, #0]
 800582c:	2300      	movs	r3, #0
 800582e:	4615      	mov	r5, r2
 8005830:	6123      	str	r3, [r4, #16]
 8005832:	e7ba      	b.n	80057aa <_printf_i+0x152>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	2100      	movs	r1, #0
 8005838:	1d1a      	adds	r2, r3, #4
 800583a:	602a      	str	r2, [r5, #0]
 800583c:	681d      	ldr	r5, [r3, #0]
 800583e:	6862      	ldr	r2, [r4, #4]
 8005840:	4628      	mov	r0, r5
 8005842:	f000 fed7 	bl	80065f4 <memchr>
 8005846:	b108      	cbz	r0, 800584c <_printf_i+0x1f4>
 8005848:	1b40      	subs	r0, r0, r5
 800584a:	6060      	str	r0, [r4, #4]
 800584c:	6863      	ldr	r3, [r4, #4]
 800584e:	6123      	str	r3, [r4, #16]
 8005850:	2300      	movs	r3, #0
 8005852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005856:	e7a8      	b.n	80057aa <_printf_i+0x152>
 8005858:	462a      	mov	r2, r5
 800585a:	4649      	mov	r1, r9
 800585c:	4640      	mov	r0, r8
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	47d0      	blx	sl
 8005862:	3001      	adds	r0, #1
 8005864:	d0ab      	beq.n	80057be <_printf_i+0x166>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	079b      	lsls	r3, r3, #30
 800586a:	d413      	bmi.n	8005894 <_printf_i+0x23c>
 800586c:	68e0      	ldr	r0, [r4, #12]
 800586e:	9b03      	ldr	r3, [sp, #12]
 8005870:	4298      	cmp	r0, r3
 8005872:	bfb8      	it	lt
 8005874:	4618      	movlt	r0, r3
 8005876:	e7a4      	b.n	80057c2 <_printf_i+0x16a>
 8005878:	2301      	movs	r3, #1
 800587a:	4632      	mov	r2, r6
 800587c:	4649      	mov	r1, r9
 800587e:	4640      	mov	r0, r8
 8005880:	47d0      	blx	sl
 8005882:	3001      	adds	r0, #1
 8005884:	d09b      	beq.n	80057be <_printf_i+0x166>
 8005886:	3501      	adds	r5, #1
 8005888:	68e3      	ldr	r3, [r4, #12]
 800588a:	9903      	ldr	r1, [sp, #12]
 800588c:	1a5b      	subs	r3, r3, r1
 800588e:	42ab      	cmp	r3, r5
 8005890:	dcf2      	bgt.n	8005878 <_printf_i+0x220>
 8005892:	e7eb      	b.n	800586c <_printf_i+0x214>
 8005894:	2500      	movs	r5, #0
 8005896:	f104 0619 	add.w	r6, r4, #25
 800589a:	e7f5      	b.n	8005888 <_printf_i+0x230>
 800589c:	08007e9e 	.word	0x08007e9e
 80058a0:	08007eaf 	.word	0x08007eaf

080058a4 <siprintf>:
 80058a4:	b40e      	push	{r1, r2, r3}
 80058a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058aa:	b500      	push	{lr}
 80058ac:	b09c      	sub	sp, #112	; 0x70
 80058ae:	ab1d      	add	r3, sp, #116	; 0x74
 80058b0:	9002      	str	r0, [sp, #8]
 80058b2:	9006      	str	r0, [sp, #24]
 80058b4:	9107      	str	r1, [sp, #28]
 80058b6:	9104      	str	r1, [sp, #16]
 80058b8:	4808      	ldr	r0, [pc, #32]	; (80058dc <siprintf+0x38>)
 80058ba:	4909      	ldr	r1, [pc, #36]	; (80058e0 <siprintf+0x3c>)
 80058bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c0:	9105      	str	r1, [sp, #20]
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	a902      	add	r1, sp, #8
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	f001 fb7e 	bl	8006fc8 <_svfiprintf_r>
 80058cc:	2200      	movs	r2, #0
 80058ce:	9b02      	ldr	r3, [sp, #8]
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	b01c      	add	sp, #112	; 0x70
 80058d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d8:	b003      	add	sp, #12
 80058da:	4770      	bx	lr
 80058dc:	2000000c 	.word	0x2000000c
 80058e0:	ffff0208 	.word	0xffff0208

080058e4 <quorem>:
 80058e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	6903      	ldr	r3, [r0, #16]
 80058ea:	690c      	ldr	r4, [r1, #16]
 80058ec:	4607      	mov	r7, r0
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	f2c0 8082 	blt.w	80059f8 <quorem+0x114>
 80058f4:	3c01      	subs	r4, #1
 80058f6:	f100 0514 	add.w	r5, r0, #20
 80058fa:	f101 0814 	add.w	r8, r1, #20
 80058fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005908:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800590c:	3301      	adds	r3, #1
 800590e:	429a      	cmp	r2, r3
 8005910:	fbb2 f6f3 	udiv	r6, r2, r3
 8005914:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005918:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800591c:	d331      	bcc.n	8005982 <quorem+0x9e>
 800591e:	f04f 0e00 	mov.w	lr, #0
 8005922:	4640      	mov	r0, r8
 8005924:	46ac      	mov	ip, r5
 8005926:	46f2      	mov	sl, lr
 8005928:	f850 2b04 	ldr.w	r2, [r0], #4
 800592c:	b293      	uxth	r3, r2
 800592e:	fb06 e303 	mla	r3, r6, r3, lr
 8005932:	0c12      	lsrs	r2, r2, #16
 8005934:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005938:	b29b      	uxth	r3, r3
 800593a:	fb06 e202 	mla	r2, r6, r2, lr
 800593e:	ebaa 0303 	sub.w	r3, sl, r3
 8005942:	f8dc a000 	ldr.w	sl, [ip]
 8005946:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800594a:	fa1f fa8a 	uxth.w	sl, sl
 800594e:	4453      	add	r3, sl
 8005950:	f8dc a000 	ldr.w	sl, [ip]
 8005954:	b292      	uxth	r2, r2
 8005956:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800595a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800595e:	b29b      	uxth	r3, r3
 8005960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005964:	4581      	cmp	r9, r0
 8005966:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800596a:	f84c 3b04 	str.w	r3, [ip], #4
 800596e:	d2db      	bcs.n	8005928 <quorem+0x44>
 8005970:	f855 300b 	ldr.w	r3, [r5, fp]
 8005974:	b92b      	cbnz	r3, 8005982 <quorem+0x9e>
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	3b04      	subs	r3, #4
 800597a:	429d      	cmp	r5, r3
 800597c:	461a      	mov	r2, r3
 800597e:	d32f      	bcc.n	80059e0 <quorem+0xfc>
 8005980:	613c      	str	r4, [r7, #16]
 8005982:	4638      	mov	r0, r7
 8005984:	f001 f8d0 	bl	8006b28 <__mcmp>
 8005988:	2800      	cmp	r0, #0
 800598a:	db25      	blt.n	80059d8 <quorem+0xf4>
 800598c:	4628      	mov	r0, r5
 800598e:	f04f 0c00 	mov.w	ip, #0
 8005992:	3601      	adds	r6, #1
 8005994:	f858 1b04 	ldr.w	r1, [r8], #4
 8005998:	f8d0 e000 	ldr.w	lr, [r0]
 800599c:	b28b      	uxth	r3, r1
 800599e:	ebac 0303 	sub.w	r3, ip, r3
 80059a2:	fa1f f28e 	uxth.w	r2, lr
 80059a6:	4413      	add	r3, r2
 80059a8:	0c0a      	lsrs	r2, r1, #16
 80059aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059b8:	45c1      	cmp	r9, r8
 80059ba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059be:	f840 3b04 	str.w	r3, [r0], #4
 80059c2:	d2e7      	bcs.n	8005994 <quorem+0xb0>
 80059c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059cc:	b922      	cbnz	r2, 80059d8 <quorem+0xf4>
 80059ce:	3b04      	subs	r3, #4
 80059d0:	429d      	cmp	r5, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	d30a      	bcc.n	80059ec <quorem+0x108>
 80059d6:	613c      	str	r4, [r7, #16]
 80059d8:	4630      	mov	r0, r6
 80059da:	b003      	add	sp, #12
 80059dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	3b04      	subs	r3, #4
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	d1cb      	bne.n	8005980 <quorem+0x9c>
 80059e8:	3c01      	subs	r4, #1
 80059ea:	e7c6      	b.n	800597a <quorem+0x96>
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	3b04      	subs	r3, #4
 80059f0:	2a00      	cmp	r2, #0
 80059f2:	d1f0      	bne.n	80059d6 <quorem+0xf2>
 80059f4:	3c01      	subs	r4, #1
 80059f6:	e7eb      	b.n	80059d0 <quorem+0xec>
 80059f8:	2000      	movs	r0, #0
 80059fa:	e7ee      	b.n	80059da <quorem+0xf6>
 80059fc:	0000      	movs	r0, r0
	...

08005a00 <_dtoa_r>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	4616      	mov	r6, r2
 8005a06:	461f      	mov	r7, r3
 8005a08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005a0a:	b099      	sub	sp, #100	; 0x64
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005a12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005a16:	b974      	cbnz	r4, 8005a36 <_dtoa_r+0x36>
 8005a18:	2010      	movs	r0, #16
 8005a1a:	f000 fde3 	bl	80065e4 <malloc>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	6268      	str	r0, [r5, #36]	; 0x24
 8005a22:	b920      	cbnz	r0, 8005a2e <_dtoa_r+0x2e>
 8005a24:	21ea      	movs	r1, #234	; 0xea
 8005a26:	4ba8      	ldr	r3, [pc, #672]	; (8005cc8 <_dtoa_r+0x2c8>)
 8005a28:	48a8      	ldr	r0, [pc, #672]	; (8005ccc <_dtoa_r+0x2cc>)
 8005a2a:	f001 fbdd 	bl	80071e8 <__assert_func>
 8005a2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a32:	6004      	str	r4, [r0, #0]
 8005a34:	60c4      	str	r4, [r0, #12]
 8005a36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	b151      	cbz	r1, 8005a52 <_dtoa_r+0x52>
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4093      	lsls	r3, r2
 8005a42:	604a      	str	r2, [r1, #4]
 8005a44:	608b      	str	r3, [r1, #8]
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 fe30 	bl	80066ac <_Bfree>
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	1e3b      	subs	r3, r7, #0
 8005a54:	bfaf      	iteee	ge
 8005a56:	2300      	movge	r3, #0
 8005a58:	2201      	movlt	r2, #1
 8005a5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a5e:	9305      	strlt	r3, [sp, #20]
 8005a60:	bfa8      	it	ge
 8005a62:	f8c8 3000 	strge.w	r3, [r8]
 8005a66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005a6a:	4b99      	ldr	r3, [pc, #612]	; (8005cd0 <_dtoa_r+0x2d0>)
 8005a6c:	bfb8      	it	lt
 8005a6e:	f8c8 2000 	strlt.w	r2, [r8]
 8005a72:	ea33 0309 	bics.w	r3, r3, r9
 8005a76:	d119      	bne.n	8005aac <_dtoa_r+0xac>
 8005a78:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a84:	4333      	orrs	r3, r6
 8005a86:	f000 857f 	beq.w	8006588 <_dtoa_r+0xb88>
 8005a8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a8c:	b953      	cbnz	r3, 8005aa4 <_dtoa_r+0xa4>
 8005a8e:	4b91      	ldr	r3, [pc, #580]	; (8005cd4 <_dtoa_r+0x2d4>)
 8005a90:	e022      	b.n	8005ad8 <_dtoa_r+0xd8>
 8005a92:	4b91      	ldr	r3, [pc, #580]	; (8005cd8 <_dtoa_r+0x2d8>)
 8005a94:	9303      	str	r3, [sp, #12]
 8005a96:	3308      	adds	r3, #8
 8005a98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	9803      	ldr	r0, [sp, #12]
 8005a9e:	b019      	add	sp, #100	; 0x64
 8005aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa4:	4b8b      	ldr	r3, [pc, #556]	; (8005cd4 <_dtoa_r+0x2d4>)
 8005aa6:	9303      	str	r3, [sp, #12]
 8005aa8:	3303      	adds	r3, #3
 8005aaa:	e7f5      	b.n	8005a98 <_dtoa_r+0x98>
 8005aac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005ab0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005ab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2300      	movs	r3, #0
 8005abc:	f7fa ff74 	bl	80009a8 <__aeabi_dcmpeq>
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	b158      	cbz	r0, 8005adc <_dtoa_r+0xdc>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8558 	beq.w	8006582 <_dtoa_r+0xb82>
 8005ad2:	4882      	ldr	r0, [pc, #520]	; (8005cdc <_dtoa_r+0x2dc>)
 8005ad4:	6018      	str	r0, [r3, #0]
 8005ad6:	1e43      	subs	r3, r0, #1
 8005ad8:	9303      	str	r3, [sp, #12]
 8005ada:	e7df      	b.n	8005a9c <_dtoa_r+0x9c>
 8005adc:	ab16      	add	r3, sp, #88	; 0x58
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	ab17      	add	r3, sp, #92	; 0x5c
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005aea:	f001 f8c5 	bl	8006c78 <__d2b>
 8005aee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005af2:	4683      	mov	fp, r0
 8005af4:	2c00      	cmp	r4, #0
 8005af6:	d07f      	beq.n	8005bf8 <_dtoa_r+0x1f8>
 8005af8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005afe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005b02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b06:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005b0a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005b0e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005b12:	2200      	movs	r2, #0
 8005b14:	4b72      	ldr	r3, [pc, #456]	; (8005ce0 <_dtoa_r+0x2e0>)
 8005b16:	f7fa fb27 	bl	8000168 <__aeabi_dsub>
 8005b1a:	a365      	add	r3, pc, #404	; (adr r3, 8005cb0 <_dtoa_r+0x2b0>)
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f7fa fcda 	bl	80004d8 <__aeabi_dmul>
 8005b24:	a364      	add	r3, pc, #400	; (adr r3, 8005cb8 <_dtoa_r+0x2b8>)
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f7fa fb1f 	bl	800016c <__adddf3>
 8005b2e:	4606      	mov	r6, r0
 8005b30:	4620      	mov	r0, r4
 8005b32:	460f      	mov	r7, r1
 8005b34:	f7fa fc66 	bl	8000404 <__aeabi_i2d>
 8005b38:	a361      	add	r3, pc, #388	; (adr r3, 8005cc0 <_dtoa_r+0x2c0>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fccb 	bl	80004d8 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4630      	mov	r0, r6
 8005b48:	4639      	mov	r1, r7
 8005b4a:	f7fa fb0f 	bl	800016c <__adddf3>
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460f      	mov	r7, r1
 8005b52:	f7fa ff71 	bl	8000a38 <__aeabi_d2iz>
 8005b56:	2200      	movs	r2, #0
 8005b58:	4682      	mov	sl, r0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	4639      	mov	r1, r7
 8005b60:	f7fa ff2c 	bl	80009bc <__aeabi_dcmplt>
 8005b64:	b148      	cbz	r0, 8005b7a <_dtoa_r+0x17a>
 8005b66:	4650      	mov	r0, sl
 8005b68:	f7fa fc4c 	bl	8000404 <__aeabi_i2d>
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	463b      	mov	r3, r7
 8005b70:	f7fa ff1a 	bl	80009a8 <__aeabi_dcmpeq>
 8005b74:	b908      	cbnz	r0, 8005b7a <_dtoa_r+0x17a>
 8005b76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b7a:	f1ba 0f16 	cmp.w	sl, #22
 8005b7e:	d858      	bhi.n	8005c32 <_dtoa_r+0x232>
 8005b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b84:	4b57      	ldr	r3, [pc, #348]	; (8005ce4 <_dtoa_r+0x2e4>)
 8005b86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa ff15 	bl	80009bc <__aeabi_dcmplt>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d04f      	beq.n	8005c36 <_dtoa_r+0x236>
 8005b96:	2300      	movs	r3, #0
 8005b98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ba0:	1b1c      	subs	r4, r3, r4
 8005ba2:	1e63      	subs	r3, r4, #1
 8005ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba6:	bf49      	itett	mi
 8005ba8:	f1c4 0301 	rsbmi	r3, r4, #1
 8005bac:	2300      	movpl	r3, #0
 8005bae:	9306      	strmi	r3, [sp, #24]
 8005bb0:	2300      	movmi	r3, #0
 8005bb2:	bf54      	ite	pl
 8005bb4:	9306      	strpl	r3, [sp, #24]
 8005bb6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005bb8:	f1ba 0f00 	cmp.w	sl, #0
 8005bbc:	db3d      	blt.n	8005c3a <_dtoa_r+0x23a>
 8005bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005bc4:	4453      	add	r3, sl
 8005bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc8:	2300      	movs	r3, #0
 8005bca:	930a      	str	r3, [sp, #40]	; 0x28
 8005bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	f200 808c 	bhi.w	8005cec <_dtoa_r+0x2ec>
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	bfc4      	itt	gt
 8005bd8:	3b04      	subgt	r3, #4
 8005bda:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bde:	bfc8      	it	gt
 8005be0:	2400      	movgt	r4, #0
 8005be2:	f1a3 0302 	sub.w	r3, r3, #2
 8005be6:	bfd8      	it	le
 8005be8:	2401      	movle	r4, #1
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	f200 808a 	bhi.w	8005d04 <_dtoa_r+0x304>
 8005bf0:	e8df f003 	tbb	[pc, r3]
 8005bf4:	5b4d4f2d 	.word	0x5b4d4f2d
 8005bf8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005bfc:	441c      	add	r4, r3
 8005bfe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	bfc3      	ittte	gt
 8005c06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c0a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005c0e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005c12:	f1c3 0320 	rsble	r3, r3, #32
 8005c16:	bfc6      	itte	gt
 8005c18:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c1c:	4318      	orrgt	r0, r3
 8005c1e:	fa06 f003 	lslle.w	r0, r6, r3
 8005c22:	f7fa fbdf 	bl	80003e4 <__aeabi_ui2d>
 8005c26:	2301      	movs	r3, #1
 8005c28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005c2c:	3c01      	subs	r4, #1
 8005c2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c30:	e76f      	b.n	8005b12 <_dtoa_r+0x112>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e7b2      	b.n	8005b9c <_dtoa_r+0x19c>
 8005c36:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c38:	e7b1      	b.n	8005b9e <_dtoa_r+0x19e>
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	eba3 030a 	sub.w	r3, r3, sl
 8005c40:	9306      	str	r3, [sp, #24]
 8005c42:	f1ca 0300 	rsb	r3, sl, #0
 8005c46:	930a      	str	r3, [sp, #40]	; 0x28
 8005c48:	2300      	movs	r3, #0
 8005c4a:	930e      	str	r3, [sp, #56]	; 0x38
 8005c4c:	e7be      	b.n	8005bcc <_dtoa_r+0x1cc>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	dc58      	bgt.n	8005d0a <_dtoa_r+0x30a>
 8005c58:	f04f 0901 	mov.w	r9, #1
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005c62:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005c66:	2200      	movs	r2, #0
 8005c68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005c6a:	6042      	str	r2, [r0, #4]
 8005c6c:	2204      	movs	r2, #4
 8005c6e:	f102 0614 	add.w	r6, r2, #20
 8005c72:	429e      	cmp	r6, r3
 8005c74:	6841      	ldr	r1, [r0, #4]
 8005c76:	d94e      	bls.n	8005d16 <_dtoa_r+0x316>
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 fcd7 	bl	800662c <_Balloc>
 8005c7e:	9003      	str	r0, [sp, #12]
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d14c      	bne.n	8005d1e <_dtoa_r+0x31e>
 8005c84:	4602      	mov	r2, r0
 8005c86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005c8a:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <_dtoa_r+0x2e8>)
 8005c8c:	e6cc      	b.n	8005a28 <_dtoa_r+0x28>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e7de      	b.n	8005c50 <_dtoa_r+0x250>
 8005c92:	2300      	movs	r3, #0
 8005c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c98:	eb0a 0903 	add.w	r9, sl, r3
 8005c9c:	f109 0301 	add.w	r3, r9, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	9308      	str	r3, [sp, #32]
 8005ca4:	bfb8      	it	lt
 8005ca6:	2301      	movlt	r3, #1
 8005ca8:	e7dd      	b.n	8005c66 <_dtoa_r+0x266>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e7f2      	b.n	8005c94 <_dtoa_r+0x294>
 8005cae:	bf00      	nop
 8005cb0:	636f4361 	.word	0x636f4361
 8005cb4:	3fd287a7 	.word	0x3fd287a7
 8005cb8:	8b60c8b3 	.word	0x8b60c8b3
 8005cbc:	3fc68a28 	.word	0x3fc68a28
 8005cc0:	509f79fb 	.word	0x509f79fb
 8005cc4:	3fd34413 	.word	0x3fd34413
 8005cc8:	08007ecd 	.word	0x08007ecd
 8005ccc:	08007ee4 	.word	0x08007ee4
 8005cd0:	7ff00000 	.word	0x7ff00000
 8005cd4:	08007ec9 	.word	0x08007ec9
 8005cd8:	08007ec0 	.word	0x08007ec0
 8005cdc:	08007e9d 	.word	0x08007e9d
 8005ce0:	3ff80000 	.word	0x3ff80000
 8005ce4:	08007fd8 	.word	0x08007fd8
 8005ce8:	08007f3f 	.word	0x08007f3f
 8005cec:	2401      	movs	r4, #1
 8005cee:	2300      	movs	r3, #0
 8005cf0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005cf2:	9322      	str	r3, [sp, #136]	; 0x88
 8005cf4:	f04f 39ff 	mov.w	r9, #4294967295
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2312      	movs	r3, #18
 8005cfc:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d00:	9223      	str	r2, [sp, #140]	; 0x8c
 8005d02:	e7b0      	b.n	8005c66 <_dtoa_r+0x266>
 8005d04:	2301      	movs	r3, #1
 8005d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d08:	e7f4      	b.n	8005cf4 <_dtoa_r+0x2f4>
 8005d0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005d0e:	464b      	mov	r3, r9
 8005d10:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d14:	e7a7      	b.n	8005c66 <_dtoa_r+0x266>
 8005d16:	3101      	adds	r1, #1
 8005d18:	6041      	str	r1, [r0, #4]
 8005d1a:	0052      	lsls	r2, r2, #1
 8005d1c:	e7a7      	b.n	8005c6e <_dtoa_r+0x26e>
 8005d1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d20:	9a03      	ldr	r2, [sp, #12]
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	9b08      	ldr	r3, [sp, #32]
 8005d26:	2b0e      	cmp	r3, #14
 8005d28:	f200 80a8 	bhi.w	8005e7c <_dtoa_r+0x47c>
 8005d2c:	2c00      	cmp	r4, #0
 8005d2e:	f000 80a5 	beq.w	8005e7c <_dtoa_r+0x47c>
 8005d32:	f1ba 0f00 	cmp.w	sl, #0
 8005d36:	dd34      	ble.n	8005da2 <_dtoa_r+0x3a2>
 8005d38:	4a9a      	ldr	r2, [pc, #616]	; (8005fa4 <_dtoa_r+0x5a4>)
 8005d3a:	f00a 030f 	and.w	r3, sl, #15
 8005d3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d42:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005d46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d4e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005d52:	d016      	beq.n	8005d82 <_dtoa_r+0x382>
 8005d54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d58:	4b93      	ldr	r3, [pc, #588]	; (8005fa8 <_dtoa_r+0x5a8>)
 8005d5a:	2703      	movs	r7, #3
 8005d5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d60:	f7fa fce4 	bl	800072c <__aeabi_ddiv>
 8005d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d68:	f004 040f 	and.w	r4, r4, #15
 8005d6c:	4e8e      	ldr	r6, [pc, #568]	; (8005fa8 <_dtoa_r+0x5a8>)
 8005d6e:	b954      	cbnz	r4, 8005d86 <_dtoa_r+0x386>
 8005d70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d78:	f7fa fcd8 	bl	800072c <__aeabi_ddiv>
 8005d7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d80:	e029      	b.n	8005dd6 <_dtoa_r+0x3d6>
 8005d82:	2702      	movs	r7, #2
 8005d84:	e7f2      	b.n	8005d6c <_dtoa_r+0x36c>
 8005d86:	07e1      	lsls	r1, r4, #31
 8005d88:	d508      	bpl.n	8005d9c <_dtoa_r+0x39c>
 8005d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d92:	f7fa fba1 	bl	80004d8 <__aeabi_dmul>
 8005d96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d9a:	3701      	adds	r7, #1
 8005d9c:	1064      	asrs	r4, r4, #1
 8005d9e:	3608      	adds	r6, #8
 8005da0:	e7e5      	b.n	8005d6e <_dtoa_r+0x36e>
 8005da2:	f000 80a5 	beq.w	8005ef0 <_dtoa_r+0x4f0>
 8005da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005daa:	f1ca 0400 	rsb	r4, sl, #0
 8005dae:	4b7d      	ldr	r3, [pc, #500]	; (8005fa4 <_dtoa_r+0x5a4>)
 8005db0:	f004 020f 	and.w	r2, r4, #15
 8005db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fb8c 	bl	80004d8 <__aeabi_dmul>
 8005dc0:	2702      	movs	r7, #2
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dc8:	4e77      	ldr	r6, [pc, #476]	; (8005fa8 <_dtoa_r+0x5a8>)
 8005dca:	1124      	asrs	r4, r4, #4
 8005dcc:	2c00      	cmp	r4, #0
 8005dce:	f040 8084 	bne.w	8005eda <_dtoa_r+0x4da>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1d2      	bne.n	8005d7c <_dtoa_r+0x37c>
 8005dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 808b 	beq.w	8005ef4 <_dtoa_r+0x4f4>
 8005dde:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005de2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005de6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dea:	2200      	movs	r2, #0
 8005dec:	4b6f      	ldr	r3, [pc, #444]	; (8005fac <_dtoa_r+0x5ac>)
 8005dee:	f7fa fde5 	bl	80009bc <__aeabi_dcmplt>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d07e      	beq.n	8005ef4 <_dtoa_r+0x4f4>
 8005df6:	9b08      	ldr	r3, [sp, #32]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d07b      	beq.n	8005ef4 <_dtoa_r+0x4f4>
 8005dfc:	f1b9 0f00 	cmp.w	r9, #0
 8005e00:	dd38      	ble.n	8005e74 <_dtoa_r+0x474>
 8005e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e06:	2200      	movs	r2, #0
 8005e08:	4b69      	ldr	r3, [pc, #420]	; (8005fb0 <_dtoa_r+0x5b0>)
 8005e0a:	f7fa fb65 	bl	80004d8 <__aeabi_dmul>
 8005e0e:	464c      	mov	r4, r9
 8005e10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e14:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005e18:	3701      	adds	r7, #1
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f7fa faf2 	bl	8000404 <__aeabi_i2d>
 8005e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e24:	f7fa fb58 	bl	80004d8 <__aeabi_dmul>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4b62      	ldr	r3, [pc, #392]	; (8005fb4 <_dtoa_r+0x5b4>)
 8005e2c:	f7fa f99e 	bl	800016c <__adddf3>
 8005e30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e38:	9611      	str	r6, [sp, #68]	; 0x44
 8005e3a:	2c00      	cmp	r4, #0
 8005e3c:	d15d      	bne.n	8005efa <_dtoa_r+0x4fa>
 8005e3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e42:	2200      	movs	r2, #0
 8005e44:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <_dtoa_r+0x5b8>)
 8005e46:	f7fa f98f 	bl	8000168 <__aeabi_dsub>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e52:	4633      	mov	r3, r6
 8005e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e56:	f7fa fdcf 	bl	80009f8 <__aeabi_dcmpgt>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f040 829c 	bne.w	8006398 <_dtoa_r+0x998>
 8005e60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e6a:	f7fa fda7 	bl	80009bc <__aeabi_dcmplt>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f040 8290 	bne.w	8006394 <_dtoa_r+0x994>
 8005e74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005e78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f2c0 8152 	blt.w	8006128 <_dtoa_r+0x728>
 8005e84:	f1ba 0f0e 	cmp.w	sl, #14
 8005e88:	f300 814e 	bgt.w	8006128 <_dtoa_r+0x728>
 8005e8c:	4b45      	ldr	r3, [pc, #276]	; (8005fa4 <_dtoa_r+0x5a4>)
 8005e8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f280 80db 	bge.w	8006058 <_dtoa_r+0x658>
 8005ea2:	9b08      	ldr	r3, [sp, #32]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f300 80d7 	bgt.w	8006058 <_dtoa_r+0x658>
 8005eaa:	f040 8272 	bne.w	8006392 <_dtoa_r+0x992>
 8005eae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4b40      	ldr	r3, [pc, #256]	; (8005fb8 <_dtoa_r+0x5b8>)
 8005eb6:	f7fa fb0f 	bl	80004d8 <__aeabi_dmul>
 8005eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ebe:	f7fa fd91 	bl	80009e4 <__aeabi_dcmpge>
 8005ec2:	9c08      	ldr	r4, [sp, #32]
 8005ec4:	4626      	mov	r6, r4
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f040 8248 	bne.w	800635c <_dtoa_r+0x95c>
 8005ecc:	2331      	movs	r3, #49	; 0x31
 8005ece:	9f03      	ldr	r7, [sp, #12]
 8005ed0:	f10a 0a01 	add.w	sl, sl, #1
 8005ed4:	f807 3b01 	strb.w	r3, [r7], #1
 8005ed8:	e244      	b.n	8006364 <_dtoa_r+0x964>
 8005eda:	07e2      	lsls	r2, r4, #31
 8005edc:	d505      	bpl.n	8005eea <_dtoa_r+0x4ea>
 8005ede:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ee2:	f7fa faf9 	bl	80004d8 <__aeabi_dmul>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	3701      	adds	r7, #1
 8005eea:	1064      	asrs	r4, r4, #1
 8005eec:	3608      	adds	r6, #8
 8005eee:	e76d      	b.n	8005dcc <_dtoa_r+0x3cc>
 8005ef0:	2702      	movs	r7, #2
 8005ef2:	e770      	b.n	8005dd6 <_dtoa_r+0x3d6>
 8005ef4:	46d0      	mov	r8, sl
 8005ef6:	9c08      	ldr	r4, [sp, #32]
 8005ef8:	e78f      	b.n	8005e1a <_dtoa_r+0x41a>
 8005efa:	9903      	ldr	r1, [sp, #12]
 8005efc:	4b29      	ldr	r3, [pc, #164]	; (8005fa4 <_dtoa_r+0x5a4>)
 8005efe:	4421      	add	r1, r4
 8005f00:	9112      	str	r1, [sp, #72]	; 0x48
 8005f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005f0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f10:	2900      	cmp	r1, #0
 8005f12:	d055      	beq.n	8005fc0 <_dtoa_r+0x5c0>
 8005f14:	2000      	movs	r0, #0
 8005f16:	4929      	ldr	r1, [pc, #164]	; (8005fbc <_dtoa_r+0x5bc>)
 8005f18:	f7fa fc08 	bl	800072c <__aeabi_ddiv>
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	4632      	mov	r2, r6
 8005f20:	f7fa f922 	bl	8000168 <__aeabi_dsub>
 8005f24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f28:	9f03      	ldr	r7, [sp, #12]
 8005f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2e:	f7fa fd83 	bl	8000a38 <__aeabi_d2iz>
 8005f32:	4604      	mov	r4, r0
 8005f34:	f7fa fa66 	bl	8000404 <__aeabi_i2d>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f40:	f7fa f912 	bl	8000168 <__aeabi_dsub>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	3430      	adds	r4, #48	; 0x30
 8005f4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f52:	f807 4b01 	strb.w	r4, [r7], #1
 8005f56:	f7fa fd31 	bl	80009bc <__aeabi_dcmplt>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d174      	bne.n	8006048 <_dtoa_r+0x648>
 8005f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f62:	2000      	movs	r0, #0
 8005f64:	4911      	ldr	r1, [pc, #68]	; (8005fac <_dtoa_r+0x5ac>)
 8005f66:	f7fa f8ff 	bl	8000168 <__aeabi_dsub>
 8005f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f6e:	f7fa fd25 	bl	80009bc <__aeabi_dcmplt>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	f040 80b7 	bne.w	80060e6 <_dtoa_r+0x6e6>
 8005f78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f7a:	429f      	cmp	r7, r3
 8005f7c:	f43f af7a 	beq.w	8005e74 <_dtoa_r+0x474>
 8005f80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f84:	2200      	movs	r2, #0
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <_dtoa_r+0x5b0>)
 8005f88:	f7fa faa6 	bl	80004d8 <__aeabi_dmul>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <_dtoa_r+0x5b0>)
 8005f98:	f7fa fa9e 	bl	80004d8 <__aeabi_dmul>
 8005f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fa0:	e7c3      	b.n	8005f2a <_dtoa_r+0x52a>
 8005fa2:	bf00      	nop
 8005fa4:	08007fd8 	.word	0x08007fd8
 8005fa8:	08007fb0 	.word	0x08007fb0
 8005fac:	3ff00000 	.word	0x3ff00000
 8005fb0:	40240000 	.word	0x40240000
 8005fb4:	401c0000 	.word	0x401c0000
 8005fb8:	40140000 	.word	0x40140000
 8005fbc:	3fe00000 	.word	0x3fe00000
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa fa88 	bl	80004d8 <__aeabi_dmul>
 8005fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fce:	9c03      	ldr	r4, [sp, #12]
 8005fd0:	9314      	str	r3, [sp, #80]	; 0x50
 8005fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd6:	f7fa fd2f 	bl	8000a38 <__aeabi_d2iz>
 8005fda:	9015      	str	r0, [sp, #84]	; 0x54
 8005fdc:	f7fa fa12 	bl	8000404 <__aeabi_i2d>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe8:	f7fa f8be 	bl	8000168 <__aeabi_dsub>
 8005fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fee:	4606      	mov	r6, r0
 8005ff0:	3330      	adds	r3, #48	; 0x30
 8005ff2:	f804 3b01 	strb.w	r3, [r4], #1
 8005ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ff8:	460f      	mov	r7, r1
 8005ffa:	429c      	cmp	r4, r3
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	d124      	bne.n	800604c <_dtoa_r+0x64c>
 8006002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006006:	4bb0      	ldr	r3, [pc, #704]	; (80062c8 <_dtoa_r+0x8c8>)
 8006008:	f7fa f8b0 	bl	800016c <__adddf3>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4630      	mov	r0, r6
 8006012:	4639      	mov	r1, r7
 8006014:	f7fa fcf0 	bl	80009f8 <__aeabi_dcmpgt>
 8006018:	2800      	cmp	r0, #0
 800601a:	d163      	bne.n	80060e4 <_dtoa_r+0x6e4>
 800601c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006020:	2000      	movs	r0, #0
 8006022:	49a9      	ldr	r1, [pc, #676]	; (80062c8 <_dtoa_r+0x8c8>)
 8006024:	f7fa f8a0 	bl	8000168 <__aeabi_dsub>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4630      	mov	r0, r6
 800602e:	4639      	mov	r1, r7
 8006030:	f7fa fcc4 	bl	80009bc <__aeabi_dcmplt>
 8006034:	2800      	cmp	r0, #0
 8006036:	f43f af1d 	beq.w	8005e74 <_dtoa_r+0x474>
 800603a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800603c:	1e7b      	subs	r3, r7, #1
 800603e:	9314      	str	r3, [sp, #80]	; 0x50
 8006040:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006044:	2b30      	cmp	r3, #48	; 0x30
 8006046:	d0f8      	beq.n	800603a <_dtoa_r+0x63a>
 8006048:	46c2      	mov	sl, r8
 800604a:	e03b      	b.n	80060c4 <_dtoa_r+0x6c4>
 800604c:	4b9f      	ldr	r3, [pc, #636]	; (80062cc <_dtoa_r+0x8cc>)
 800604e:	f7fa fa43 	bl	80004d8 <__aeabi_dmul>
 8006052:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006056:	e7bc      	b.n	8005fd2 <_dtoa_r+0x5d2>
 8006058:	9f03      	ldr	r7, [sp, #12]
 800605a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800605e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006062:	4640      	mov	r0, r8
 8006064:	4649      	mov	r1, r9
 8006066:	f7fa fb61 	bl	800072c <__aeabi_ddiv>
 800606a:	f7fa fce5 	bl	8000a38 <__aeabi_d2iz>
 800606e:	4604      	mov	r4, r0
 8006070:	f7fa f9c8 	bl	8000404 <__aeabi_i2d>
 8006074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006078:	f7fa fa2e 	bl	80004d8 <__aeabi_dmul>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4640      	mov	r0, r8
 8006082:	4649      	mov	r1, r9
 8006084:	f7fa f870 	bl	8000168 <__aeabi_dsub>
 8006088:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800608c:	f807 6b01 	strb.w	r6, [r7], #1
 8006090:	9e03      	ldr	r6, [sp, #12]
 8006092:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006096:	1bbe      	subs	r6, r7, r6
 8006098:	45b4      	cmp	ip, r6
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	d136      	bne.n	800610e <_dtoa_r+0x70e>
 80060a0:	f7fa f864 	bl	800016c <__adddf3>
 80060a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060a8:	4680      	mov	r8, r0
 80060aa:	4689      	mov	r9, r1
 80060ac:	f7fa fca4 	bl	80009f8 <__aeabi_dcmpgt>
 80060b0:	bb58      	cbnz	r0, 800610a <_dtoa_r+0x70a>
 80060b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060b6:	4640      	mov	r0, r8
 80060b8:	4649      	mov	r1, r9
 80060ba:	f7fa fc75 	bl	80009a8 <__aeabi_dcmpeq>
 80060be:	b108      	cbz	r0, 80060c4 <_dtoa_r+0x6c4>
 80060c0:	07e1      	lsls	r1, r4, #31
 80060c2:	d422      	bmi.n	800610a <_dtoa_r+0x70a>
 80060c4:	4628      	mov	r0, r5
 80060c6:	4659      	mov	r1, fp
 80060c8:	f000 faf0 	bl	80066ac <_Bfree>
 80060cc:	2300      	movs	r3, #0
 80060ce:	703b      	strb	r3, [r7, #0]
 80060d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80060d2:	f10a 0001 	add.w	r0, sl, #1
 80060d6:	6018      	str	r0, [r3, #0]
 80060d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f43f acde 	beq.w	8005a9c <_dtoa_r+0x9c>
 80060e0:	601f      	str	r7, [r3, #0]
 80060e2:	e4db      	b.n	8005a9c <_dtoa_r+0x9c>
 80060e4:	4627      	mov	r7, r4
 80060e6:	463b      	mov	r3, r7
 80060e8:	461f      	mov	r7, r3
 80060ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060ee:	2a39      	cmp	r2, #57	; 0x39
 80060f0:	d107      	bne.n	8006102 <_dtoa_r+0x702>
 80060f2:	9a03      	ldr	r2, [sp, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d1f7      	bne.n	80060e8 <_dtoa_r+0x6e8>
 80060f8:	2230      	movs	r2, #48	; 0x30
 80060fa:	9903      	ldr	r1, [sp, #12]
 80060fc:	f108 0801 	add.w	r8, r8, #1
 8006100:	700a      	strb	r2, [r1, #0]
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	3201      	adds	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e79e      	b.n	8006048 <_dtoa_r+0x648>
 800610a:	46d0      	mov	r8, sl
 800610c:	e7eb      	b.n	80060e6 <_dtoa_r+0x6e6>
 800610e:	2200      	movs	r2, #0
 8006110:	4b6e      	ldr	r3, [pc, #440]	; (80062cc <_dtoa_r+0x8cc>)
 8006112:	f7fa f9e1 	bl	80004d8 <__aeabi_dmul>
 8006116:	2200      	movs	r2, #0
 8006118:	2300      	movs	r3, #0
 800611a:	4680      	mov	r8, r0
 800611c:	4689      	mov	r9, r1
 800611e:	f7fa fc43 	bl	80009a8 <__aeabi_dcmpeq>
 8006122:	2800      	cmp	r0, #0
 8006124:	d09b      	beq.n	800605e <_dtoa_r+0x65e>
 8006126:	e7cd      	b.n	80060c4 <_dtoa_r+0x6c4>
 8006128:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800612a:	2a00      	cmp	r2, #0
 800612c:	f000 80d0 	beq.w	80062d0 <_dtoa_r+0x8d0>
 8006130:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006132:	2a01      	cmp	r2, #1
 8006134:	f300 80ae 	bgt.w	8006294 <_dtoa_r+0x894>
 8006138:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800613a:	2a00      	cmp	r2, #0
 800613c:	f000 80a6 	beq.w	800628c <_dtoa_r+0x88c>
 8006140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006144:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006146:	9f06      	ldr	r7, [sp, #24]
 8006148:	9a06      	ldr	r2, [sp, #24]
 800614a:	2101      	movs	r1, #1
 800614c:	441a      	add	r2, r3
 800614e:	9206      	str	r2, [sp, #24]
 8006150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006152:	4628      	mov	r0, r5
 8006154:	441a      	add	r2, r3
 8006156:	9209      	str	r2, [sp, #36]	; 0x24
 8006158:	f000 fb5e 	bl	8006818 <__i2b>
 800615c:	4606      	mov	r6, r0
 800615e:	2f00      	cmp	r7, #0
 8006160:	dd0c      	ble.n	800617c <_dtoa_r+0x77c>
 8006162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	dd09      	ble.n	800617c <_dtoa_r+0x77c>
 8006168:	42bb      	cmp	r3, r7
 800616a:	bfa8      	it	ge
 800616c:	463b      	movge	r3, r7
 800616e:	9a06      	ldr	r2, [sp, #24]
 8006170:	1aff      	subs	r7, r7, r3
 8006172:	1ad2      	subs	r2, r2, r3
 8006174:	9206      	str	r2, [sp, #24]
 8006176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	9309      	str	r3, [sp, #36]	; 0x24
 800617c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800617e:	b1f3      	cbz	r3, 80061be <_dtoa_r+0x7be>
 8006180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80a8 	beq.w	80062d8 <_dtoa_r+0x8d8>
 8006188:	2c00      	cmp	r4, #0
 800618a:	dd10      	ble.n	80061ae <_dtoa_r+0x7ae>
 800618c:	4631      	mov	r1, r6
 800618e:	4622      	mov	r2, r4
 8006190:	4628      	mov	r0, r5
 8006192:	f000 fbff 	bl	8006994 <__pow5mult>
 8006196:	465a      	mov	r2, fp
 8006198:	4601      	mov	r1, r0
 800619a:	4606      	mov	r6, r0
 800619c:	4628      	mov	r0, r5
 800619e:	f000 fb51 	bl	8006844 <__multiply>
 80061a2:	4680      	mov	r8, r0
 80061a4:	4659      	mov	r1, fp
 80061a6:	4628      	mov	r0, r5
 80061a8:	f000 fa80 	bl	80066ac <_Bfree>
 80061ac:	46c3      	mov	fp, r8
 80061ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b0:	1b1a      	subs	r2, r3, r4
 80061b2:	d004      	beq.n	80061be <_dtoa_r+0x7be>
 80061b4:	4659      	mov	r1, fp
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fbec 	bl	8006994 <__pow5mult>
 80061bc:	4683      	mov	fp, r0
 80061be:	2101      	movs	r1, #1
 80061c0:	4628      	mov	r0, r5
 80061c2:	f000 fb29 	bl	8006818 <__i2b>
 80061c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c8:	4604      	mov	r4, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f340 8086 	ble.w	80062dc <_dtoa_r+0x8dc>
 80061d0:	461a      	mov	r2, r3
 80061d2:	4601      	mov	r1, r0
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 fbdd 	bl	8006994 <__pow5mult>
 80061da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061dc:	4604      	mov	r4, r0
 80061de:	2b01      	cmp	r3, #1
 80061e0:	dd7f      	ble.n	80062e2 <_dtoa_r+0x8e2>
 80061e2:	f04f 0800 	mov.w	r8, #0
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80061ec:	6918      	ldr	r0, [r3, #16]
 80061ee:	f000 fac5 	bl	800677c <__hi0bits>
 80061f2:	f1c0 0020 	rsb	r0, r0, #32
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f8:	4418      	add	r0, r3
 80061fa:	f010 001f 	ands.w	r0, r0, #31
 80061fe:	f000 8092 	beq.w	8006326 <_dtoa_r+0x926>
 8006202:	f1c0 0320 	rsb	r3, r0, #32
 8006206:	2b04      	cmp	r3, #4
 8006208:	f340 808a 	ble.w	8006320 <_dtoa_r+0x920>
 800620c:	f1c0 001c 	rsb	r0, r0, #28
 8006210:	9b06      	ldr	r3, [sp, #24]
 8006212:	4407      	add	r7, r0
 8006214:	4403      	add	r3, r0
 8006216:	9306      	str	r3, [sp, #24]
 8006218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621a:	4403      	add	r3, r0
 800621c:	9309      	str	r3, [sp, #36]	; 0x24
 800621e:	9b06      	ldr	r3, [sp, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	dd05      	ble.n	8006230 <_dtoa_r+0x830>
 8006224:	4659      	mov	r1, fp
 8006226:	461a      	mov	r2, r3
 8006228:	4628      	mov	r0, r5
 800622a:	f000 fc0d 	bl	8006a48 <__lshift>
 800622e:	4683      	mov	fp, r0
 8006230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	dd05      	ble.n	8006242 <_dtoa_r+0x842>
 8006236:	4621      	mov	r1, r4
 8006238:	461a      	mov	r2, r3
 800623a:	4628      	mov	r0, r5
 800623c:	f000 fc04 	bl	8006a48 <__lshift>
 8006240:	4604      	mov	r4, r0
 8006242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d070      	beq.n	800632a <_dtoa_r+0x92a>
 8006248:	4621      	mov	r1, r4
 800624a:	4658      	mov	r0, fp
 800624c:	f000 fc6c 	bl	8006b28 <__mcmp>
 8006250:	2800      	cmp	r0, #0
 8006252:	da6a      	bge.n	800632a <_dtoa_r+0x92a>
 8006254:	2300      	movs	r3, #0
 8006256:	4659      	mov	r1, fp
 8006258:	220a      	movs	r2, #10
 800625a:	4628      	mov	r0, r5
 800625c:	f000 fa48 	bl	80066f0 <__multadd>
 8006260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006262:	4683      	mov	fp, r0
 8006264:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8194 	beq.w	8006596 <_dtoa_r+0xb96>
 800626e:	4631      	mov	r1, r6
 8006270:	2300      	movs	r3, #0
 8006272:	220a      	movs	r2, #10
 8006274:	4628      	mov	r0, r5
 8006276:	f000 fa3b 	bl	80066f0 <__multadd>
 800627a:	f1b9 0f00 	cmp.w	r9, #0
 800627e:	4606      	mov	r6, r0
 8006280:	f300 8093 	bgt.w	80063aa <_dtoa_r+0x9aa>
 8006284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006286:	2b02      	cmp	r3, #2
 8006288:	dc57      	bgt.n	800633a <_dtoa_r+0x93a>
 800628a:	e08e      	b.n	80063aa <_dtoa_r+0x9aa>
 800628c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800628e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006292:	e757      	b.n	8006144 <_dtoa_r+0x744>
 8006294:	9b08      	ldr	r3, [sp, #32]
 8006296:	1e5c      	subs	r4, r3, #1
 8006298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629a:	42a3      	cmp	r3, r4
 800629c:	bfb7      	itett	lt
 800629e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062a0:	1b1c      	subge	r4, r3, r4
 80062a2:	1ae2      	sublt	r2, r4, r3
 80062a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80062a6:	bfbe      	ittt	lt
 80062a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80062aa:	189b      	addlt	r3, r3, r2
 80062ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80062ae:	9b08      	ldr	r3, [sp, #32]
 80062b0:	bfb8      	it	lt
 80062b2:	2400      	movlt	r4, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bfbb      	ittet	lt
 80062b8:	9b06      	ldrlt	r3, [sp, #24]
 80062ba:	9a08      	ldrlt	r2, [sp, #32]
 80062bc:	9f06      	ldrge	r7, [sp, #24]
 80062be:	1a9f      	sublt	r7, r3, r2
 80062c0:	bfac      	ite	ge
 80062c2:	9b08      	ldrge	r3, [sp, #32]
 80062c4:	2300      	movlt	r3, #0
 80062c6:	e73f      	b.n	8006148 <_dtoa_r+0x748>
 80062c8:	3fe00000 	.word	0x3fe00000
 80062cc:	40240000 	.word	0x40240000
 80062d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80062d2:	9f06      	ldr	r7, [sp, #24]
 80062d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80062d6:	e742      	b.n	800615e <_dtoa_r+0x75e>
 80062d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062da:	e76b      	b.n	80061b4 <_dtoa_r+0x7b4>
 80062dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062de:	2b01      	cmp	r3, #1
 80062e0:	dc19      	bgt.n	8006316 <_dtoa_r+0x916>
 80062e2:	9b04      	ldr	r3, [sp, #16]
 80062e4:	b9bb      	cbnz	r3, 8006316 <_dtoa_r+0x916>
 80062e6:	9b05      	ldr	r3, [sp, #20]
 80062e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062ec:	b99b      	cbnz	r3, 8006316 <_dtoa_r+0x916>
 80062ee:	9b05      	ldr	r3, [sp, #20]
 80062f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f4:	0d1b      	lsrs	r3, r3, #20
 80062f6:	051b      	lsls	r3, r3, #20
 80062f8:	b183      	cbz	r3, 800631c <_dtoa_r+0x91c>
 80062fa:	f04f 0801 	mov.w	r8, #1
 80062fe:	9b06      	ldr	r3, [sp, #24]
 8006300:	3301      	adds	r3, #1
 8006302:	9306      	str	r3, [sp, #24]
 8006304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006306:	3301      	adds	r3, #1
 8006308:	9309      	str	r3, [sp, #36]	; 0x24
 800630a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800630c:	2b00      	cmp	r3, #0
 800630e:	f47f af6a 	bne.w	80061e6 <_dtoa_r+0x7e6>
 8006312:	2001      	movs	r0, #1
 8006314:	e76f      	b.n	80061f6 <_dtoa_r+0x7f6>
 8006316:	f04f 0800 	mov.w	r8, #0
 800631a:	e7f6      	b.n	800630a <_dtoa_r+0x90a>
 800631c:	4698      	mov	r8, r3
 800631e:	e7f4      	b.n	800630a <_dtoa_r+0x90a>
 8006320:	f43f af7d 	beq.w	800621e <_dtoa_r+0x81e>
 8006324:	4618      	mov	r0, r3
 8006326:	301c      	adds	r0, #28
 8006328:	e772      	b.n	8006210 <_dtoa_r+0x810>
 800632a:	9b08      	ldr	r3, [sp, #32]
 800632c:	2b00      	cmp	r3, #0
 800632e:	dc36      	bgt.n	800639e <_dtoa_r+0x99e>
 8006330:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006332:	2b02      	cmp	r3, #2
 8006334:	dd33      	ble.n	800639e <_dtoa_r+0x99e>
 8006336:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800633a:	f1b9 0f00 	cmp.w	r9, #0
 800633e:	d10d      	bne.n	800635c <_dtoa_r+0x95c>
 8006340:	4621      	mov	r1, r4
 8006342:	464b      	mov	r3, r9
 8006344:	2205      	movs	r2, #5
 8006346:	4628      	mov	r0, r5
 8006348:	f000 f9d2 	bl	80066f0 <__multadd>
 800634c:	4601      	mov	r1, r0
 800634e:	4604      	mov	r4, r0
 8006350:	4658      	mov	r0, fp
 8006352:	f000 fbe9 	bl	8006b28 <__mcmp>
 8006356:	2800      	cmp	r0, #0
 8006358:	f73f adb8 	bgt.w	8005ecc <_dtoa_r+0x4cc>
 800635c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800635e:	9f03      	ldr	r7, [sp, #12]
 8006360:	ea6f 0a03 	mvn.w	sl, r3
 8006364:	f04f 0800 	mov.w	r8, #0
 8006368:	4621      	mov	r1, r4
 800636a:	4628      	mov	r0, r5
 800636c:	f000 f99e 	bl	80066ac <_Bfree>
 8006370:	2e00      	cmp	r6, #0
 8006372:	f43f aea7 	beq.w	80060c4 <_dtoa_r+0x6c4>
 8006376:	f1b8 0f00 	cmp.w	r8, #0
 800637a:	d005      	beq.n	8006388 <_dtoa_r+0x988>
 800637c:	45b0      	cmp	r8, r6
 800637e:	d003      	beq.n	8006388 <_dtoa_r+0x988>
 8006380:	4641      	mov	r1, r8
 8006382:	4628      	mov	r0, r5
 8006384:	f000 f992 	bl	80066ac <_Bfree>
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	f000 f98e 	bl	80066ac <_Bfree>
 8006390:	e698      	b.n	80060c4 <_dtoa_r+0x6c4>
 8006392:	2400      	movs	r4, #0
 8006394:	4626      	mov	r6, r4
 8006396:	e7e1      	b.n	800635c <_dtoa_r+0x95c>
 8006398:	46c2      	mov	sl, r8
 800639a:	4626      	mov	r6, r4
 800639c:	e596      	b.n	8005ecc <_dtoa_r+0x4cc>
 800639e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80fd 	beq.w	80065a4 <_dtoa_r+0xba4>
 80063aa:	2f00      	cmp	r7, #0
 80063ac:	dd05      	ble.n	80063ba <_dtoa_r+0x9ba>
 80063ae:	4631      	mov	r1, r6
 80063b0:	463a      	mov	r2, r7
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 fb48 	bl	8006a48 <__lshift>
 80063b8:	4606      	mov	r6, r0
 80063ba:	f1b8 0f00 	cmp.w	r8, #0
 80063be:	d05c      	beq.n	800647a <_dtoa_r+0xa7a>
 80063c0:	4628      	mov	r0, r5
 80063c2:	6871      	ldr	r1, [r6, #4]
 80063c4:	f000 f932 	bl	800662c <_Balloc>
 80063c8:	4607      	mov	r7, r0
 80063ca:	b928      	cbnz	r0, 80063d8 <_dtoa_r+0x9d8>
 80063cc:	4602      	mov	r2, r0
 80063ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063d2:	4b7f      	ldr	r3, [pc, #508]	; (80065d0 <_dtoa_r+0xbd0>)
 80063d4:	f7ff bb28 	b.w	8005a28 <_dtoa_r+0x28>
 80063d8:	6932      	ldr	r2, [r6, #16]
 80063da:	f106 010c 	add.w	r1, r6, #12
 80063de:	3202      	adds	r2, #2
 80063e0:	0092      	lsls	r2, r2, #2
 80063e2:	300c      	adds	r0, #12
 80063e4:	f000 f914 	bl	8006610 <memcpy>
 80063e8:	2201      	movs	r2, #1
 80063ea:	4639      	mov	r1, r7
 80063ec:	4628      	mov	r0, r5
 80063ee:	f000 fb2b 	bl	8006a48 <__lshift>
 80063f2:	46b0      	mov	r8, r6
 80063f4:	4606      	mov	r6, r0
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	9308      	str	r3, [sp, #32]
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	444b      	add	r3, r9
 8006400:	930a      	str	r3, [sp, #40]	; 0x28
 8006402:	9b04      	ldr	r3, [sp, #16]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	9309      	str	r3, [sp, #36]	; 0x24
 800640a:	9b08      	ldr	r3, [sp, #32]
 800640c:	4621      	mov	r1, r4
 800640e:	3b01      	subs	r3, #1
 8006410:	4658      	mov	r0, fp
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	f7ff fa66 	bl	80058e4 <quorem>
 8006418:	4603      	mov	r3, r0
 800641a:	4641      	mov	r1, r8
 800641c:	3330      	adds	r3, #48	; 0x30
 800641e:	9006      	str	r0, [sp, #24]
 8006420:	4658      	mov	r0, fp
 8006422:	930b      	str	r3, [sp, #44]	; 0x2c
 8006424:	f000 fb80 	bl	8006b28 <__mcmp>
 8006428:	4632      	mov	r2, r6
 800642a:	4681      	mov	r9, r0
 800642c:	4621      	mov	r1, r4
 800642e:	4628      	mov	r0, r5
 8006430:	f000 fb96 	bl	8006b60 <__mdiff>
 8006434:	68c2      	ldr	r2, [r0, #12]
 8006436:	4607      	mov	r7, r0
 8006438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800643a:	bb02      	cbnz	r2, 800647e <_dtoa_r+0xa7e>
 800643c:	4601      	mov	r1, r0
 800643e:	4658      	mov	r0, fp
 8006440:	f000 fb72 	bl	8006b28 <__mcmp>
 8006444:	4602      	mov	r2, r0
 8006446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006448:	4639      	mov	r1, r7
 800644a:	4628      	mov	r0, r5
 800644c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006450:	f000 f92c 	bl	80066ac <_Bfree>
 8006454:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006458:	9f08      	ldr	r7, [sp, #32]
 800645a:	ea43 0102 	orr.w	r1, r3, r2
 800645e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006460:	430b      	orrs	r3, r1
 8006462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006464:	d10d      	bne.n	8006482 <_dtoa_r+0xa82>
 8006466:	2b39      	cmp	r3, #57	; 0x39
 8006468:	d029      	beq.n	80064be <_dtoa_r+0xabe>
 800646a:	f1b9 0f00 	cmp.w	r9, #0
 800646e:	dd01      	ble.n	8006474 <_dtoa_r+0xa74>
 8006470:	9b06      	ldr	r3, [sp, #24]
 8006472:	3331      	adds	r3, #49	; 0x31
 8006474:	9a04      	ldr	r2, [sp, #16]
 8006476:	7013      	strb	r3, [r2, #0]
 8006478:	e776      	b.n	8006368 <_dtoa_r+0x968>
 800647a:	4630      	mov	r0, r6
 800647c:	e7b9      	b.n	80063f2 <_dtoa_r+0x9f2>
 800647e:	2201      	movs	r2, #1
 8006480:	e7e2      	b.n	8006448 <_dtoa_r+0xa48>
 8006482:	f1b9 0f00 	cmp.w	r9, #0
 8006486:	db06      	blt.n	8006496 <_dtoa_r+0xa96>
 8006488:	9922      	ldr	r1, [sp, #136]	; 0x88
 800648a:	ea41 0909 	orr.w	r9, r1, r9
 800648e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006490:	ea59 0101 	orrs.w	r1, r9, r1
 8006494:	d120      	bne.n	80064d8 <_dtoa_r+0xad8>
 8006496:	2a00      	cmp	r2, #0
 8006498:	ddec      	ble.n	8006474 <_dtoa_r+0xa74>
 800649a:	4659      	mov	r1, fp
 800649c:	2201      	movs	r2, #1
 800649e:	4628      	mov	r0, r5
 80064a0:	9308      	str	r3, [sp, #32]
 80064a2:	f000 fad1 	bl	8006a48 <__lshift>
 80064a6:	4621      	mov	r1, r4
 80064a8:	4683      	mov	fp, r0
 80064aa:	f000 fb3d 	bl	8006b28 <__mcmp>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	9b08      	ldr	r3, [sp, #32]
 80064b2:	dc02      	bgt.n	80064ba <_dtoa_r+0xaba>
 80064b4:	d1de      	bne.n	8006474 <_dtoa_r+0xa74>
 80064b6:	07da      	lsls	r2, r3, #31
 80064b8:	d5dc      	bpl.n	8006474 <_dtoa_r+0xa74>
 80064ba:	2b39      	cmp	r3, #57	; 0x39
 80064bc:	d1d8      	bne.n	8006470 <_dtoa_r+0xa70>
 80064be:	2339      	movs	r3, #57	; 0x39
 80064c0:	9a04      	ldr	r2, [sp, #16]
 80064c2:	7013      	strb	r3, [r2, #0]
 80064c4:	463b      	mov	r3, r7
 80064c6:	461f      	mov	r7, r3
 80064c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	2a39      	cmp	r2, #57	; 0x39
 80064d0:	d050      	beq.n	8006574 <_dtoa_r+0xb74>
 80064d2:	3201      	adds	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e747      	b.n	8006368 <_dtoa_r+0x968>
 80064d8:	2a00      	cmp	r2, #0
 80064da:	dd03      	ble.n	80064e4 <_dtoa_r+0xae4>
 80064dc:	2b39      	cmp	r3, #57	; 0x39
 80064de:	d0ee      	beq.n	80064be <_dtoa_r+0xabe>
 80064e0:	3301      	adds	r3, #1
 80064e2:	e7c7      	b.n	8006474 <_dtoa_r+0xa74>
 80064e4:	9a08      	ldr	r2, [sp, #32]
 80064e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064ec:	428a      	cmp	r2, r1
 80064ee:	d02a      	beq.n	8006546 <_dtoa_r+0xb46>
 80064f0:	4659      	mov	r1, fp
 80064f2:	2300      	movs	r3, #0
 80064f4:	220a      	movs	r2, #10
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 f8fa 	bl	80066f0 <__multadd>
 80064fc:	45b0      	cmp	r8, r6
 80064fe:	4683      	mov	fp, r0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	f04f 020a 	mov.w	r2, #10
 8006508:	4641      	mov	r1, r8
 800650a:	4628      	mov	r0, r5
 800650c:	d107      	bne.n	800651e <_dtoa_r+0xb1e>
 800650e:	f000 f8ef 	bl	80066f0 <__multadd>
 8006512:	4680      	mov	r8, r0
 8006514:	4606      	mov	r6, r0
 8006516:	9b08      	ldr	r3, [sp, #32]
 8006518:	3301      	adds	r3, #1
 800651a:	9308      	str	r3, [sp, #32]
 800651c:	e775      	b.n	800640a <_dtoa_r+0xa0a>
 800651e:	f000 f8e7 	bl	80066f0 <__multadd>
 8006522:	4631      	mov	r1, r6
 8006524:	4680      	mov	r8, r0
 8006526:	2300      	movs	r3, #0
 8006528:	220a      	movs	r2, #10
 800652a:	4628      	mov	r0, r5
 800652c:	f000 f8e0 	bl	80066f0 <__multadd>
 8006530:	4606      	mov	r6, r0
 8006532:	e7f0      	b.n	8006516 <_dtoa_r+0xb16>
 8006534:	f1b9 0f00 	cmp.w	r9, #0
 8006538:	bfcc      	ite	gt
 800653a:	464f      	movgt	r7, r9
 800653c:	2701      	movle	r7, #1
 800653e:	f04f 0800 	mov.w	r8, #0
 8006542:	9a03      	ldr	r2, [sp, #12]
 8006544:	4417      	add	r7, r2
 8006546:	4659      	mov	r1, fp
 8006548:	2201      	movs	r2, #1
 800654a:	4628      	mov	r0, r5
 800654c:	9308      	str	r3, [sp, #32]
 800654e:	f000 fa7b 	bl	8006a48 <__lshift>
 8006552:	4621      	mov	r1, r4
 8006554:	4683      	mov	fp, r0
 8006556:	f000 fae7 	bl	8006b28 <__mcmp>
 800655a:	2800      	cmp	r0, #0
 800655c:	dcb2      	bgt.n	80064c4 <_dtoa_r+0xac4>
 800655e:	d102      	bne.n	8006566 <_dtoa_r+0xb66>
 8006560:	9b08      	ldr	r3, [sp, #32]
 8006562:	07db      	lsls	r3, r3, #31
 8006564:	d4ae      	bmi.n	80064c4 <_dtoa_r+0xac4>
 8006566:	463b      	mov	r3, r7
 8006568:	461f      	mov	r7, r3
 800656a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800656e:	2a30      	cmp	r2, #48	; 0x30
 8006570:	d0fa      	beq.n	8006568 <_dtoa_r+0xb68>
 8006572:	e6f9      	b.n	8006368 <_dtoa_r+0x968>
 8006574:	9a03      	ldr	r2, [sp, #12]
 8006576:	429a      	cmp	r2, r3
 8006578:	d1a5      	bne.n	80064c6 <_dtoa_r+0xac6>
 800657a:	2331      	movs	r3, #49	; 0x31
 800657c:	f10a 0a01 	add.w	sl, sl, #1
 8006580:	e779      	b.n	8006476 <_dtoa_r+0xa76>
 8006582:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <_dtoa_r+0xbd4>)
 8006584:	f7ff baa8 	b.w	8005ad8 <_dtoa_r+0xd8>
 8006588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800658a:	2b00      	cmp	r3, #0
 800658c:	f47f aa81 	bne.w	8005a92 <_dtoa_r+0x92>
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <_dtoa_r+0xbd8>)
 8006592:	f7ff baa1 	b.w	8005ad8 <_dtoa_r+0xd8>
 8006596:	f1b9 0f00 	cmp.w	r9, #0
 800659a:	dc03      	bgt.n	80065a4 <_dtoa_r+0xba4>
 800659c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800659e:	2b02      	cmp	r3, #2
 80065a0:	f73f aecb 	bgt.w	800633a <_dtoa_r+0x93a>
 80065a4:	9f03      	ldr	r7, [sp, #12]
 80065a6:	4621      	mov	r1, r4
 80065a8:	4658      	mov	r0, fp
 80065aa:	f7ff f99b 	bl	80058e4 <quorem>
 80065ae:	9a03      	ldr	r2, [sp, #12]
 80065b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80065b4:	f807 3b01 	strb.w	r3, [r7], #1
 80065b8:	1aba      	subs	r2, r7, r2
 80065ba:	4591      	cmp	r9, r2
 80065bc:	ddba      	ble.n	8006534 <_dtoa_r+0xb34>
 80065be:	4659      	mov	r1, fp
 80065c0:	2300      	movs	r3, #0
 80065c2:	220a      	movs	r2, #10
 80065c4:	4628      	mov	r0, r5
 80065c6:	f000 f893 	bl	80066f0 <__multadd>
 80065ca:	4683      	mov	fp, r0
 80065cc:	e7eb      	b.n	80065a6 <_dtoa_r+0xba6>
 80065ce:	bf00      	nop
 80065d0:	08007f3f 	.word	0x08007f3f
 80065d4:	08007e9c 	.word	0x08007e9c
 80065d8:	08007ec0 	.word	0x08007ec0

080065dc <_localeconv_r>:
 80065dc:	4800      	ldr	r0, [pc, #0]	; (80065e0 <_localeconv_r+0x4>)
 80065de:	4770      	bx	lr
 80065e0:	20000160 	.word	0x20000160

080065e4 <malloc>:
 80065e4:	4b02      	ldr	r3, [pc, #8]	; (80065f0 <malloc+0xc>)
 80065e6:	4601      	mov	r1, r0
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	f000 bc1d 	b.w	8006e28 <_malloc_r>
 80065ee:	bf00      	nop
 80065f0:	2000000c 	.word	0x2000000c

080065f4 <memchr>:
 80065f4:	4603      	mov	r3, r0
 80065f6:	b510      	push	{r4, lr}
 80065f8:	b2c9      	uxtb	r1, r1
 80065fa:	4402      	add	r2, r0
 80065fc:	4293      	cmp	r3, r2
 80065fe:	4618      	mov	r0, r3
 8006600:	d101      	bne.n	8006606 <memchr+0x12>
 8006602:	2000      	movs	r0, #0
 8006604:	e003      	b.n	800660e <memchr+0x1a>
 8006606:	7804      	ldrb	r4, [r0, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	428c      	cmp	r4, r1
 800660c:	d1f6      	bne.n	80065fc <memchr+0x8>
 800660e:	bd10      	pop	{r4, pc}

08006610 <memcpy>:
 8006610:	440a      	add	r2, r1
 8006612:	4291      	cmp	r1, r2
 8006614:	f100 33ff 	add.w	r3, r0, #4294967295
 8006618:	d100      	bne.n	800661c <memcpy+0xc>
 800661a:	4770      	bx	lr
 800661c:	b510      	push	{r4, lr}
 800661e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006622:	4291      	cmp	r1, r2
 8006624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006628:	d1f9      	bne.n	800661e <memcpy+0xe>
 800662a:	bd10      	pop	{r4, pc}

0800662c <_Balloc>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006630:	4604      	mov	r4, r0
 8006632:	460d      	mov	r5, r1
 8006634:	b976      	cbnz	r6, 8006654 <_Balloc+0x28>
 8006636:	2010      	movs	r0, #16
 8006638:	f7ff ffd4 	bl	80065e4 <malloc>
 800663c:	4602      	mov	r2, r0
 800663e:	6260      	str	r0, [r4, #36]	; 0x24
 8006640:	b920      	cbnz	r0, 800664c <_Balloc+0x20>
 8006642:	2166      	movs	r1, #102	; 0x66
 8006644:	4b17      	ldr	r3, [pc, #92]	; (80066a4 <_Balloc+0x78>)
 8006646:	4818      	ldr	r0, [pc, #96]	; (80066a8 <_Balloc+0x7c>)
 8006648:	f000 fdce 	bl	80071e8 <__assert_func>
 800664c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006650:	6006      	str	r6, [r0, #0]
 8006652:	60c6      	str	r6, [r0, #12]
 8006654:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006656:	68f3      	ldr	r3, [r6, #12]
 8006658:	b183      	cbz	r3, 800667c <_Balloc+0x50>
 800665a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006662:	b9b8      	cbnz	r0, 8006694 <_Balloc+0x68>
 8006664:	2101      	movs	r1, #1
 8006666:	fa01 f605 	lsl.w	r6, r1, r5
 800666a:	1d72      	adds	r2, r6, #5
 800666c:	4620      	mov	r0, r4
 800666e:	0092      	lsls	r2, r2, #2
 8006670:	f000 fb5e 	bl	8006d30 <_calloc_r>
 8006674:	b160      	cbz	r0, 8006690 <_Balloc+0x64>
 8006676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800667a:	e00e      	b.n	800669a <_Balloc+0x6e>
 800667c:	2221      	movs	r2, #33	; 0x21
 800667e:	2104      	movs	r1, #4
 8006680:	4620      	mov	r0, r4
 8006682:	f000 fb55 	bl	8006d30 <_calloc_r>
 8006686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006688:	60f0      	str	r0, [r6, #12]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e4      	bne.n	800665a <_Balloc+0x2e>
 8006690:	2000      	movs	r0, #0
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	6802      	ldr	r2, [r0, #0]
 8006696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800669a:	2300      	movs	r3, #0
 800669c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066a0:	e7f7      	b.n	8006692 <_Balloc+0x66>
 80066a2:	bf00      	nop
 80066a4:	08007ecd 	.word	0x08007ecd
 80066a8:	08007f50 	.word	0x08007f50

080066ac <_Bfree>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066b0:	4605      	mov	r5, r0
 80066b2:	460c      	mov	r4, r1
 80066b4:	b976      	cbnz	r6, 80066d4 <_Bfree+0x28>
 80066b6:	2010      	movs	r0, #16
 80066b8:	f7ff ff94 	bl	80065e4 <malloc>
 80066bc:	4602      	mov	r2, r0
 80066be:	6268      	str	r0, [r5, #36]	; 0x24
 80066c0:	b920      	cbnz	r0, 80066cc <_Bfree+0x20>
 80066c2:	218a      	movs	r1, #138	; 0x8a
 80066c4:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <_Bfree+0x3c>)
 80066c6:	4809      	ldr	r0, [pc, #36]	; (80066ec <_Bfree+0x40>)
 80066c8:	f000 fd8e 	bl	80071e8 <__assert_func>
 80066cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066d0:	6006      	str	r6, [r0, #0]
 80066d2:	60c6      	str	r6, [r0, #12]
 80066d4:	b13c      	cbz	r4, 80066e6 <_Bfree+0x3a>
 80066d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066d8:	6862      	ldr	r2, [r4, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066e0:	6021      	str	r1, [r4, #0]
 80066e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	08007ecd 	.word	0x08007ecd
 80066ec:	08007f50 	.word	0x08007f50

080066f0 <__multadd>:
 80066f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f4:	4607      	mov	r7, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	461e      	mov	r6, r3
 80066fa:	2000      	movs	r0, #0
 80066fc:	690d      	ldr	r5, [r1, #16]
 80066fe:	f101 0c14 	add.w	ip, r1, #20
 8006702:	f8dc 3000 	ldr.w	r3, [ip]
 8006706:	3001      	adds	r0, #1
 8006708:	b299      	uxth	r1, r3
 800670a:	fb02 6101 	mla	r1, r2, r1, r6
 800670e:	0c1e      	lsrs	r6, r3, #16
 8006710:	0c0b      	lsrs	r3, r1, #16
 8006712:	fb02 3306 	mla	r3, r2, r6, r3
 8006716:	b289      	uxth	r1, r1
 8006718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800671c:	4285      	cmp	r5, r0
 800671e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006722:	f84c 1b04 	str.w	r1, [ip], #4
 8006726:	dcec      	bgt.n	8006702 <__multadd+0x12>
 8006728:	b30e      	cbz	r6, 800676e <__multadd+0x7e>
 800672a:	68a3      	ldr	r3, [r4, #8]
 800672c:	42ab      	cmp	r3, r5
 800672e:	dc19      	bgt.n	8006764 <__multadd+0x74>
 8006730:	6861      	ldr	r1, [r4, #4]
 8006732:	4638      	mov	r0, r7
 8006734:	3101      	adds	r1, #1
 8006736:	f7ff ff79 	bl	800662c <_Balloc>
 800673a:	4680      	mov	r8, r0
 800673c:	b928      	cbnz	r0, 800674a <__multadd+0x5a>
 800673e:	4602      	mov	r2, r0
 8006740:	21b5      	movs	r1, #181	; 0xb5
 8006742:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <__multadd+0x84>)
 8006744:	480c      	ldr	r0, [pc, #48]	; (8006778 <__multadd+0x88>)
 8006746:	f000 fd4f 	bl	80071e8 <__assert_func>
 800674a:	6922      	ldr	r2, [r4, #16]
 800674c:	f104 010c 	add.w	r1, r4, #12
 8006750:	3202      	adds	r2, #2
 8006752:	0092      	lsls	r2, r2, #2
 8006754:	300c      	adds	r0, #12
 8006756:	f7ff ff5b 	bl	8006610 <memcpy>
 800675a:	4621      	mov	r1, r4
 800675c:	4638      	mov	r0, r7
 800675e:	f7ff ffa5 	bl	80066ac <_Bfree>
 8006762:	4644      	mov	r4, r8
 8006764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006768:	3501      	adds	r5, #1
 800676a:	615e      	str	r6, [r3, #20]
 800676c:	6125      	str	r5, [r4, #16]
 800676e:	4620      	mov	r0, r4
 8006770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006774:	08007f3f 	.word	0x08007f3f
 8006778:	08007f50 	.word	0x08007f50

0800677c <__hi0bits>:
 800677c:	0c02      	lsrs	r2, r0, #16
 800677e:	0412      	lsls	r2, r2, #16
 8006780:	4603      	mov	r3, r0
 8006782:	b9ca      	cbnz	r2, 80067b8 <__hi0bits+0x3c>
 8006784:	0403      	lsls	r3, r0, #16
 8006786:	2010      	movs	r0, #16
 8006788:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800678c:	bf04      	itt	eq
 800678e:	021b      	lsleq	r3, r3, #8
 8006790:	3008      	addeq	r0, #8
 8006792:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006796:	bf04      	itt	eq
 8006798:	011b      	lsleq	r3, r3, #4
 800679a:	3004      	addeq	r0, #4
 800679c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80067a0:	bf04      	itt	eq
 80067a2:	009b      	lsleq	r3, r3, #2
 80067a4:	3002      	addeq	r0, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	db05      	blt.n	80067b6 <__hi0bits+0x3a>
 80067aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80067ae:	f100 0001 	add.w	r0, r0, #1
 80067b2:	bf08      	it	eq
 80067b4:	2020      	moveq	r0, #32
 80067b6:	4770      	bx	lr
 80067b8:	2000      	movs	r0, #0
 80067ba:	e7e5      	b.n	8006788 <__hi0bits+0xc>

080067bc <__lo0bits>:
 80067bc:	6803      	ldr	r3, [r0, #0]
 80067be:	4602      	mov	r2, r0
 80067c0:	f013 0007 	ands.w	r0, r3, #7
 80067c4:	d00b      	beq.n	80067de <__lo0bits+0x22>
 80067c6:	07d9      	lsls	r1, r3, #31
 80067c8:	d421      	bmi.n	800680e <__lo0bits+0x52>
 80067ca:	0798      	lsls	r0, r3, #30
 80067cc:	bf49      	itett	mi
 80067ce:	085b      	lsrmi	r3, r3, #1
 80067d0:	089b      	lsrpl	r3, r3, #2
 80067d2:	2001      	movmi	r0, #1
 80067d4:	6013      	strmi	r3, [r2, #0]
 80067d6:	bf5c      	itt	pl
 80067d8:	2002      	movpl	r0, #2
 80067da:	6013      	strpl	r3, [r2, #0]
 80067dc:	4770      	bx	lr
 80067de:	b299      	uxth	r1, r3
 80067e0:	b909      	cbnz	r1, 80067e6 <__lo0bits+0x2a>
 80067e2:	2010      	movs	r0, #16
 80067e4:	0c1b      	lsrs	r3, r3, #16
 80067e6:	b2d9      	uxtb	r1, r3
 80067e8:	b909      	cbnz	r1, 80067ee <__lo0bits+0x32>
 80067ea:	3008      	adds	r0, #8
 80067ec:	0a1b      	lsrs	r3, r3, #8
 80067ee:	0719      	lsls	r1, r3, #28
 80067f0:	bf04      	itt	eq
 80067f2:	091b      	lsreq	r3, r3, #4
 80067f4:	3004      	addeq	r0, #4
 80067f6:	0799      	lsls	r1, r3, #30
 80067f8:	bf04      	itt	eq
 80067fa:	089b      	lsreq	r3, r3, #2
 80067fc:	3002      	addeq	r0, #2
 80067fe:	07d9      	lsls	r1, r3, #31
 8006800:	d403      	bmi.n	800680a <__lo0bits+0x4e>
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	f100 0001 	add.w	r0, r0, #1
 8006808:	d003      	beq.n	8006812 <__lo0bits+0x56>
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	4770      	bx	lr
 800680e:	2000      	movs	r0, #0
 8006810:	4770      	bx	lr
 8006812:	2020      	movs	r0, #32
 8006814:	4770      	bx	lr
	...

08006818 <__i2b>:
 8006818:	b510      	push	{r4, lr}
 800681a:	460c      	mov	r4, r1
 800681c:	2101      	movs	r1, #1
 800681e:	f7ff ff05 	bl	800662c <_Balloc>
 8006822:	4602      	mov	r2, r0
 8006824:	b928      	cbnz	r0, 8006832 <__i2b+0x1a>
 8006826:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800682a:	4b04      	ldr	r3, [pc, #16]	; (800683c <__i2b+0x24>)
 800682c:	4804      	ldr	r0, [pc, #16]	; (8006840 <__i2b+0x28>)
 800682e:	f000 fcdb 	bl	80071e8 <__assert_func>
 8006832:	2301      	movs	r3, #1
 8006834:	6144      	str	r4, [r0, #20]
 8006836:	6103      	str	r3, [r0, #16]
 8006838:	bd10      	pop	{r4, pc}
 800683a:	bf00      	nop
 800683c:	08007f3f 	.word	0x08007f3f
 8006840:	08007f50 	.word	0x08007f50

08006844 <__multiply>:
 8006844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006848:	4691      	mov	r9, r2
 800684a:	690a      	ldr	r2, [r1, #16]
 800684c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006850:	460c      	mov	r4, r1
 8006852:	429a      	cmp	r2, r3
 8006854:	bfbe      	ittt	lt
 8006856:	460b      	movlt	r3, r1
 8006858:	464c      	movlt	r4, r9
 800685a:	4699      	movlt	r9, r3
 800685c:	6927      	ldr	r7, [r4, #16]
 800685e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	6861      	ldr	r1, [r4, #4]
 8006866:	eb07 060a 	add.w	r6, r7, sl
 800686a:	42b3      	cmp	r3, r6
 800686c:	b085      	sub	sp, #20
 800686e:	bfb8      	it	lt
 8006870:	3101      	addlt	r1, #1
 8006872:	f7ff fedb 	bl	800662c <_Balloc>
 8006876:	b930      	cbnz	r0, 8006886 <__multiply+0x42>
 8006878:	4602      	mov	r2, r0
 800687a:	f240 115d 	movw	r1, #349	; 0x15d
 800687e:	4b43      	ldr	r3, [pc, #268]	; (800698c <__multiply+0x148>)
 8006880:	4843      	ldr	r0, [pc, #268]	; (8006990 <__multiply+0x14c>)
 8006882:	f000 fcb1 	bl	80071e8 <__assert_func>
 8006886:	f100 0514 	add.w	r5, r0, #20
 800688a:	462b      	mov	r3, r5
 800688c:	2200      	movs	r2, #0
 800688e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006892:	4543      	cmp	r3, r8
 8006894:	d321      	bcc.n	80068da <__multiply+0x96>
 8006896:	f104 0314 	add.w	r3, r4, #20
 800689a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800689e:	f109 0314 	add.w	r3, r9, #20
 80068a2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068a6:	9202      	str	r2, [sp, #8]
 80068a8:	1b3a      	subs	r2, r7, r4
 80068aa:	3a15      	subs	r2, #21
 80068ac:	f022 0203 	bic.w	r2, r2, #3
 80068b0:	3204      	adds	r2, #4
 80068b2:	f104 0115 	add.w	r1, r4, #21
 80068b6:	428f      	cmp	r7, r1
 80068b8:	bf38      	it	cc
 80068ba:	2204      	movcc	r2, #4
 80068bc:	9201      	str	r2, [sp, #4]
 80068be:	9a02      	ldr	r2, [sp, #8]
 80068c0:	9303      	str	r3, [sp, #12]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d80c      	bhi.n	80068e0 <__multiply+0x9c>
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	dd03      	ble.n	80068d2 <__multiply+0x8e>
 80068ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d059      	beq.n	8006986 <__multiply+0x142>
 80068d2:	6106      	str	r6, [r0, #16]
 80068d4:	b005      	add	sp, #20
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	f843 2b04 	str.w	r2, [r3], #4
 80068de:	e7d8      	b.n	8006892 <__multiply+0x4e>
 80068e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80068e4:	f1ba 0f00 	cmp.w	sl, #0
 80068e8:	d023      	beq.n	8006932 <__multiply+0xee>
 80068ea:	46a9      	mov	r9, r5
 80068ec:	f04f 0c00 	mov.w	ip, #0
 80068f0:	f104 0e14 	add.w	lr, r4, #20
 80068f4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068f8:	f8d9 1000 	ldr.w	r1, [r9]
 80068fc:	fa1f fb82 	uxth.w	fp, r2
 8006900:	b289      	uxth	r1, r1
 8006902:	fb0a 110b 	mla	r1, sl, fp, r1
 8006906:	4461      	add	r1, ip
 8006908:	f8d9 c000 	ldr.w	ip, [r9]
 800690c:	0c12      	lsrs	r2, r2, #16
 800690e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006912:	fb0a c202 	mla	r2, sl, r2, ip
 8006916:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800691a:	b289      	uxth	r1, r1
 800691c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006920:	4577      	cmp	r7, lr
 8006922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006926:	f849 1b04 	str.w	r1, [r9], #4
 800692a:	d8e3      	bhi.n	80068f4 <__multiply+0xb0>
 800692c:	9a01      	ldr	r2, [sp, #4]
 800692e:	f845 c002 	str.w	ip, [r5, r2]
 8006932:	9a03      	ldr	r2, [sp, #12]
 8006934:	3304      	adds	r3, #4
 8006936:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800693a:	f1b9 0f00 	cmp.w	r9, #0
 800693e:	d020      	beq.n	8006982 <__multiply+0x13e>
 8006940:	46ae      	mov	lr, r5
 8006942:	f04f 0a00 	mov.w	sl, #0
 8006946:	6829      	ldr	r1, [r5, #0]
 8006948:	f104 0c14 	add.w	ip, r4, #20
 800694c:	f8bc b000 	ldrh.w	fp, [ip]
 8006950:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006954:	b289      	uxth	r1, r1
 8006956:	fb09 220b 	mla	r2, r9, fp, r2
 800695a:	4492      	add	sl, r2
 800695c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006960:	f84e 1b04 	str.w	r1, [lr], #4
 8006964:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006968:	f8be 1000 	ldrh.w	r1, [lr]
 800696c:	0c12      	lsrs	r2, r2, #16
 800696e:	fb09 1102 	mla	r1, r9, r2, r1
 8006972:	4567      	cmp	r7, ip
 8006974:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006978:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800697c:	d8e6      	bhi.n	800694c <__multiply+0x108>
 800697e:	9a01      	ldr	r2, [sp, #4]
 8006980:	50a9      	str	r1, [r5, r2]
 8006982:	3504      	adds	r5, #4
 8006984:	e79b      	b.n	80068be <__multiply+0x7a>
 8006986:	3e01      	subs	r6, #1
 8006988:	e79d      	b.n	80068c6 <__multiply+0x82>
 800698a:	bf00      	nop
 800698c:	08007f3f 	.word	0x08007f3f
 8006990:	08007f50 	.word	0x08007f50

08006994 <__pow5mult>:
 8006994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006998:	4615      	mov	r5, r2
 800699a:	f012 0203 	ands.w	r2, r2, #3
 800699e:	4606      	mov	r6, r0
 80069a0:	460f      	mov	r7, r1
 80069a2:	d007      	beq.n	80069b4 <__pow5mult+0x20>
 80069a4:	4c25      	ldr	r4, [pc, #148]	; (8006a3c <__pow5mult+0xa8>)
 80069a6:	3a01      	subs	r2, #1
 80069a8:	2300      	movs	r3, #0
 80069aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069ae:	f7ff fe9f 	bl	80066f0 <__multadd>
 80069b2:	4607      	mov	r7, r0
 80069b4:	10ad      	asrs	r5, r5, #2
 80069b6:	d03d      	beq.n	8006a34 <__pow5mult+0xa0>
 80069b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069ba:	b97c      	cbnz	r4, 80069dc <__pow5mult+0x48>
 80069bc:	2010      	movs	r0, #16
 80069be:	f7ff fe11 	bl	80065e4 <malloc>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6270      	str	r0, [r6, #36]	; 0x24
 80069c6:	b928      	cbnz	r0, 80069d4 <__pow5mult+0x40>
 80069c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069cc:	4b1c      	ldr	r3, [pc, #112]	; (8006a40 <__pow5mult+0xac>)
 80069ce:	481d      	ldr	r0, [pc, #116]	; (8006a44 <__pow5mult+0xb0>)
 80069d0:	f000 fc0a 	bl	80071e8 <__assert_func>
 80069d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069d8:	6004      	str	r4, [r0, #0]
 80069da:	60c4      	str	r4, [r0, #12]
 80069dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069e4:	b94c      	cbnz	r4, 80069fa <__pow5mult+0x66>
 80069e6:	f240 2171 	movw	r1, #625	; 0x271
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7ff ff14 	bl	8006818 <__i2b>
 80069f0:	2300      	movs	r3, #0
 80069f2:	4604      	mov	r4, r0
 80069f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80069f8:	6003      	str	r3, [r0, #0]
 80069fa:	f04f 0900 	mov.w	r9, #0
 80069fe:	07eb      	lsls	r3, r5, #31
 8006a00:	d50a      	bpl.n	8006a18 <__pow5mult+0x84>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4622      	mov	r2, r4
 8006a06:	4630      	mov	r0, r6
 8006a08:	f7ff ff1c 	bl	8006844 <__multiply>
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	4639      	mov	r1, r7
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7ff fe4b 	bl	80066ac <_Bfree>
 8006a16:	4647      	mov	r7, r8
 8006a18:	106d      	asrs	r5, r5, #1
 8006a1a:	d00b      	beq.n	8006a34 <__pow5mult+0xa0>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	b938      	cbnz	r0, 8006a30 <__pow5mult+0x9c>
 8006a20:	4622      	mov	r2, r4
 8006a22:	4621      	mov	r1, r4
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7ff ff0d 	bl	8006844 <__multiply>
 8006a2a:	6020      	str	r0, [r4, #0]
 8006a2c:	f8c0 9000 	str.w	r9, [r0]
 8006a30:	4604      	mov	r4, r0
 8006a32:	e7e4      	b.n	80069fe <__pow5mult+0x6a>
 8006a34:	4638      	mov	r0, r7
 8006a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a3a:	bf00      	nop
 8006a3c:	080080a0 	.word	0x080080a0
 8006a40:	08007ecd 	.word	0x08007ecd
 8006a44:	08007f50 	.word	0x08007f50

08006a48 <__lshift>:
 8006a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	4607      	mov	r7, r0
 8006a50:	4691      	mov	r9, r2
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	6849      	ldr	r1, [r1, #4]
 8006a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a60:	f108 0601 	add.w	r6, r8, #1
 8006a64:	42b3      	cmp	r3, r6
 8006a66:	db0b      	blt.n	8006a80 <__lshift+0x38>
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7ff fddf 	bl	800662c <_Balloc>
 8006a6e:	4605      	mov	r5, r0
 8006a70:	b948      	cbnz	r0, 8006a86 <__lshift+0x3e>
 8006a72:	4602      	mov	r2, r0
 8006a74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a78:	4b29      	ldr	r3, [pc, #164]	; (8006b20 <__lshift+0xd8>)
 8006a7a:	482a      	ldr	r0, [pc, #168]	; (8006b24 <__lshift+0xdc>)
 8006a7c:	f000 fbb4 	bl	80071e8 <__assert_func>
 8006a80:	3101      	adds	r1, #1
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	e7ee      	b.n	8006a64 <__lshift+0x1c>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f100 0114 	add.w	r1, r0, #20
 8006a8c:	f100 0210 	add.w	r2, r0, #16
 8006a90:	4618      	mov	r0, r3
 8006a92:	4553      	cmp	r3, sl
 8006a94:	db37      	blt.n	8006b06 <__lshift+0xbe>
 8006a96:	6920      	ldr	r0, [r4, #16]
 8006a98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a9c:	f104 0314 	add.w	r3, r4, #20
 8006aa0:	f019 091f 	ands.w	r9, r9, #31
 8006aa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006aac:	d02f      	beq.n	8006b0e <__lshift+0xc6>
 8006aae:	468a      	mov	sl, r1
 8006ab0:	f04f 0c00 	mov.w	ip, #0
 8006ab4:	f1c9 0e20 	rsb	lr, r9, #32
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	fa02 f209 	lsl.w	r2, r2, r9
 8006abe:	ea42 020c 	orr.w	r2, r2, ip
 8006ac2:	f84a 2b04 	str.w	r2, [sl], #4
 8006ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aca:	4298      	cmp	r0, r3
 8006acc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ad0:	d8f2      	bhi.n	8006ab8 <__lshift+0x70>
 8006ad2:	1b03      	subs	r3, r0, r4
 8006ad4:	3b15      	subs	r3, #21
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	3304      	adds	r3, #4
 8006adc:	f104 0215 	add.w	r2, r4, #21
 8006ae0:	4290      	cmp	r0, r2
 8006ae2:	bf38      	it	cc
 8006ae4:	2304      	movcc	r3, #4
 8006ae6:	f841 c003 	str.w	ip, [r1, r3]
 8006aea:	f1bc 0f00 	cmp.w	ip, #0
 8006aee:	d001      	beq.n	8006af4 <__lshift+0xac>
 8006af0:	f108 0602 	add.w	r6, r8, #2
 8006af4:	3e01      	subs	r6, #1
 8006af6:	4638      	mov	r0, r7
 8006af8:	4621      	mov	r1, r4
 8006afa:	612e      	str	r6, [r5, #16]
 8006afc:	f7ff fdd6 	bl	80066ac <_Bfree>
 8006b00:	4628      	mov	r0, r5
 8006b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b06:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	e7c1      	b.n	8006a92 <__lshift+0x4a>
 8006b0e:	3904      	subs	r1, #4
 8006b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b14:	4298      	cmp	r0, r3
 8006b16:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b1a:	d8f9      	bhi.n	8006b10 <__lshift+0xc8>
 8006b1c:	e7ea      	b.n	8006af4 <__lshift+0xac>
 8006b1e:	bf00      	nop
 8006b20:	08007f3f 	.word	0x08007f3f
 8006b24:	08007f50 	.word	0x08007f50

08006b28 <__mcmp>:
 8006b28:	4603      	mov	r3, r0
 8006b2a:	690a      	ldr	r2, [r1, #16]
 8006b2c:	6900      	ldr	r0, [r0, #16]
 8006b2e:	b530      	push	{r4, r5, lr}
 8006b30:	1a80      	subs	r0, r0, r2
 8006b32:	d10d      	bne.n	8006b50 <__mcmp+0x28>
 8006b34:	3314      	adds	r3, #20
 8006b36:	3114      	adds	r1, #20
 8006b38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b48:	4295      	cmp	r5, r2
 8006b4a:	d002      	beq.n	8006b52 <__mcmp+0x2a>
 8006b4c:	d304      	bcc.n	8006b58 <__mcmp+0x30>
 8006b4e:	2001      	movs	r0, #1
 8006b50:	bd30      	pop	{r4, r5, pc}
 8006b52:	42a3      	cmp	r3, r4
 8006b54:	d3f4      	bcc.n	8006b40 <__mcmp+0x18>
 8006b56:	e7fb      	b.n	8006b50 <__mcmp+0x28>
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	e7f8      	b.n	8006b50 <__mcmp+0x28>
	...

08006b60 <__mdiff>:
 8006b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	460d      	mov	r5, r1
 8006b66:	4607      	mov	r7, r0
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	f7ff ffdb 	bl	8006b28 <__mcmp>
 8006b72:	1e06      	subs	r6, r0, #0
 8006b74:	d111      	bne.n	8006b9a <__mdiff+0x3a>
 8006b76:	4631      	mov	r1, r6
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f7ff fd57 	bl	800662c <_Balloc>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	b928      	cbnz	r0, 8006b8e <__mdiff+0x2e>
 8006b82:	f240 2132 	movw	r1, #562	; 0x232
 8006b86:	4b3a      	ldr	r3, [pc, #232]	; (8006c70 <__mdiff+0x110>)
 8006b88:	483a      	ldr	r0, [pc, #232]	; (8006c74 <__mdiff+0x114>)
 8006b8a:	f000 fb2d 	bl	80071e8 <__assert_func>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b94:	4610      	mov	r0, r2
 8006b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9a:	bfa4      	itt	ge
 8006b9c:	4623      	movge	r3, r4
 8006b9e:	462c      	movge	r4, r5
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	6861      	ldr	r1, [r4, #4]
 8006ba4:	bfa6      	itte	ge
 8006ba6:	461d      	movge	r5, r3
 8006ba8:	2600      	movge	r6, #0
 8006baa:	2601      	movlt	r6, #1
 8006bac:	f7ff fd3e 	bl	800662c <_Balloc>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	b918      	cbnz	r0, 8006bbc <__mdiff+0x5c>
 8006bb4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006bb8:	4b2d      	ldr	r3, [pc, #180]	; (8006c70 <__mdiff+0x110>)
 8006bba:	e7e5      	b.n	8006b88 <__mdiff+0x28>
 8006bbc:	f102 0814 	add.w	r8, r2, #20
 8006bc0:	46c2      	mov	sl, r8
 8006bc2:	f04f 0c00 	mov.w	ip, #0
 8006bc6:	6927      	ldr	r7, [r4, #16]
 8006bc8:	60c6      	str	r6, [r0, #12]
 8006bca:	692e      	ldr	r6, [r5, #16]
 8006bcc:	f104 0014 	add.w	r0, r4, #20
 8006bd0:	f105 0914 	add.w	r9, r5, #20
 8006bd4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006bd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bdc:	3410      	adds	r4, #16
 8006bde:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006be2:	f859 3b04 	ldr.w	r3, [r9], #4
 8006be6:	fa1f f18b 	uxth.w	r1, fp
 8006bea:	448c      	add	ip, r1
 8006bec:	b299      	uxth	r1, r3
 8006bee:	0c1b      	lsrs	r3, r3, #16
 8006bf0:	ebac 0101 	sub.w	r1, ip, r1
 8006bf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bf8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bfc:	b289      	uxth	r1, r1
 8006bfe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c02:	454e      	cmp	r6, r9
 8006c04:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c08:	f84a 3b04 	str.w	r3, [sl], #4
 8006c0c:	d8e7      	bhi.n	8006bde <__mdiff+0x7e>
 8006c0e:	1b73      	subs	r3, r6, r5
 8006c10:	3b15      	subs	r3, #21
 8006c12:	f023 0303 	bic.w	r3, r3, #3
 8006c16:	3515      	adds	r5, #21
 8006c18:	3304      	adds	r3, #4
 8006c1a:	42ae      	cmp	r6, r5
 8006c1c:	bf38      	it	cc
 8006c1e:	2304      	movcc	r3, #4
 8006c20:	4418      	add	r0, r3
 8006c22:	4443      	add	r3, r8
 8006c24:	461e      	mov	r6, r3
 8006c26:	4605      	mov	r5, r0
 8006c28:	4575      	cmp	r5, lr
 8006c2a:	d30e      	bcc.n	8006c4a <__mdiff+0xea>
 8006c2c:	f10e 0103 	add.w	r1, lr, #3
 8006c30:	1a09      	subs	r1, r1, r0
 8006c32:	f021 0103 	bic.w	r1, r1, #3
 8006c36:	3803      	subs	r0, #3
 8006c38:	4586      	cmp	lr, r0
 8006c3a:	bf38      	it	cc
 8006c3c:	2100      	movcc	r1, #0
 8006c3e:	4419      	add	r1, r3
 8006c40:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006c44:	b18b      	cbz	r3, 8006c6a <__mdiff+0x10a>
 8006c46:	6117      	str	r7, [r2, #16]
 8006c48:	e7a4      	b.n	8006b94 <__mdiff+0x34>
 8006c4a:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c4e:	fa1f f188 	uxth.w	r1, r8
 8006c52:	4461      	add	r1, ip
 8006c54:	140c      	asrs	r4, r1, #16
 8006c56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c5a:	b289      	uxth	r1, r1
 8006c5c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c60:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c64:	f846 1b04 	str.w	r1, [r6], #4
 8006c68:	e7de      	b.n	8006c28 <__mdiff+0xc8>
 8006c6a:	3f01      	subs	r7, #1
 8006c6c:	e7e8      	b.n	8006c40 <__mdiff+0xe0>
 8006c6e:	bf00      	nop
 8006c70:	08007f3f 	.word	0x08007f3f
 8006c74:	08007f50 	.word	0x08007f50

08006c78 <__d2b>:
 8006c78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006c82:	4690      	mov	r8, r2
 8006c84:	461d      	mov	r5, r3
 8006c86:	f7ff fcd1 	bl	800662c <_Balloc>
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	b930      	cbnz	r0, 8006c9c <__d2b+0x24>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	f240 310a 	movw	r1, #778	; 0x30a
 8006c94:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <__d2b+0xb0>)
 8006c96:	4825      	ldr	r0, [pc, #148]	; (8006d2c <__d2b+0xb4>)
 8006c98:	f000 faa6 	bl	80071e8 <__assert_func>
 8006c9c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006ca0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006ca4:	bb2d      	cbnz	r5, 8006cf2 <__d2b+0x7a>
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	f1b8 0300 	subs.w	r3, r8, #0
 8006cac:	d026      	beq.n	8006cfc <__d2b+0x84>
 8006cae:	4668      	mov	r0, sp
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	f7ff fd83 	bl	80067bc <__lo0bits>
 8006cb6:	9900      	ldr	r1, [sp, #0]
 8006cb8:	b1f0      	cbz	r0, 8006cf8 <__d2b+0x80>
 8006cba:	9a01      	ldr	r2, [sp, #4]
 8006cbc:	f1c0 0320 	rsb	r3, r0, #32
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	40c2      	lsrs	r2, r0
 8006cc8:	6163      	str	r3, [r4, #20]
 8006cca:	9201      	str	r2, [sp, #4]
 8006ccc:	9b01      	ldr	r3, [sp, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bf14      	ite	ne
 8006cd2:	2102      	movne	r1, #2
 8006cd4:	2101      	moveq	r1, #1
 8006cd6:	61a3      	str	r3, [r4, #24]
 8006cd8:	6121      	str	r1, [r4, #16]
 8006cda:	b1c5      	cbz	r5, 8006d0e <__d2b+0x96>
 8006cdc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ce0:	4405      	add	r5, r0
 8006ce2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ce6:	603d      	str	r5, [r7, #0]
 8006ce8:	6030      	str	r0, [r6, #0]
 8006cea:	4620      	mov	r0, r4
 8006cec:	b002      	add	sp, #8
 8006cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf6:	e7d6      	b.n	8006ca6 <__d2b+0x2e>
 8006cf8:	6161      	str	r1, [r4, #20]
 8006cfa:	e7e7      	b.n	8006ccc <__d2b+0x54>
 8006cfc:	a801      	add	r0, sp, #4
 8006cfe:	f7ff fd5d 	bl	80067bc <__lo0bits>
 8006d02:	2101      	movs	r1, #1
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	6121      	str	r1, [r4, #16]
 8006d08:	6163      	str	r3, [r4, #20]
 8006d0a:	3020      	adds	r0, #32
 8006d0c:	e7e5      	b.n	8006cda <__d2b+0x62>
 8006d0e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006d12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d16:	6038      	str	r0, [r7, #0]
 8006d18:	6918      	ldr	r0, [r3, #16]
 8006d1a:	f7ff fd2f 	bl	800677c <__hi0bits>
 8006d1e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006d22:	6031      	str	r1, [r6, #0]
 8006d24:	e7e1      	b.n	8006cea <__d2b+0x72>
 8006d26:	bf00      	nop
 8006d28:	08007f3f 	.word	0x08007f3f
 8006d2c:	08007f50 	.word	0x08007f50

08006d30 <_calloc_r>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	fba1 5402 	umull	r5, r4, r1, r2
 8006d36:	b934      	cbnz	r4, 8006d46 <_calloc_r+0x16>
 8006d38:	4629      	mov	r1, r5
 8006d3a:	f000 f875 	bl	8006e28 <_malloc_r>
 8006d3e:	4606      	mov	r6, r0
 8006d40:	b928      	cbnz	r0, 8006d4e <_calloc_r+0x1e>
 8006d42:	4630      	mov	r0, r6
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	220c      	movs	r2, #12
 8006d48:	2600      	movs	r6, #0
 8006d4a:	6002      	str	r2, [r0, #0]
 8006d4c:	e7f9      	b.n	8006d42 <_calloc_r+0x12>
 8006d4e:	462a      	mov	r2, r5
 8006d50:	4621      	mov	r1, r4
 8006d52:	f7fe f93f 	bl	8004fd4 <memset>
 8006d56:	e7f4      	b.n	8006d42 <_calloc_r+0x12>

08006d58 <_free_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d040      	beq.n	8006de2 <_free_r+0x8a>
 8006d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d64:	1f0c      	subs	r4, r1, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	bfb8      	it	lt
 8006d6a:	18e4      	addlt	r4, r4, r3
 8006d6c:	f000 fa98 	bl	80072a0 <__malloc_lock>
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <_free_r+0x8c>)
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	b933      	cbnz	r3, 8006d84 <_free_r+0x2c>
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	6014      	str	r4, [r2, #0]
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d80:	f000 ba94 	b.w	80072ac <__malloc_unlock>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d908      	bls.n	8006d9a <_free_r+0x42>
 8006d88:	6820      	ldr	r0, [r4, #0]
 8006d8a:	1821      	adds	r1, r4, r0
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf01      	itttt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	1809      	addeq	r1, r1, r0
 8006d96:	6021      	streq	r1, [r4, #0]
 8006d98:	e7ed      	b.n	8006d76 <_free_r+0x1e>
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b10b      	cbz	r3, 8006da4 <_free_r+0x4c>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d9fa      	bls.n	8006d9a <_free_r+0x42>
 8006da4:	6811      	ldr	r1, [r2, #0]
 8006da6:	1850      	adds	r0, r2, r1
 8006da8:	42a0      	cmp	r0, r4
 8006daa:	d10b      	bne.n	8006dc4 <_free_r+0x6c>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	4401      	add	r1, r0
 8006db0:	1850      	adds	r0, r2, r1
 8006db2:	4283      	cmp	r3, r0
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	d1e0      	bne.n	8006d7a <_free_r+0x22>
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4401      	add	r1, r0
 8006dbe:	6011      	str	r1, [r2, #0]
 8006dc0:	6053      	str	r3, [r2, #4]
 8006dc2:	e7da      	b.n	8006d7a <_free_r+0x22>
 8006dc4:	d902      	bls.n	8006dcc <_free_r+0x74>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	e7d6      	b.n	8006d7a <_free_r+0x22>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	1821      	adds	r1, r4, r0
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf01      	itttt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	6054      	str	r4, [r2, #4]
 8006de0:	e7cb      	b.n	8006d7a <_free_r+0x22>
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20000360 	.word	0x20000360

08006de8 <sbrk_aligned>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	4e0e      	ldr	r6, [pc, #56]	; (8006e24 <sbrk_aligned+0x3c>)
 8006dec:	460c      	mov	r4, r1
 8006dee:	6831      	ldr	r1, [r6, #0]
 8006df0:	4605      	mov	r5, r0
 8006df2:	b911      	cbnz	r1, 8006dfa <sbrk_aligned+0x12>
 8006df4:	f000 f9e8 	bl	80071c8 <_sbrk_r>
 8006df8:	6030      	str	r0, [r6, #0]
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f000 f9e3 	bl	80071c8 <_sbrk_r>
 8006e02:	1c43      	adds	r3, r0, #1
 8006e04:	d00a      	beq.n	8006e1c <sbrk_aligned+0x34>
 8006e06:	1cc4      	adds	r4, r0, #3
 8006e08:	f024 0403 	bic.w	r4, r4, #3
 8006e0c:	42a0      	cmp	r0, r4
 8006e0e:	d007      	beq.n	8006e20 <sbrk_aligned+0x38>
 8006e10:	1a21      	subs	r1, r4, r0
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 f9d8 	bl	80071c8 <_sbrk_r>
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d101      	bne.n	8006e20 <sbrk_aligned+0x38>
 8006e1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e20:	4620      	mov	r0, r4
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	20000364 	.word	0x20000364

08006e28 <_malloc_r>:
 8006e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2c:	1ccd      	adds	r5, r1, #3
 8006e2e:	f025 0503 	bic.w	r5, r5, #3
 8006e32:	3508      	adds	r5, #8
 8006e34:	2d0c      	cmp	r5, #12
 8006e36:	bf38      	it	cc
 8006e38:	250c      	movcc	r5, #12
 8006e3a:	2d00      	cmp	r5, #0
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	db01      	blt.n	8006e44 <_malloc_r+0x1c>
 8006e40:	42a9      	cmp	r1, r5
 8006e42:	d905      	bls.n	8006e50 <_malloc_r+0x28>
 8006e44:	230c      	movs	r3, #12
 8006e46:	2600      	movs	r6, #0
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e50:	4e2e      	ldr	r6, [pc, #184]	; (8006f0c <_malloc_r+0xe4>)
 8006e52:	f000 fa25 	bl	80072a0 <__malloc_lock>
 8006e56:	6833      	ldr	r3, [r6, #0]
 8006e58:	461c      	mov	r4, r3
 8006e5a:	bb34      	cbnz	r4, 8006eaa <_malloc_r+0x82>
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f7ff ffc2 	bl	8006de8 <sbrk_aligned>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	4604      	mov	r4, r0
 8006e68:	d14d      	bne.n	8006f06 <_malloc_r+0xde>
 8006e6a:	6834      	ldr	r4, [r6, #0]
 8006e6c:	4626      	mov	r6, r4
 8006e6e:	2e00      	cmp	r6, #0
 8006e70:	d140      	bne.n	8006ef4 <_malloc_r+0xcc>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	4631      	mov	r1, r6
 8006e76:	4638      	mov	r0, r7
 8006e78:	eb04 0803 	add.w	r8, r4, r3
 8006e7c:	f000 f9a4 	bl	80071c8 <_sbrk_r>
 8006e80:	4580      	cmp	r8, r0
 8006e82:	d13a      	bne.n	8006efa <_malloc_r+0xd2>
 8006e84:	6821      	ldr	r1, [r4, #0]
 8006e86:	3503      	adds	r5, #3
 8006e88:	1a6d      	subs	r5, r5, r1
 8006e8a:	f025 0503 	bic.w	r5, r5, #3
 8006e8e:	3508      	adds	r5, #8
 8006e90:	2d0c      	cmp	r5, #12
 8006e92:	bf38      	it	cc
 8006e94:	250c      	movcc	r5, #12
 8006e96:	4638      	mov	r0, r7
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f7ff ffa5 	bl	8006de8 <sbrk_aligned>
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d02b      	beq.n	8006efa <_malloc_r+0xd2>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	442b      	add	r3, r5
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	e00e      	b.n	8006ec8 <_malloc_r+0xa0>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	1b52      	subs	r2, r2, r5
 8006eae:	d41e      	bmi.n	8006eee <_malloc_r+0xc6>
 8006eb0:	2a0b      	cmp	r2, #11
 8006eb2:	d916      	bls.n	8006ee2 <_malloc_r+0xba>
 8006eb4:	1961      	adds	r1, r4, r5
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	6025      	str	r5, [r4, #0]
 8006eba:	bf18      	it	ne
 8006ebc:	6059      	strne	r1, [r3, #4]
 8006ebe:	6863      	ldr	r3, [r4, #4]
 8006ec0:	bf08      	it	eq
 8006ec2:	6031      	streq	r1, [r6, #0]
 8006ec4:	5162      	str	r2, [r4, r5]
 8006ec6:	604b      	str	r3, [r1, #4]
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f104 060b 	add.w	r6, r4, #11
 8006ece:	f000 f9ed 	bl	80072ac <__malloc_unlock>
 8006ed2:	f026 0607 	bic.w	r6, r6, #7
 8006ed6:	1d23      	adds	r3, r4, #4
 8006ed8:	1af2      	subs	r2, r6, r3
 8006eda:	d0b6      	beq.n	8006e4a <_malloc_r+0x22>
 8006edc:	1b9b      	subs	r3, r3, r6
 8006ede:	50a3      	str	r3, [r4, r2]
 8006ee0:	e7b3      	b.n	8006e4a <_malloc_r+0x22>
 8006ee2:	6862      	ldr	r2, [r4, #4]
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	bf0c      	ite	eq
 8006ee8:	6032      	streq	r2, [r6, #0]
 8006eea:	605a      	strne	r2, [r3, #4]
 8006eec:	e7ec      	b.n	8006ec8 <_malloc_r+0xa0>
 8006eee:	4623      	mov	r3, r4
 8006ef0:	6864      	ldr	r4, [r4, #4]
 8006ef2:	e7b2      	b.n	8006e5a <_malloc_r+0x32>
 8006ef4:	4634      	mov	r4, r6
 8006ef6:	6876      	ldr	r6, [r6, #4]
 8006ef8:	e7b9      	b.n	8006e6e <_malloc_r+0x46>
 8006efa:	230c      	movs	r3, #12
 8006efc:	4638      	mov	r0, r7
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	f000 f9d4 	bl	80072ac <__malloc_unlock>
 8006f04:	e7a1      	b.n	8006e4a <_malloc_r+0x22>
 8006f06:	6025      	str	r5, [r4, #0]
 8006f08:	e7de      	b.n	8006ec8 <_malloc_r+0xa0>
 8006f0a:	bf00      	nop
 8006f0c:	20000360 	.word	0x20000360

08006f10 <__ssputs_r>:
 8006f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	688e      	ldr	r6, [r1, #8]
 8006f16:	4682      	mov	sl, r0
 8006f18:	429e      	cmp	r6, r3
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	4690      	mov	r8, r2
 8006f1e:	461f      	mov	r7, r3
 8006f20:	d838      	bhi.n	8006f94 <__ssputs_r+0x84>
 8006f22:	898a      	ldrh	r2, [r1, #12]
 8006f24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f28:	d032      	beq.n	8006f90 <__ssputs_r+0x80>
 8006f2a:	6825      	ldr	r5, [r4, #0]
 8006f2c:	6909      	ldr	r1, [r1, #16]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	eba5 0901 	sub.w	r9, r5, r1
 8006f34:	6965      	ldr	r5, [r4, #20]
 8006f36:	444b      	add	r3, r9
 8006f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f40:	106d      	asrs	r5, r5, #1
 8006f42:	429d      	cmp	r5, r3
 8006f44:	bf38      	it	cc
 8006f46:	461d      	movcc	r5, r3
 8006f48:	0553      	lsls	r3, r2, #21
 8006f4a:	d531      	bpl.n	8006fb0 <__ssputs_r+0xa0>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	f7ff ff6b 	bl	8006e28 <_malloc_r>
 8006f52:	4606      	mov	r6, r0
 8006f54:	b950      	cbnz	r0, 8006f6c <__ssputs_r+0x5c>
 8006f56:	230c      	movs	r3, #12
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	f8ca 3000 	str.w	r3, [sl]
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6c:	464a      	mov	r2, r9
 8006f6e:	6921      	ldr	r1, [r4, #16]
 8006f70:	f7ff fb4e 	bl	8006610 <memcpy>
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	6126      	str	r6, [r4, #16]
 8006f82:	444e      	add	r6, r9
 8006f84:	6026      	str	r6, [r4, #0]
 8006f86:	463e      	mov	r6, r7
 8006f88:	6165      	str	r5, [r4, #20]
 8006f8a:	eba5 0509 	sub.w	r5, r5, r9
 8006f8e:	60a5      	str	r5, [r4, #8]
 8006f90:	42be      	cmp	r6, r7
 8006f92:	d900      	bls.n	8006f96 <__ssputs_r+0x86>
 8006f94:	463e      	mov	r6, r7
 8006f96:	4632      	mov	r2, r6
 8006f98:	4641      	mov	r1, r8
 8006f9a:	6820      	ldr	r0, [r4, #0]
 8006f9c:	f000 f966 	bl	800726c <memmove>
 8006fa0:	68a3      	ldr	r3, [r4, #8]
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	1b9b      	subs	r3, r3, r6
 8006fa6:	60a3      	str	r3, [r4, #8]
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	4433      	add	r3, r6
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	e7db      	b.n	8006f68 <__ssputs_r+0x58>
 8006fb0:	462a      	mov	r2, r5
 8006fb2:	f000 f981 	bl	80072b8 <_realloc_r>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d1e1      	bne.n	8006f80 <__ssputs_r+0x70>
 8006fbc:	4650      	mov	r0, sl
 8006fbe:	6921      	ldr	r1, [r4, #16]
 8006fc0:	f7ff feca 	bl	8006d58 <_free_r>
 8006fc4:	e7c7      	b.n	8006f56 <__ssputs_r+0x46>
	...

08006fc8 <_svfiprintf_r>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	4698      	mov	r8, r3
 8006fce:	898b      	ldrh	r3, [r1, #12]
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	061b      	lsls	r3, r3, #24
 8006fd4:	460d      	mov	r5, r1
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	b09d      	sub	sp, #116	; 0x74
 8006fda:	d50e      	bpl.n	8006ffa <_svfiprintf_r+0x32>
 8006fdc:	690b      	ldr	r3, [r1, #16]
 8006fde:	b963      	cbnz	r3, 8006ffa <_svfiprintf_r+0x32>
 8006fe0:	2140      	movs	r1, #64	; 0x40
 8006fe2:	f7ff ff21 	bl	8006e28 <_malloc_r>
 8006fe6:	6028      	str	r0, [r5, #0]
 8006fe8:	6128      	str	r0, [r5, #16]
 8006fea:	b920      	cbnz	r0, 8006ff6 <_svfiprintf_r+0x2e>
 8006fec:	230c      	movs	r3, #12
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	e0d1      	b.n	800719a <_svfiprintf_r+0x1d2>
 8006ff6:	2340      	movs	r3, #64	; 0x40
 8006ff8:	616b      	str	r3, [r5, #20]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffe:	2320      	movs	r3, #32
 8007000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007004:	2330      	movs	r3, #48	; 0x30
 8007006:	f04f 0901 	mov.w	r9, #1
 800700a:	f8cd 800c 	str.w	r8, [sp, #12]
 800700e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071b4 <_svfiprintf_r+0x1ec>
 8007012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007016:	4623      	mov	r3, r4
 8007018:	469a      	mov	sl, r3
 800701a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800701e:	b10a      	cbz	r2, 8007024 <_svfiprintf_r+0x5c>
 8007020:	2a25      	cmp	r2, #37	; 0x25
 8007022:	d1f9      	bne.n	8007018 <_svfiprintf_r+0x50>
 8007024:	ebba 0b04 	subs.w	fp, sl, r4
 8007028:	d00b      	beq.n	8007042 <_svfiprintf_r+0x7a>
 800702a:	465b      	mov	r3, fp
 800702c:	4622      	mov	r2, r4
 800702e:	4629      	mov	r1, r5
 8007030:	4638      	mov	r0, r7
 8007032:	f7ff ff6d 	bl	8006f10 <__ssputs_r>
 8007036:	3001      	adds	r0, #1
 8007038:	f000 80aa 	beq.w	8007190 <_svfiprintf_r+0x1c8>
 800703c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800703e:	445a      	add	r2, fp
 8007040:	9209      	str	r2, [sp, #36]	; 0x24
 8007042:	f89a 3000 	ldrb.w	r3, [sl]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 80a2 	beq.w	8007190 <_svfiprintf_r+0x1c8>
 800704c:	2300      	movs	r3, #0
 800704e:	f04f 32ff 	mov.w	r2, #4294967295
 8007052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007056:	f10a 0a01 	add.w	sl, sl, #1
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	9307      	str	r3, [sp, #28]
 800705e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007062:	931a      	str	r3, [sp, #104]	; 0x68
 8007064:	4654      	mov	r4, sl
 8007066:	2205      	movs	r2, #5
 8007068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706c:	4851      	ldr	r0, [pc, #324]	; (80071b4 <_svfiprintf_r+0x1ec>)
 800706e:	f7ff fac1 	bl	80065f4 <memchr>
 8007072:	9a04      	ldr	r2, [sp, #16]
 8007074:	b9d8      	cbnz	r0, 80070ae <_svfiprintf_r+0xe6>
 8007076:	06d0      	lsls	r0, r2, #27
 8007078:	bf44      	itt	mi
 800707a:	2320      	movmi	r3, #32
 800707c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007080:	0711      	lsls	r1, r2, #28
 8007082:	bf44      	itt	mi
 8007084:	232b      	movmi	r3, #43	; 0x2b
 8007086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800708a:	f89a 3000 	ldrb.w	r3, [sl]
 800708e:	2b2a      	cmp	r3, #42	; 0x2a
 8007090:	d015      	beq.n	80070be <_svfiprintf_r+0xf6>
 8007092:	4654      	mov	r4, sl
 8007094:	2000      	movs	r0, #0
 8007096:	f04f 0c0a 	mov.w	ip, #10
 800709a:	9a07      	ldr	r2, [sp, #28]
 800709c:	4621      	mov	r1, r4
 800709e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070a2:	3b30      	subs	r3, #48	; 0x30
 80070a4:	2b09      	cmp	r3, #9
 80070a6:	d94e      	bls.n	8007146 <_svfiprintf_r+0x17e>
 80070a8:	b1b0      	cbz	r0, 80070d8 <_svfiprintf_r+0x110>
 80070aa:	9207      	str	r2, [sp, #28]
 80070ac:	e014      	b.n	80070d8 <_svfiprintf_r+0x110>
 80070ae:	eba0 0308 	sub.w	r3, r0, r8
 80070b2:	fa09 f303 	lsl.w	r3, r9, r3
 80070b6:	4313      	orrs	r3, r2
 80070b8:	46a2      	mov	sl, r4
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	e7d2      	b.n	8007064 <_svfiprintf_r+0x9c>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	1d19      	adds	r1, r3, #4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	9103      	str	r1, [sp, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfbb      	ittet	lt
 80070ca:	425b      	neglt	r3, r3
 80070cc:	f042 0202 	orrlt.w	r2, r2, #2
 80070d0:	9307      	strge	r3, [sp, #28]
 80070d2:	9307      	strlt	r3, [sp, #28]
 80070d4:	bfb8      	it	lt
 80070d6:	9204      	strlt	r2, [sp, #16]
 80070d8:	7823      	ldrb	r3, [r4, #0]
 80070da:	2b2e      	cmp	r3, #46	; 0x2e
 80070dc:	d10c      	bne.n	80070f8 <_svfiprintf_r+0x130>
 80070de:	7863      	ldrb	r3, [r4, #1]
 80070e0:	2b2a      	cmp	r3, #42	; 0x2a
 80070e2:	d135      	bne.n	8007150 <_svfiprintf_r+0x188>
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	3402      	adds	r4, #2
 80070e8:	1d1a      	adds	r2, r3, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	9203      	str	r2, [sp, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bfb8      	it	lt
 80070f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80071b8 <_svfiprintf_r+0x1f0>
 80070fc:	2203      	movs	r2, #3
 80070fe:	4650      	mov	r0, sl
 8007100:	7821      	ldrb	r1, [r4, #0]
 8007102:	f7ff fa77 	bl	80065f4 <memchr>
 8007106:	b140      	cbz	r0, 800711a <_svfiprintf_r+0x152>
 8007108:	2340      	movs	r3, #64	; 0x40
 800710a:	eba0 000a 	sub.w	r0, r0, sl
 800710e:	fa03 f000 	lsl.w	r0, r3, r0
 8007112:	9b04      	ldr	r3, [sp, #16]
 8007114:	3401      	adds	r4, #1
 8007116:	4303      	orrs	r3, r0
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711e:	2206      	movs	r2, #6
 8007120:	4826      	ldr	r0, [pc, #152]	; (80071bc <_svfiprintf_r+0x1f4>)
 8007122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007126:	f7ff fa65 	bl	80065f4 <memchr>
 800712a:	2800      	cmp	r0, #0
 800712c:	d038      	beq.n	80071a0 <_svfiprintf_r+0x1d8>
 800712e:	4b24      	ldr	r3, [pc, #144]	; (80071c0 <_svfiprintf_r+0x1f8>)
 8007130:	bb1b      	cbnz	r3, 800717a <_svfiprintf_r+0x1b2>
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	3307      	adds	r3, #7
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	3308      	adds	r3, #8
 800713c:	9303      	str	r3, [sp, #12]
 800713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007140:	4433      	add	r3, r6
 8007142:	9309      	str	r3, [sp, #36]	; 0x24
 8007144:	e767      	b.n	8007016 <_svfiprintf_r+0x4e>
 8007146:	460c      	mov	r4, r1
 8007148:	2001      	movs	r0, #1
 800714a:	fb0c 3202 	mla	r2, ip, r2, r3
 800714e:	e7a5      	b.n	800709c <_svfiprintf_r+0xd4>
 8007150:	2300      	movs	r3, #0
 8007152:	f04f 0c0a 	mov.w	ip, #10
 8007156:	4619      	mov	r1, r3
 8007158:	3401      	adds	r4, #1
 800715a:	9305      	str	r3, [sp, #20]
 800715c:	4620      	mov	r0, r4
 800715e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007162:	3a30      	subs	r2, #48	; 0x30
 8007164:	2a09      	cmp	r2, #9
 8007166:	d903      	bls.n	8007170 <_svfiprintf_r+0x1a8>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0c5      	beq.n	80070f8 <_svfiprintf_r+0x130>
 800716c:	9105      	str	r1, [sp, #20]
 800716e:	e7c3      	b.n	80070f8 <_svfiprintf_r+0x130>
 8007170:	4604      	mov	r4, r0
 8007172:	2301      	movs	r3, #1
 8007174:	fb0c 2101 	mla	r1, ip, r1, r2
 8007178:	e7f0      	b.n	800715c <_svfiprintf_r+0x194>
 800717a:	ab03      	add	r3, sp, #12
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	462a      	mov	r2, r5
 8007180:	4638      	mov	r0, r7
 8007182:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <_svfiprintf_r+0x1fc>)
 8007184:	a904      	add	r1, sp, #16
 8007186:	f7fd ffcb 	bl	8005120 <_printf_float>
 800718a:	1c42      	adds	r2, r0, #1
 800718c:	4606      	mov	r6, r0
 800718e:	d1d6      	bne.n	800713e <_svfiprintf_r+0x176>
 8007190:	89ab      	ldrh	r3, [r5, #12]
 8007192:	065b      	lsls	r3, r3, #25
 8007194:	f53f af2c 	bmi.w	8006ff0 <_svfiprintf_r+0x28>
 8007198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800719a:	b01d      	add	sp, #116	; 0x74
 800719c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a0:	ab03      	add	r3, sp, #12
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	462a      	mov	r2, r5
 80071a6:	4638      	mov	r0, r7
 80071a8:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <_svfiprintf_r+0x1fc>)
 80071aa:	a904      	add	r1, sp, #16
 80071ac:	f7fe fa54 	bl	8005658 <_printf_i>
 80071b0:	e7eb      	b.n	800718a <_svfiprintf_r+0x1c2>
 80071b2:	bf00      	nop
 80071b4:	080080ac 	.word	0x080080ac
 80071b8:	080080b2 	.word	0x080080b2
 80071bc:	080080b6 	.word	0x080080b6
 80071c0:	08005121 	.word	0x08005121
 80071c4:	08006f11 	.word	0x08006f11

080071c8 <_sbrk_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	2300      	movs	r3, #0
 80071cc:	4d05      	ldr	r5, [pc, #20]	; (80071e4 <_sbrk_r+0x1c>)
 80071ce:	4604      	mov	r4, r0
 80071d0:	4608      	mov	r0, r1
 80071d2:	602b      	str	r3, [r5, #0]
 80071d4:	f7fa ff3e 	bl	8002054 <_sbrk>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_sbrk_r+0x1a>
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_sbrk_r+0x1a>
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	20000368 	.word	0x20000368

080071e8 <__assert_func>:
 80071e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ea:	4614      	mov	r4, r2
 80071ec:	461a      	mov	r2, r3
 80071ee:	4b09      	ldr	r3, [pc, #36]	; (8007214 <__assert_func+0x2c>)
 80071f0:	4605      	mov	r5, r0
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68d8      	ldr	r0, [r3, #12]
 80071f6:	b14c      	cbz	r4, 800720c <__assert_func+0x24>
 80071f8:	4b07      	ldr	r3, [pc, #28]	; (8007218 <__assert_func+0x30>)
 80071fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071fe:	9100      	str	r1, [sp, #0]
 8007200:	462b      	mov	r3, r5
 8007202:	4906      	ldr	r1, [pc, #24]	; (800721c <__assert_func+0x34>)
 8007204:	f000 f80e 	bl	8007224 <fiprintf>
 8007208:	f000 faaa 	bl	8007760 <abort>
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <__assert_func+0x38>)
 800720e:	461c      	mov	r4, r3
 8007210:	e7f3      	b.n	80071fa <__assert_func+0x12>
 8007212:	bf00      	nop
 8007214:	2000000c 	.word	0x2000000c
 8007218:	080080bd 	.word	0x080080bd
 800721c:	080080ca 	.word	0x080080ca
 8007220:	080080f8 	.word	0x080080f8

08007224 <fiprintf>:
 8007224:	b40e      	push	{r1, r2, r3}
 8007226:	b503      	push	{r0, r1, lr}
 8007228:	4601      	mov	r1, r0
 800722a:	ab03      	add	r3, sp, #12
 800722c:	4805      	ldr	r0, [pc, #20]	; (8007244 <fiprintf+0x20>)
 800722e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007232:	6800      	ldr	r0, [r0, #0]
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	f000 f895 	bl	8007364 <_vfiprintf_r>
 800723a:	b002      	add	sp, #8
 800723c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007240:	b003      	add	sp, #12
 8007242:	4770      	bx	lr
 8007244:	2000000c 	.word	0x2000000c

08007248 <__ascii_mbtowc>:
 8007248:	b082      	sub	sp, #8
 800724a:	b901      	cbnz	r1, 800724e <__ascii_mbtowc+0x6>
 800724c:	a901      	add	r1, sp, #4
 800724e:	b142      	cbz	r2, 8007262 <__ascii_mbtowc+0x1a>
 8007250:	b14b      	cbz	r3, 8007266 <__ascii_mbtowc+0x1e>
 8007252:	7813      	ldrb	r3, [r2, #0]
 8007254:	600b      	str	r3, [r1, #0]
 8007256:	7812      	ldrb	r2, [r2, #0]
 8007258:	1e10      	subs	r0, r2, #0
 800725a:	bf18      	it	ne
 800725c:	2001      	movne	r0, #1
 800725e:	b002      	add	sp, #8
 8007260:	4770      	bx	lr
 8007262:	4610      	mov	r0, r2
 8007264:	e7fb      	b.n	800725e <__ascii_mbtowc+0x16>
 8007266:	f06f 0001 	mvn.w	r0, #1
 800726a:	e7f8      	b.n	800725e <__ascii_mbtowc+0x16>

0800726c <memmove>:
 800726c:	4288      	cmp	r0, r1
 800726e:	b510      	push	{r4, lr}
 8007270:	eb01 0402 	add.w	r4, r1, r2
 8007274:	d902      	bls.n	800727c <memmove+0x10>
 8007276:	4284      	cmp	r4, r0
 8007278:	4623      	mov	r3, r4
 800727a:	d807      	bhi.n	800728c <memmove+0x20>
 800727c:	1e43      	subs	r3, r0, #1
 800727e:	42a1      	cmp	r1, r4
 8007280:	d008      	beq.n	8007294 <memmove+0x28>
 8007282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800728a:	e7f8      	b.n	800727e <memmove+0x12>
 800728c:	4601      	mov	r1, r0
 800728e:	4402      	add	r2, r0
 8007290:	428a      	cmp	r2, r1
 8007292:	d100      	bne.n	8007296 <memmove+0x2a>
 8007294:	bd10      	pop	{r4, pc}
 8007296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800729a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800729e:	e7f7      	b.n	8007290 <memmove+0x24>

080072a0 <__malloc_lock>:
 80072a0:	4801      	ldr	r0, [pc, #4]	; (80072a8 <__malloc_lock+0x8>)
 80072a2:	f000 bc19 	b.w	8007ad8 <__retarget_lock_acquire_recursive>
 80072a6:	bf00      	nop
 80072a8:	2000036c 	.word	0x2000036c

080072ac <__malloc_unlock>:
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <__malloc_unlock+0x8>)
 80072ae:	f000 bc14 	b.w	8007ada <__retarget_lock_release_recursive>
 80072b2:	bf00      	nop
 80072b4:	2000036c 	.word	0x2000036c

080072b8 <_realloc_r>:
 80072b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072bc:	4680      	mov	r8, r0
 80072be:	4614      	mov	r4, r2
 80072c0:	460e      	mov	r6, r1
 80072c2:	b921      	cbnz	r1, 80072ce <_realloc_r+0x16>
 80072c4:	4611      	mov	r1, r2
 80072c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ca:	f7ff bdad 	b.w	8006e28 <_malloc_r>
 80072ce:	b92a      	cbnz	r2, 80072dc <_realloc_r+0x24>
 80072d0:	f7ff fd42 	bl	8006d58 <_free_r>
 80072d4:	4625      	mov	r5, r4
 80072d6:	4628      	mov	r0, r5
 80072d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072dc:	f000 fc64 	bl	8007ba8 <_malloc_usable_size_r>
 80072e0:	4284      	cmp	r4, r0
 80072e2:	4607      	mov	r7, r0
 80072e4:	d802      	bhi.n	80072ec <_realloc_r+0x34>
 80072e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80072ea:	d812      	bhi.n	8007312 <_realloc_r+0x5a>
 80072ec:	4621      	mov	r1, r4
 80072ee:	4640      	mov	r0, r8
 80072f0:	f7ff fd9a 	bl	8006e28 <_malloc_r>
 80072f4:	4605      	mov	r5, r0
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d0ed      	beq.n	80072d6 <_realloc_r+0x1e>
 80072fa:	42bc      	cmp	r4, r7
 80072fc:	4622      	mov	r2, r4
 80072fe:	4631      	mov	r1, r6
 8007300:	bf28      	it	cs
 8007302:	463a      	movcs	r2, r7
 8007304:	f7ff f984 	bl	8006610 <memcpy>
 8007308:	4631      	mov	r1, r6
 800730a:	4640      	mov	r0, r8
 800730c:	f7ff fd24 	bl	8006d58 <_free_r>
 8007310:	e7e1      	b.n	80072d6 <_realloc_r+0x1e>
 8007312:	4635      	mov	r5, r6
 8007314:	e7df      	b.n	80072d6 <_realloc_r+0x1e>

08007316 <__sfputc_r>:
 8007316:	6893      	ldr	r3, [r2, #8]
 8007318:	b410      	push	{r4}
 800731a:	3b01      	subs	r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	6093      	str	r3, [r2, #8]
 8007320:	da07      	bge.n	8007332 <__sfputc_r+0x1c>
 8007322:	6994      	ldr	r4, [r2, #24]
 8007324:	42a3      	cmp	r3, r4
 8007326:	db01      	blt.n	800732c <__sfputc_r+0x16>
 8007328:	290a      	cmp	r1, #10
 800732a:	d102      	bne.n	8007332 <__sfputc_r+0x1c>
 800732c:	bc10      	pop	{r4}
 800732e:	f000 b949 	b.w	80075c4 <__swbuf_r>
 8007332:	6813      	ldr	r3, [r2, #0]
 8007334:	1c58      	adds	r0, r3, #1
 8007336:	6010      	str	r0, [r2, #0]
 8007338:	7019      	strb	r1, [r3, #0]
 800733a:	4608      	mov	r0, r1
 800733c:	bc10      	pop	{r4}
 800733e:	4770      	bx	lr

08007340 <__sfputs_r>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	4606      	mov	r6, r0
 8007344:	460f      	mov	r7, r1
 8007346:	4614      	mov	r4, r2
 8007348:	18d5      	adds	r5, r2, r3
 800734a:	42ac      	cmp	r4, r5
 800734c:	d101      	bne.n	8007352 <__sfputs_r+0x12>
 800734e:	2000      	movs	r0, #0
 8007350:	e007      	b.n	8007362 <__sfputs_r+0x22>
 8007352:	463a      	mov	r2, r7
 8007354:	4630      	mov	r0, r6
 8007356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735a:	f7ff ffdc 	bl	8007316 <__sfputc_r>
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	d1f3      	bne.n	800734a <__sfputs_r+0xa>
 8007362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007364 <_vfiprintf_r>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	460d      	mov	r5, r1
 800736a:	4614      	mov	r4, r2
 800736c:	4698      	mov	r8, r3
 800736e:	4606      	mov	r6, r0
 8007370:	b09d      	sub	sp, #116	; 0x74
 8007372:	b118      	cbz	r0, 800737c <_vfiprintf_r+0x18>
 8007374:	6983      	ldr	r3, [r0, #24]
 8007376:	b90b      	cbnz	r3, 800737c <_vfiprintf_r+0x18>
 8007378:	f000 fb10 	bl	800799c <__sinit>
 800737c:	4b89      	ldr	r3, [pc, #548]	; (80075a4 <_vfiprintf_r+0x240>)
 800737e:	429d      	cmp	r5, r3
 8007380:	d11b      	bne.n	80073ba <_vfiprintf_r+0x56>
 8007382:	6875      	ldr	r5, [r6, #4]
 8007384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007386:	07d9      	lsls	r1, r3, #31
 8007388:	d405      	bmi.n	8007396 <_vfiprintf_r+0x32>
 800738a:	89ab      	ldrh	r3, [r5, #12]
 800738c:	059a      	lsls	r2, r3, #22
 800738e:	d402      	bmi.n	8007396 <_vfiprintf_r+0x32>
 8007390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007392:	f000 fba1 	bl	8007ad8 <__retarget_lock_acquire_recursive>
 8007396:	89ab      	ldrh	r3, [r5, #12]
 8007398:	071b      	lsls	r3, r3, #28
 800739a:	d501      	bpl.n	80073a0 <_vfiprintf_r+0x3c>
 800739c:	692b      	ldr	r3, [r5, #16]
 800739e:	b9eb      	cbnz	r3, 80073dc <_vfiprintf_r+0x78>
 80073a0:	4629      	mov	r1, r5
 80073a2:	4630      	mov	r0, r6
 80073a4:	f000 f96e 	bl	8007684 <__swsetup_r>
 80073a8:	b1c0      	cbz	r0, 80073dc <_vfiprintf_r+0x78>
 80073aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073ac:	07dc      	lsls	r4, r3, #31
 80073ae:	d50e      	bpl.n	80073ce <_vfiprintf_r+0x6a>
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295
 80073b4:	b01d      	add	sp, #116	; 0x74
 80073b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ba:	4b7b      	ldr	r3, [pc, #492]	; (80075a8 <_vfiprintf_r+0x244>)
 80073bc:	429d      	cmp	r5, r3
 80073be:	d101      	bne.n	80073c4 <_vfiprintf_r+0x60>
 80073c0:	68b5      	ldr	r5, [r6, #8]
 80073c2:	e7df      	b.n	8007384 <_vfiprintf_r+0x20>
 80073c4:	4b79      	ldr	r3, [pc, #484]	; (80075ac <_vfiprintf_r+0x248>)
 80073c6:	429d      	cmp	r5, r3
 80073c8:	bf08      	it	eq
 80073ca:	68f5      	ldreq	r5, [r6, #12]
 80073cc:	e7da      	b.n	8007384 <_vfiprintf_r+0x20>
 80073ce:	89ab      	ldrh	r3, [r5, #12]
 80073d0:	0598      	lsls	r0, r3, #22
 80073d2:	d4ed      	bmi.n	80073b0 <_vfiprintf_r+0x4c>
 80073d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073d6:	f000 fb80 	bl	8007ada <__retarget_lock_release_recursive>
 80073da:	e7e9      	b.n	80073b0 <_vfiprintf_r+0x4c>
 80073dc:	2300      	movs	r3, #0
 80073de:	9309      	str	r3, [sp, #36]	; 0x24
 80073e0:	2320      	movs	r3, #32
 80073e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073e6:	2330      	movs	r3, #48	; 0x30
 80073e8:	f04f 0901 	mov.w	r9, #1
 80073ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80073f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80075b0 <_vfiprintf_r+0x24c>
 80073f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073f8:	4623      	mov	r3, r4
 80073fa:	469a      	mov	sl, r3
 80073fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007400:	b10a      	cbz	r2, 8007406 <_vfiprintf_r+0xa2>
 8007402:	2a25      	cmp	r2, #37	; 0x25
 8007404:	d1f9      	bne.n	80073fa <_vfiprintf_r+0x96>
 8007406:	ebba 0b04 	subs.w	fp, sl, r4
 800740a:	d00b      	beq.n	8007424 <_vfiprintf_r+0xc0>
 800740c:	465b      	mov	r3, fp
 800740e:	4622      	mov	r2, r4
 8007410:	4629      	mov	r1, r5
 8007412:	4630      	mov	r0, r6
 8007414:	f7ff ff94 	bl	8007340 <__sfputs_r>
 8007418:	3001      	adds	r0, #1
 800741a:	f000 80aa 	beq.w	8007572 <_vfiprintf_r+0x20e>
 800741e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007420:	445a      	add	r2, fp
 8007422:	9209      	str	r2, [sp, #36]	; 0x24
 8007424:	f89a 3000 	ldrb.w	r3, [sl]
 8007428:	2b00      	cmp	r3, #0
 800742a:	f000 80a2 	beq.w	8007572 <_vfiprintf_r+0x20e>
 800742e:	2300      	movs	r3, #0
 8007430:	f04f 32ff 	mov.w	r2, #4294967295
 8007434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007438:	f10a 0a01 	add.w	sl, sl, #1
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	9307      	str	r3, [sp, #28]
 8007440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007444:	931a      	str	r3, [sp, #104]	; 0x68
 8007446:	4654      	mov	r4, sl
 8007448:	2205      	movs	r2, #5
 800744a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800744e:	4858      	ldr	r0, [pc, #352]	; (80075b0 <_vfiprintf_r+0x24c>)
 8007450:	f7ff f8d0 	bl	80065f4 <memchr>
 8007454:	9a04      	ldr	r2, [sp, #16]
 8007456:	b9d8      	cbnz	r0, 8007490 <_vfiprintf_r+0x12c>
 8007458:	06d1      	lsls	r1, r2, #27
 800745a:	bf44      	itt	mi
 800745c:	2320      	movmi	r3, #32
 800745e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007462:	0713      	lsls	r3, r2, #28
 8007464:	bf44      	itt	mi
 8007466:	232b      	movmi	r3, #43	; 0x2b
 8007468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800746c:	f89a 3000 	ldrb.w	r3, [sl]
 8007470:	2b2a      	cmp	r3, #42	; 0x2a
 8007472:	d015      	beq.n	80074a0 <_vfiprintf_r+0x13c>
 8007474:	4654      	mov	r4, sl
 8007476:	2000      	movs	r0, #0
 8007478:	f04f 0c0a 	mov.w	ip, #10
 800747c:	9a07      	ldr	r2, [sp, #28]
 800747e:	4621      	mov	r1, r4
 8007480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007484:	3b30      	subs	r3, #48	; 0x30
 8007486:	2b09      	cmp	r3, #9
 8007488:	d94e      	bls.n	8007528 <_vfiprintf_r+0x1c4>
 800748a:	b1b0      	cbz	r0, 80074ba <_vfiprintf_r+0x156>
 800748c:	9207      	str	r2, [sp, #28]
 800748e:	e014      	b.n	80074ba <_vfiprintf_r+0x156>
 8007490:	eba0 0308 	sub.w	r3, r0, r8
 8007494:	fa09 f303 	lsl.w	r3, r9, r3
 8007498:	4313      	orrs	r3, r2
 800749a:	46a2      	mov	sl, r4
 800749c:	9304      	str	r3, [sp, #16]
 800749e:	e7d2      	b.n	8007446 <_vfiprintf_r+0xe2>
 80074a0:	9b03      	ldr	r3, [sp, #12]
 80074a2:	1d19      	adds	r1, r3, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	9103      	str	r1, [sp, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	bfbb      	ittet	lt
 80074ac:	425b      	neglt	r3, r3
 80074ae:	f042 0202 	orrlt.w	r2, r2, #2
 80074b2:	9307      	strge	r3, [sp, #28]
 80074b4:	9307      	strlt	r3, [sp, #28]
 80074b6:	bfb8      	it	lt
 80074b8:	9204      	strlt	r2, [sp, #16]
 80074ba:	7823      	ldrb	r3, [r4, #0]
 80074bc:	2b2e      	cmp	r3, #46	; 0x2e
 80074be:	d10c      	bne.n	80074da <_vfiprintf_r+0x176>
 80074c0:	7863      	ldrb	r3, [r4, #1]
 80074c2:	2b2a      	cmp	r3, #42	; 0x2a
 80074c4:	d135      	bne.n	8007532 <_vfiprintf_r+0x1ce>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	3402      	adds	r4, #2
 80074ca:	1d1a      	adds	r2, r3, #4
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	9203      	str	r2, [sp, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	bfb8      	it	lt
 80074d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80074d8:	9305      	str	r3, [sp, #20]
 80074da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80075b4 <_vfiprintf_r+0x250>
 80074de:	2203      	movs	r2, #3
 80074e0:	4650      	mov	r0, sl
 80074e2:	7821      	ldrb	r1, [r4, #0]
 80074e4:	f7ff f886 	bl	80065f4 <memchr>
 80074e8:	b140      	cbz	r0, 80074fc <_vfiprintf_r+0x198>
 80074ea:	2340      	movs	r3, #64	; 0x40
 80074ec:	eba0 000a 	sub.w	r0, r0, sl
 80074f0:	fa03 f000 	lsl.w	r0, r3, r0
 80074f4:	9b04      	ldr	r3, [sp, #16]
 80074f6:	3401      	adds	r4, #1
 80074f8:	4303      	orrs	r3, r0
 80074fa:	9304      	str	r3, [sp, #16]
 80074fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007500:	2206      	movs	r2, #6
 8007502:	482d      	ldr	r0, [pc, #180]	; (80075b8 <_vfiprintf_r+0x254>)
 8007504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007508:	f7ff f874 	bl	80065f4 <memchr>
 800750c:	2800      	cmp	r0, #0
 800750e:	d03f      	beq.n	8007590 <_vfiprintf_r+0x22c>
 8007510:	4b2a      	ldr	r3, [pc, #168]	; (80075bc <_vfiprintf_r+0x258>)
 8007512:	bb1b      	cbnz	r3, 800755c <_vfiprintf_r+0x1f8>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	3307      	adds	r3, #7
 8007518:	f023 0307 	bic.w	r3, r3, #7
 800751c:	3308      	adds	r3, #8
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007522:	443b      	add	r3, r7
 8007524:	9309      	str	r3, [sp, #36]	; 0x24
 8007526:	e767      	b.n	80073f8 <_vfiprintf_r+0x94>
 8007528:	460c      	mov	r4, r1
 800752a:	2001      	movs	r0, #1
 800752c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007530:	e7a5      	b.n	800747e <_vfiprintf_r+0x11a>
 8007532:	2300      	movs	r3, #0
 8007534:	f04f 0c0a 	mov.w	ip, #10
 8007538:	4619      	mov	r1, r3
 800753a:	3401      	adds	r4, #1
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	4620      	mov	r0, r4
 8007540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007544:	3a30      	subs	r2, #48	; 0x30
 8007546:	2a09      	cmp	r2, #9
 8007548:	d903      	bls.n	8007552 <_vfiprintf_r+0x1ee>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0c5      	beq.n	80074da <_vfiprintf_r+0x176>
 800754e:	9105      	str	r1, [sp, #20]
 8007550:	e7c3      	b.n	80074da <_vfiprintf_r+0x176>
 8007552:	4604      	mov	r4, r0
 8007554:	2301      	movs	r3, #1
 8007556:	fb0c 2101 	mla	r1, ip, r1, r2
 800755a:	e7f0      	b.n	800753e <_vfiprintf_r+0x1da>
 800755c:	ab03      	add	r3, sp, #12
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	462a      	mov	r2, r5
 8007562:	4630      	mov	r0, r6
 8007564:	4b16      	ldr	r3, [pc, #88]	; (80075c0 <_vfiprintf_r+0x25c>)
 8007566:	a904      	add	r1, sp, #16
 8007568:	f7fd fdda 	bl	8005120 <_printf_float>
 800756c:	4607      	mov	r7, r0
 800756e:	1c78      	adds	r0, r7, #1
 8007570:	d1d6      	bne.n	8007520 <_vfiprintf_r+0x1bc>
 8007572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007574:	07d9      	lsls	r1, r3, #31
 8007576:	d405      	bmi.n	8007584 <_vfiprintf_r+0x220>
 8007578:	89ab      	ldrh	r3, [r5, #12]
 800757a:	059a      	lsls	r2, r3, #22
 800757c:	d402      	bmi.n	8007584 <_vfiprintf_r+0x220>
 800757e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007580:	f000 faab 	bl	8007ada <__retarget_lock_release_recursive>
 8007584:	89ab      	ldrh	r3, [r5, #12]
 8007586:	065b      	lsls	r3, r3, #25
 8007588:	f53f af12 	bmi.w	80073b0 <_vfiprintf_r+0x4c>
 800758c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800758e:	e711      	b.n	80073b4 <_vfiprintf_r+0x50>
 8007590:	ab03      	add	r3, sp, #12
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	462a      	mov	r2, r5
 8007596:	4630      	mov	r0, r6
 8007598:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <_vfiprintf_r+0x25c>)
 800759a:	a904      	add	r1, sp, #16
 800759c:	f7fe f85c 	bl	8005658 <_printf_i>
 80075a0:	e7e4      	b.n	800756c <_vfiprintf_r+0x208>
 80075a2:	bf00      	nop
 80075a4:	08008224 	.word	0x08008224
 80075a8:	08008244 	.word	0x08008244
 80075ac:	08008204 	.word	0x08008204
 80075b0:	080080ac 	.word	0x080080ac
 80075b4:	080080b2 	.word	0x080080b2
 80075b8:	080080b6 	.word	0x080080b6
 80075bc:	08005121 	.word	0x08005121
 80075c0:	08007341 	.word	0x08007341

080075c4 <__swbuf_r>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	460e      	mov	r6, r1
 80075c8:	4614      	mov	r4, r2
 80075ca:	4605      	mov	r5, r0
 80075cc:	b118      	cbz	r0, 80075d6 <__swbuf_r+0x12>
 80075ce:	6983      	ldr	r3, [r0, #24]
 80075d0:	b90b      	cbnz	r3, 80075d6 <__swbuf_r+0x12>
 80075d2:	f000 f9e3 	bl	800799c <__sinit>
 80075d6:	4b21      	ldr	r3, [pc, #132]	; (800765c <__swbuf_r+0x98>)
 80075d8:	429c      	cmp	r4, r3
 80075da:	d12b      	bne.n	8007634 <__swbuf_r+0x70>
 80075dc:	686c      	ldr	r4, [r5, #4]
 80075de:	69a3      	ldr	r3, [r4, #24]
 80075e0:	60a3      	str	r3, [r4, #8]
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	071a      	lsls	r2, r3, #28
 80075e6:	d52f      	bpl.n	8007648 <__swbuf_r+0x84>
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	b36b      	cbz	r3, 8007648 <__swbuf_r+0x84>
 80075ec:	6923      	ldr	r3, [r4, #16]
 80075ee:	6820      	ldr	r0, [r4, #0]
 80075f0:	b2f6      	uxtb	r6, r6
 80075f2:	1ac0      	subs	r0, r0, r3
 80075f4:	6963      	ldr	r3, [r4, #20]
 80075f6:	4637      	mov	r7, r6
 80075f8:	4283      	cmp	r3, r0
 80075fa:	dc04      	bgt.n	8007606 <__swbuf_r+0x42>
 80075fc:	4621      	mov	r1, r4
 80075fe:	4628      	mov	r0, r5
 8007600:	f000 f938 	bl	8007874 <_fflush_r>
 8007604:	bb30      	cbnz	r0, 8007654 <__swbuf_r+0x90>
 8007606:	68a3      	ldr	r3, [r4, #8]
 8007608:	3001      	adds	r0, #1
 800760a:	3b01      	subs	r3, #1
 800760c:	60a3      	str	r3, [r4, #8]
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	6022      	str	r2, [r4, #0]
 8007614:	701e      	strb	r6, [r3, #0]
 8007616:	6963      	ldr	r3, [r4, #20]
 8007618:	4283      	cmp	r3, r0
 800761a:	d004      	beq.n	8007626 <__swbuf_r+0x62>
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	07db      	lsls	r3, r3, #31
 8007620:	d506      	bpl.n	8007630 <__swbuf_r+0x6c>
 8007622:	2e0a      	cmp	r6, #10
 8007624:	d104      	bne.n	8007630 <__swbuf_r+0x6c>
 8007626:	4621      	mov	r1, r4
 8007628:	4628      	mov	r0, r5
 800762a:	f000 f923 	bl	8007874 <_fflush_r>
 800762e:	b988      	cbnz	r0, 8007654 <__swbuf_r+0x90>
 8007630:	4638      	mov	r0, r7
 8007632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007634:	4b0a      	ldr	r3, [pc, #40]	; (8007660 <__swbuf_r+0x9c>)
 8007636:	429c      	cmp	r4, r3
 8007638:	d101      	bne.n	800763e <__swbuf_r+0x7a>
 800763a:	68ac      	ldr	r4, [r5, #8]
 800763c:	e7cf      	b.n	80075de <__swbuf_r+0x1a>
 800763e:	4b09      	ldr	r3, [pc, #36]	; (8007664 <__swbuf_r+0xa0>)
 8007640:	429c      	cmp	r4, r3
 8007642:	bf08      	it	eq
 8007644:	68ec      	ldreq	r4, [r5, #12]
 8007646:	e7ca      	b.n	80075de <__swbuf_r+0x1a>
 8007648:	4621      	mov	r1, r4
 800764a:	4628      	mov	r0, r5
 800764c:	f000 f81a 	bl	8007684 <__swsetup_r>
 8007650:	2800      	cmp	r0, #0
 8007652:	d0cb      	beq.n	80075ec <__swbuf_r+0x28>
 8007654:	f04f 37ff 	mov.w	r7, #4294967295
 8007658:	e7ea      	b.n	8007630 <__swbuf_r+0x6c>
 800765a:	bf00      	nop
 800765c:	08008224 	.word	0x08008224
 8007660:	08008244 	.word	0x08008244
 8007664:	08008204 	.word	0x08008204

08007668 <__ascii_wctomb>:
 8007668:	4603      	mov	r3, r0
 800766a:	4608      	mov	r0, r1
 800766c:	b141      	cbz	r1, 8007680 <__ascii_wctomb+0x18>
 800766e:	2aff      	cmp	r2, #255	; 0xff
 8007670:	d904      	bls.n	800767c <__ascii_wctomb+0x14>
 8007672:	228a      	movs	r2, #138	; 0x8a
 8007674:	f04f 30ff 	mov.w	r0, #4294967295
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	4770      	bx	lr
 800767c:	2001      	movs	r0, #1
 800767e:	700a      	strb	r2, [r1, #0]
 8007680:	4770      	bx	lr
	...

08007684 <__swsetup_r>:
 8007684:	4b32      	ldr	r3, [pc, #200]	; (8007750 <__swsetup_r+0xcc>)
 8007686:	b570      	push	{r4, r5, r6, lr}
 8007688:	681d      	ldr	r5, [r3, #0]
 800768a:	4606      	mov	r6, r0
 800768c:	460c      	mov	r4, r1
 800768e:	b125      	cbz	r5, 800769a <__swsetup_r+0x16>
 8007690:	69ab      	ldr	r3, [r5, #24]
 8007692:	b913      	cbnz	r3, 800769a <__swsetup_r+0x16>
 8007694:	4628      	mov	r0, r5
 8007696:	f000 f981 	bl	800799c <__sinit>
 800769a:	4b2e      	ldr	r3, [pc, #184]	; (8007754 <__swsetup_r+0xd0>)
 800769c:	429c      	cmp	r4, r3
 800769e:	d10f      	bne.n	80076c0 <__swsetup_r+0x3c>
 80076a0:	686c      	ldr	r4, [r5, #4]
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a8:	0719      	lsls	r1, r3, #28
 80076aa:	d42c      	bmi.n	8007706 <__swsetup_r+0x82>
 80076ac:	06dd      	lsls	r5, r3, #27
 80076ae:	d411      	bmi.n	80076d4 <__swsetup_r+0x50>
 80076b0:	2309      	movs	r3, #9
 80076b2:	6033      	str	r3, [r6, #0]
 80076b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	e03e      	b.n	800773e <__swsetup_r+0xba>
 80076c0:	4b25      	ldr	r3, [pc, #148]	; (8007758 <__swsetup_r+0xd4>)
 80076c2:	429c      	cmp	r4, r3
 80076c4:	d101      	bne.n	80076ca <__swsetup_r+0x46>
 80076c6:	68ac      	ldr	r4, [r5, #8]
 80076c8:	e7eb      	b.n	80076a2 <__swsetup_r+0x1e>
 80076ca:	4b24      	ldr	r3, [pc, #144]	; (800775c <__swsetup_r+0xd8>)
 80076cc:	429c      	cmp	r4, r3
 80076ce:	bf08      	it	eq
 80076d0:	68ec      	ldreq	r4, [r5, #12]
 80076d2:	e7e6      	b.n	80076a2 <__swsetup_r+0x1e>
 80076d4:	0758      	lsls	r0, r3, #29
 80076d6:	d512      	bpl.n	80076fe <__swsetup_r+0x7a>
 80076d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076da:	b141      	cbz	r1, 80076ee <__swsetup_r+0x6a>
 80076dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076e0:	4299      	cmp	r1, r3
 80076e2:	d002      	beq.n	80076ea <__swsetup_r+0x66>
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff fb37 	bl	8006d58 <_free_r>
 80076ea:	2300      	movs	r3, #0
 80076ec:	6363      	str	r3, [r4, #52]	; 0x34
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076f4:	81a3      	strh	r3, [r4, #12]
 80076f6:	2300      	movs	r3, #0
 80076f8:	6063      	str	r3, [r4, #4]
 80076fa:	6923      	ldr	r3, [r4, #16]
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	f043 0308 	orr.w	r3, r3, #8
 8007704:	81a3      	strh	r3, [r4, #12]
 8007706:	6923      	ldr	r3, [r4, #16]
 8007708:	b94b      	cbnz	r3, 800771e <__swsetup_r+0x9a>
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007714:	d003      	beq.n	800771e <__swsetup_r+0x9a>
 8007716:	4621      	mov	r1, r4
 8007718:	4630      	mov	r0, r6
 800771a:	f000 fa05 	bl	8007b28 <__smakebuf_r>
 800771e:	89a0      	ldrh	r0, [r4, #12]
 8007720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007724:	f010 0301 	ands.w	r3, r0, #1
 8007728:	d00a      	beq.n	8007740 <__swsetup_r+0xbc>
 800772a:	2300      	movs	r3, #0
 800772c:	60a3      	str	r3, [r4, #8]
 800772e:	6963      	ldr	r3, [r4, #20]
 8007730:	425b      	negs	r3, r3
 8007732:	61a3      	str	r3, [r4, #24]
 8007734:	6923      	ldr	r3, [r4, #16]
 8007736:	b943      	cbnz	r3, 800774a <__swsetup_r+0xc6>
 8007738:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800773c:	d1ba      	bne.n	80076b4 <__swsetup_r+0x30>
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	0781      	lsls	r1, r0, #30
 8007742:	bf58      	it	pl
 8007744:	6963      	ldrpl	r3, [r4, #20]
 8007746:	60a3      	str	r3, [r4, #8]
 8007748:	e7f4      	b.n	8007734 <__swsetup_r+0xb0>
 800774a:	2000      	movs	r0, #0
 800774c:	e7f7      	b.n	800773e <__swsetup_r+0xba>
 800774e:	bf00      	nop
 8007750:	2000000c 	.word	0x2000000c
 8007754:	08008224 	.word	0x08008224
 8007758:	08008244 	.word	0x08008244
 800775c:	08008204 	.word	0x08008204

08007760 <abort>:
 8007760:	2006      	movs	r0, #6
 8007762:	b508      	push	{r3, lr}
 8007764:	f000 fa50 	bl	8007c08 <raise>
 8007768:	2001      	movs	r0, #1
 800776a:	f7fa fc00 	bl	8001f6e <_exit>
	...

08007770 <__sflush_r>:
 8007770:	898a      	ldrh	r2, [r1, #12]
 8007772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007774:	4605      	mov	r5, r0
 8007776:	0710      	lsls	r0, r2, #28
 8007778:	460c      	mov	r4, r1
 800777a:	d457      	bmi.n	800782c <__sflush_r+0xbc>
 800777c:	684b      	ldr	r3, [r1, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	dc04      	bgt.n	800778c <__sflush_r+0x1c>
 8007782:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	dc01      	bgt.n	800778c <__sflush_r+0x1c>
 8007788:	2000      	movs	r0, #0
 800778a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800778c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800778e:	2e00      	cmp	r6, #0
 8007790:	d0fa      	beq.n	8007788 <__sflush_r+0x18>
 8007792:	2300      	movs	r3, #0
 8007794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007798:	682f      	ldr	r7, [r5, #0]
 800779a:	602b      	str	r3, [r5, #0]
 800779c:	d032      	beq.n	8007804 <__sflush_r+0x94>
 800779e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	075a      	lsls	r2, r3, #29
 80077a4:	d505      	bpl.n	80077b2 <__sflush_r+0x42>
 80077a6:	6863      	ldr	r3, [r4, #4]
 80077a8:	1ac0      	subs	r0, r0, r3
 80077aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077ac:	b10b      	cbz	r3, 80077b2 <__sflush_r+0x42>
 80077ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077b0:	1ac0      	subs	r0, r0, r3
 80077b2:	2300      	movs	r3, #0
 80077b4:	4602      	mov	r2, r0
 80077b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077b8:	4628      	mov	r0, r5
 80077ba:	6a21      	ldr	r1, [r4, #32]
 80077bc:	47b0      	blx	r6
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	d106      	bne.n	80077d2 <__sflush_r+0x62>
 80077c4:	6829      	ldr	r1, [r5, #0]
 80077c6:	291d      	cmp	r1, #29
 80077c8:	d82c      	bhi.n	8007824 <__sflush_r+0xb4>
 80077ca:	4a29      	ldr	r2, [pc, #164]	; (8007870 <__sflush_r+0x100>)
 80077cc:	40ca      	lsrs	r2, r1
 80077ce:	07d6      	lsls	r6, r2, #31
 80077d0:	d528      	bpl.n	8007824 <__sflush_r+0xb4>
 80077d2:	2200      	movs	r2, #0
 80077d4:	6062      	str	r2, [r4, #4]
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	04d9      	lsls	r1, r3, #19
 80077da:	6022      	str	r2, [r4, #0]
 80077dc:	d504      	bpl.n	80077e8 <__sflush_r+0x78>
 80077de:	1c42      	adds	r2, r0, #1
 80077e0:	d101      	bne.n	80077e6 <__sflush_r+0x76>
 80077e2:	682b      	ldr	r3, [r5, #0]
 80077e4:	b903      	cbnz	r3, 80077e8 <__sflush_r+0x78>
 80077e6:	6560      	str	r0, [r4, #84]	; 0x54
 80077e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077ea:	602f      	str	r7, [r5, #0]
 80077ec:	2900      	cmp	r1, #0
 80077ee:	d0cb      	beq.n	8007788 <__sflush_r+0x18>
 80077f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077f4:	4299      	cmp	r1, r3
 80077f6:	d002      	beq.n	80077fe <__sflush_r+0x8e>
 80077f8:	4628      	mov	r0, r5
 80077fa:	f7ff faad 	bl	8006d58 <_free_r>
 80077fe:	2000      	movs	r0, #0
 8007800:	6360      	str	r0, [r4, #52]	; 0x34
 8007802:	e7c2      	b.n	800778a <__sflush_r+0x1a>
 8007804:	6a21      	ldr	r1, [r4, #32]
 8007806:	2301      	movs	r3, #1
 8007808:	4628      	mov	r0, r5
 800780a:	47b0      	blx	r6
 800780c:	1c41      	adds	r1, r0, #1
 800780e:	d1c7      	bne.n	80077a0 <__sflush_r+0x30>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0c4      	beq.n	80077a0 <__sflush_r+0x30>
 8007816:	2b1d      	cmp	r3, #29
 8007818:	d001      	beq.n	800781e <__sflush_r+0xae>
 800781a:	2b16      	cmp	r3, #22
 800781c:	d101      	bne.n	8007822 <__sflush_r+0xb2>
 800781e:	602f      	str	r7, [r5, #0]
 8007820:	e7b2      	b.n	8007788 <__sflush_r+0x18>
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	e7ae      	b.n	800778a <__sflush_r+0x1a>
 800782c:	690f      	ldr	r7, [r1, #16]
 800782e:	2f00      	cmp	r7, #0
 8007830:	d0aa      	beq.n	8007788 <__sflush_r+0x18>
 8007832:	0793      	lsls	r3, r2, #30
 8007834:	bf18      	it	ne
 8007836:	2300      	movne	r3, #0
 8007838:	680e      	ldr	r6, [r1, #0]
 800783a:	bf08      	it	eq
 800783c:	694b      	ldreq	r3, [r1, #20]
 800783e:	1bf6      	subs	r6, r6, r7
 8007840:	600f      	str	r7, [r1, #0]
 8007842:	608b      	str	r3, [r1, #8]
 8007844:	2e00      	cmp	r6, #0
 8007846:	dd9f      	ble.n	8007788 <__sflush_r+0x18>
 8007848:	4633      	mov	r3, r6
 800784a:	463a      	mov	r2, r7
 800784c:	4628      	mov	r0, r5
 800784e:	6a21      	ldr	r1, [r4, #32]
 8007850:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007854:	47e0      	blx	ip
 8007856:	2800      	cmp	r0, #0
 8007858:	dc06      	bgt.n	8007868 <__sflush_r+0xf8>
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	f04f 30ff 	mov.w	r0, #4294967295
 8007860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007864:	81a3      	strh	r3, [r4, #12]
 8007866:	e790      	b.n	800778a <__sflush_r+0x1a>
 8007868:	4407      	add	r7, r0
 800786a:	1a36      	subs	r6, r6, r0
 800786c:	e7ea      	b.n	8007844 <__sflush_r+0xd4>
 800786e:	bf00      	nop
 8007870:	20400001 	.word	0x20400001

08007874 <_fflush_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	690b      	ldr	r3, [r1, #16]
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	b913      	cbnz	r3, 8007884 <_fflush_r+0x10>
 800787e:	2500      	movs	r5, #0
 8007880:	4628      	mov	r0, r5
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	b118      	cbz	r0, 800788e <_fflush_r+0x1a>
 8007886:	6983      	ldr	r3, [r0, #24]
 8007888:	b90b      	cbnz	r3, 800788e <_fflush_r+0x1a>
 800788a:	f000 f887 	bl	800799c <__sinit>
 800788e:	4b14      	ldr	r3, [pc, #80]	; (80078e0 <_fflush_r+0x6c>)
 8007890:	429c      	cmp	r4, r3
 8007892:	d11b      	bne.n	80078cc <_fflush_r+0x58>
 8007894:	686c      	ldr	r4, [r5, #4]
 8007896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0ef      	beq.n	800787e <_fflush_r+0xa>
 800789e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078a0:	07d0      	lsls	r0, r2, #31
 80078a2:	d404      	bmi.n	80078ae <_fflush_r+0x3a>
 80078a4:	0599      	lsls	r1, r3, #22
 80078a6:	d402      	bmi.n	80078ae <_fflush_r+0x3a>
 80078a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078aa:	f000 f915 	bl	8007ad8 <__retarget_lock_acquire_recursive>
 80078ae:	4628      	mov	r0, r5
 80078b0:	4621      	mov	r1, r4
 80078b2:	f7ff ff5d 	bl	8007770 <__sflush_r>
 80078b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078b8:	4605      	mov	r5, r0
 80078ba:	07da      	lsls	r2, r3, #31
 80078bc:	d4e0      	bmi.n	8007880 <_fflush_r+0xc>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	059b      	lsls	r3, r3, #22
 80078c2:	d4dd      	bmi.n	8007880 <_fflush_r+0xc>
 80078c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078c6:	f000 f908 	bl	8007ada <__retarget_lock_release_recursive>
 80078ca:	e7d9      	b.n	8007880 <_fflush_r+0xc>
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <_fflush_r+0x70>)
 80078ce:	429c      	cmp	r4, r3
 80078d0:	d101      	bne.n	80078d6 <_fflush_r+0x62>
 80078d2:	68ac      	ldr	r4, [r5, #8]
 80078d4:	e7df      	b.n	8007896 <_fflush_r+0x22>
 80078d6:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <_fflush_r+0x74>)
 80078d8:	429c      	cmp	r4, r3
 80078da:	bf08      	it	eq
 80078dc:	68ec      	ldreq	r4, [r5, #12]
 80078de:	e7da      	b.n	8007896 <_fflush_r+0x22>
 80078e0:	08008224 	.word	0x08008224
 80078e4:	08008244 	.word	0x08008244
 80078e8:	08008204 	.word	0x08008204

080078ec <std>:
 80078ec:	2300      	movs	r3, #0
 80078ee:	b510      	push	{r4, lr}
 80078f0:	4604      	mov	r4, r0
 80078f2:	e9c0 3300 	strd	r3, r3, [r0]
 80078f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078fa:	6083      	str	r3, [r0, #8]
 80078fc:	8181      	strh	r1, [r0, #12]
 80078fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007900:	81c2      	strh	r2, [r0, #14]
 8007902:	6183      	str	r3, [r0, #24]
 8007904:	4619      	mov	r1, r3
 8007906:	2208      	movs	r2, #8
 8007908:	305c      	adds	r0, #92	; 0x5c
 800790a:	f7fd fb63 	bl	8004fd4 <memset>
 800790e:	4b05      	ldr	r3, [pc, #20]	; (8007924 <std+0x38>)
 8007910:	6224      	str	r4, [r4, #32]
 8007912:	6263      	str	r3, [r4, #36]	; 0x24
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <std+0x3c>)
 8007916:	62a3      	str	r3, [r4, #40]	; 0x28
 8007918:	4b04      	ldr	r3, [pc, #16]	; (800792c <std+0x40>)
 800791a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800791c:	4b04      	ldr	r3, [pc, #16]	; (8007930 <std+0x44>)
 800791e:	6323      	str	r3, [r4, #48]	; 0x30
 8007920:	bd10      	pop	{r4, pc}
 8007922:	bf00      	nop
 8007924:	08007c41 	.word	0x08007c41
 8007928:	08007c63 	.word	0x08007c63
 800792c:	08007c9b 	.word	0x08007c9b
 8007930:	08007cbf 	.word	0x08007cbf

08007934 <_cleanup_r>:
 8007934:	4901      	ldr	r1, [pc, #4]	; (800793c <_cleanup_r+0x8>)
 8007936:	f000 b8af 	b.w	8007a98 <_fwalk_reent>
 800793a:	bf00      	nop
 800793c:	08007875 	.word	0x08007875

08007940 <__sfmoreglue>:
 8007940:	2268      	movs	r2, #104	; 0x68
 8007942:	b570      	push	{r4, r5, r6, lr}
 8007944:	1e4d      	subs	r5, r1, #1
 8007946:	4355      	muls	r5, r2
 8007948:	460e      	mov	r6, r1
 800794a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800794e:	f7ff fa6b 	bl	8006e28 <_malloc_r>
 8007952:	4604      	mov	r4, r0
 8007954:	b140      	cbz	r0, 8007968 <__sfmoreglue+0x28>
 8007956:	2100      	movs	r1, #0
 8007958:	e9c0 1600 	strd	r1, r6, [r0]
 800795c:	300c      	adds	r0, #12
 800795e:	60a0      	str	r0, [r4, #8]
 8007960:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007964:	f7fd fb36 	bl	8004fd4 <memset>
 8007968:	4620      	mov	r0, r4
 800796a:	bd70      	pop	{r4, r5, r6, pc}

0800796c <__sfp_lock_acquire>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__sfp_lock_acquire+0x8>)
 800796e:	f000 b8b3 	b.w	8007ad8 <__retarget_lock_acquire_recursive>
 8007972:	bf00      	nop
 8007974:	2000036d 	.word	0x2000036d

08007978 <__sfp_lock_release>:
 8007978:	4801      	ldr	r0, [pc, #4]	; (8007980 <__sfp_lock_release+0x8>)
 800797a:	f000 b8ae 	b.w	8007ada <__retarget_lock_release_recursive>
 800797e:	bf00      	nop
 8007980:	2000036d 	.word	0x2000036d

08007984 <__sinit_lock_acquire>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__sinit_lock_acquire+0x8>)
 8007986:	f000 b8a7 	b.w	8007ad8 <__retarget_lock_acquire_recursive>
 800798a:	bf00      	nop
 800798c:	2000036e 	.word	0x2000036e

08007990 <__sinit_lock_release>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__sinit_lock_release+0x8>)
 8007992:	f000 b8a2 	b.w	8007ada <__retarget_lock_release_recursive>
 8007996:	bf00      	nop
 8007998:	2000036e 	.word	0x2000036e

0800799c <__sinit>:
 800799c:	b510      	push	{r4, lr}
 800799e:	4604      	mov	r4, r0
 80079a0:	f7ff fff0 	bl	8007984 <__sinit_lock_acquire>
 80079a4:	69a3      	ldr	r3, [r4, #24]
 80079a6:	b11b      	cbz	r3, 80079b0 <__sinit+0x14>
 80079a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ac:	f7ff bff0 	b.w	8007990 <__sinit_lock_release>
 80079b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079b4:	6523      	str	r3, [r4, #80]	; 0x50
 80079b6:	4b13      	ldr	r3, [pc, #76]	; (8007a04 <__sinit+0x68>)
 80079b8:	4a13      	ldr	r2, [pc, #76]	; (8007a08 <__sinit+0x6c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80079be:	42a3      	cmp	r3, r4
 80079c0:	bf08      	it	eq
 80079c2:	2301      	moveq	r3, #1
 80079c4:	4620      	mov	r0, r4
 80079c6:	bf08      	it	eq
 80079c8:	61a3      	streq	r3, [r4, #24]
 80079ca:	f000 f81f 	bl	8007a0c <__sfp>
 80079ce:	6060      	str	r0, [r4, #4]
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 f81b 	bl	8007a0c <__sfp>
 80079d6:	60a0      	str	r0, [r4, #8]
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 f817 	bl	8007a0c <__sfp>
 80079de:	2200      	movs	r2, #0
 80079e0:	2104      	movs	r1, #4
 80079e2:	60e0      	str	r0, [r4, #12]
 80079e4:	6860      	ldr	r0, [r4, #4]
 80079e6:	f7ff ff81 	bl	80078ec <std>
 80079ea:	2201      	movs	r2, #1
 80079ec:	2109      	movs	r1, #9
 80079ee:	68a0      	ldr	r0, [r4, #8]
 80079f0:	f7ff ff7c 	bl	80078ec <std>
 80079f4:	2202      	movs	r2, #2
 80079f6:	2112      	movs	r1, #18
 80079f8:	68e0      	ldr	r0, [r4, #12]
 80079fa:	f7ff ff77 	bl	80078ec <std>
 80079fe:	2301      	movs	r3, #1
 8007a00:	61a3      	str	r3, [r4, #24]
 8007a02:	e7d1      	b.n	80079a8 <__sinit+0xc>
 8007a04:	08007e88 	.word	0x08007e88
 8007a08:	08007935 	.word	0x08007935

08007a0c <__sfp>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	4607      	mov	r7, r0
 8007a10:	f7ff ffac 	bl	800796c <__sfp_lock_acquire>
 8007a14:	4b1e      	ldr	r3, [pc, #120]	; (8007a90 <__sfp+0x84>)
 8007a16:	681e      	ldr	r6, [r3, #0]
 8007a18:	69b3      	ldr	r3, [r6, #24]
 8007a1a:	b913      	cbnz	r3, 8007a22 <__sfp+0x16>
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f7ff ffbd 	bl	800799c <__sinit>
 8007a22:	3648      	adds	r6, #72	; 0x48
 8007a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	d503      	bpl.n	8007a34 <__sfp+0x28>
 8007a2c:	6833      	ldr	r3, [r6, #0]
 8007a2e:	b30b      	cbz	r3, 8007a74 <__sfp+0x68>
 8007a30:	6836      	ldr	r6, [r6, #0]
 8007a32:	e7f7      	b.n	8007a24 <__sfp+0x18>
 8007a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a38:	b9d5      	cbnz	r5, 8007a70 <__sfp+0x64>
 8007a3a:	4b16      	ldr	r3, [pc, #88]	; (8007a94 <__sfp+0x88>)
 8007a3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a40:	60e3      	str	r3, [r4, #12]
 8007a42:	6665      	str	r5, [r4, #100]	; 0x64
 8007a44:	f000 f847 	bl	8007ad6 <__retarget_lock_init_recursive>
 8007a48:	f7ff ff96 	bl	8007978 <__sfp_lock_release>
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	4629      	mov	r1, r5
 8007a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a58:	6025      	str	r5, [r4, #0]
 8007a5a:	61a5      	str	r5, [r4, #24]
 8007a5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a60:	f7fd fab8 	bl	8004fd4 <memset>
 8007a64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a70:	3468      	adds	r4, #104	; 0x68
 8007a72:	e7d9      	b.n	8007a28 <__sfp+0x1c>
 8007a74:	2104      	movs	r1, #4
 8007a76:	4638      	mov	r0, r7
 8007a78:	f7ff ff62 	bl	8007940 <__sfmoreglue>
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	6030      	str	r0, [r6, #0]
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d1d5      	bne.n	8007a30 <__sfp+0x24>
 8007a84:	f7ff ff78 	bl	8007978 <__sfp_lock_release>
 8007a88:	230c      	movs	r3, #12
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	e7ee      	b.n	8007a6c <__sfp+0x60>
 8007a8e:	bf00      	nop
 8007a90:	08007e88 	.word	0x08007e88
 8007a94:	ffff0001 	.word	0xffff0001

08007a98 <_fwalk_reent>:
 8007a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	4688      	mov	r8, r1
 8007aa0:	2700      	movs	r7, #0
 8007aa2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007aa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aaa:	f1b9 0901 	subs.w	r9, r9, #1
 8007aae:	d505      	bpl.n	8007abc <_fwalk_reent+0x24>
 8007ab0:	6824      	ldr	r4, [r4, #0]
 8007ab2:	2c00      	cmp	r4, #0
 8007ab4:	d1f7      	bne.n	8007aa6 <_fwalk_reent+0xe>
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007abc:	89ab      	ldrh	r3, [r5, #12]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d907      	bls.n	8007ad2 <_fwalk_reent+0x3a>
 8007ac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	d003      	beq.n	8007ad2 <_fwalk_reent+0x3a>
 8007aca:	4629      	mov	r1, r5
 8007acc:	4630      	mov	r0, r6
 8007ace:	47c0      	blx	r8
 8007ad0:	4307      	orrs	r7, r0
 8007ad2:	3568      	adds	r5, #104	; 0x68
 8007ad4:	e7e9      	b.n	8007aaa <_fwalk_reent+0x12>

08007ad6 <__retarget_lock_init_recursive>:
 8007ad6:	4770      	bx	lr

08007ad8 <__retarget_lock_acquire_recursive>:
 8007ad8:	4770      	bx	lr

08007ada <__retarget_lock_release_recursive>:
 8007ada:	4770      	bx	lr

08007adc <__swhatbuf_r>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	460e      	mov	r6, r1
 8007ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	461d      	mov	r5, r3
 8007aea:	b096      	sub	sp, #88	; 0x58
 8007aec:	da08      	bge.n	8007b00 <__swhatbuf_r+0x24>
 8007aee:	2200      	movs	r2, #0
 8007af0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	061a      	lsls	r2, r3, #24
 8007af8:	d410      	bmi.n	8007b1c <__swhatbuf_r+0x40>
 8007afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007afe:	e00e      	b.n	8007b1e <__swhatbuf_r+0x42>
 8007b00:	466a      	mov	r2, sp
 8007b02:	f000 f903 	bl	8007d0c <_fstat_r>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	dbf1      	blt.n	8007aee <__swhatbuf_r+0x12>
 8007b0a:	9a01      	ldr	r2, [sp, #4]
 8007b0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b14:	425a      	negs	r2, r3
 8007b16:	415a      	adcs	r2, r3
 8007b18:	602a      	str	r2, [r5, #0]
 8007b1a:	e7ee      	b.n	8007afa <__swhatbuf_r+0x1e>
 8007b1c:	2340      	movs	r3, #64	; 0x40
 8007b1e:	2000      	movs	r0, #0
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	b016      	add	sp, #88	; 0x58
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b28 <__smakebuf_r>:
 8007b28:	898b      	ldrh	r3, [r1, #12]
 8007b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b2c:	079d      	lsls	r5, r3, #30
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	d507      	bpl.n	8007b44 <__smakebuf_r+0x1c>
 8007b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	6123      	str	r3, [r4, #16]
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	6163      	str	r3, [r4, #20]
 8007b40:	b002      	add	sp, #8
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	466a      	mov	r2, sp
 8007b46:	ab01      	add	r3, sp, #4
 8007b48:	f7ff ffc8 	bl	8007adc <__swhatbuf_r>
 8007b4c:	9900      	ldr	r1, [sp, #0]
 8007b4e:	4605      	mov	r5, r0
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff f969 	bl	8006e28 <_malloc_r>
 8007b56:	b948      	cbnz	r0, 8007b6c <__smakebuf_r+0x44>
 8007b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5c:	059a      	lsls	r2, r3, #22
 8007b5e:	d4ef      	bmi.n	8007b40 <__smakebuf_r+0x18>
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	e7e3      	b.n	8007b34 <__smakebuf_r+0xc>
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <__smakebuf_r+0x7c>)
 8007b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	6020      	str	r0, [r4, #0]
 8007b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	9b00      	ldr	r3, [sp, #0]
 8007b7c:	6120      	str	r0, [r4, #16]
 8007b7e:	6163      	str	r3, [r4, #20]
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	b15b      	cbz	r3, 8007b9c <__smakebuf_r+0x74>
 8007b84:	4630      	mov	r0, r6
 8007b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b8a:	f000 f8d1 	bl	8007d30 <_isatty_r>
 8007b8e:	b128      	cbz	r0, 8007b9c <__smakebuf_r+0x74>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	89a0      	ldrh	r0, [r4, #12]
 8007b9e:	4305      	orrs	r5, r0
 8007ba0:	81a5      	strh	r5, [r4, #12]
 8007ba2:	e7cd      	b.n	8007b40 <__smakebuf_r+0x18>
 8007ba4:	08007935 	.word	0x08007935

08007ba8 <_malloc_usable_size_r>:
 8007ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bac:	1f18      	subs	r0, r3, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bfbc      	itt	lt
 8007bb2:	580b      	ldrlt	r3, [r1, r0]
 8007bb4:	18c0      	addlt	r0, r0, r3
 8007bb6:	4770      	bx	lr

08007bb8 <_raise_r>:
 8007bb8:	291f      	cmp	r1, #31
 8007bba:	b538      	push	{r3, r4, r5, lr}
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	460d      	mov	r5, r1
 8007bc0:	d904      	bls.n	8007bcc <_raise_r+0x14>
 8007bc2:	2316      	movs	r3, #22
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bce:	b112      	cbz	r2, 8007bd6 <_raise_r+0x1e>
 8007bd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bd4:	b94b      	cbnz	r3, 8007bea <_raise_r+0x32>
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 f830 	bl	8007c3c <_getpid_r>
 8007bdc:	462a      	mov	r2, r5
 8007bde:	4601      	mov	r1, r0
 8007be0:	4620      	mov	r0, r4
 8007be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be6:	f000 b817 	b.w	8007c18 <_kill_r>
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d00a      	beq.n	8007c04 <_raise_r+0x4c>
 8007bee:	1c59      	adds	r1, r3, #1
 8007bf0:	d103      	bne.n	8007bfa <_raise_r+0x42>
 8007bf2:	2316      	movs	r3, #22
 8007bf4:	6003      	str	r3, [r0, #0]
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7e7      	b.n	8007bca <_raise_r+0x12>
 8007bfa:	2400      	movs	r4, #0
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c02:	4798      	blx	r3
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7e0      	b.n	8007bca <_raise_r+0x12>

08007c08 <raise>:
 8007c08:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <raise+0xc>)
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	f7ff bfd3 	b.w	8007bb8 <_raise_r>
 8007c12:	bf00      	nop
 8007c14:	2000000c 	.word	0x2000000c

08007c18 <_kill_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4d06      	ldr	r5, [pc, #24]	; (8007c38 <_kill_r+0x20>)
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	f7fa f992 	bl	8001f4e <_kill>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d102      	bne.n	8007c34 <_kill_r+0x1c>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b103      	cbz	r3, 8007c34 <_kill_r+0x1c>
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	bf00      	nop
 8007c38:	20000368 	.word	0x20000368

08007c3c <_getpid_r>:
 8007c3c:	f7fa b980 	b.w	8001f40 <_getpid>

08007c40 <__sread>:
 8007c40:	b510      	push	{r4, lr}
 8007c42:	460c      	mov	r4, r1
 8007c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c48:	f000 f894 	bl	8007d74 <_read_r>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	bfab      	itete	ge
 8007c50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c52:	89a3      	ldrhlt	r3, [r4, #12]
 8007c54:	181b      	addge	r3, r3, r0
 8007c56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c5a:	bfac      	ite	ge
 8007c5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c5e:	81a3      	strhlt	r3, [r4, #12]
 8007c60:	bd10      	pop	{r4, pc}

08007c62 <__swrite>:
 8007c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c66:	461f      	mov	r7, r3
 8007c68:	898b      	ldrh	r3, [r1, #12]
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	05db      	lsls	r3, r3, #23
 8007c6e:	460c      	mov	r4, r1
 8007c70:	4616      	mov	r6, r2
 8007c72:	d505      	bpl.n	8007c80 <__swrite+0x1e>
 8007c74:	2302      	movs	r3, #2
 8007c76:	2200      	movs	r2, #0
 8007c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c7c:	f000 f868 	bl	8007d50 <_lseek_r>
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	4632      	mov	r2, r6
 8007c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c88:	81a3      	strh	r3, [r4, #12]
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	463b      	mov	r3, r7
 8007c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c96:	f000 b817 	b.w	8007cc8 <_write_r>

08007c9a <__sseek>:
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca2:	f000 f855 	bl	8007d50 <_lseek_r>
 8007ca6:	1c43      	adds	r3, r0, #1
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	bf15      	itete	ne
 8007cac:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cb6:	81a3      	strheq	r3, [r4, #12]
 8007cb8:	bf18      	it	ne
 8007cba:	81a3      	strhne	r3, [r4, #12]
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <__sclose>:
 8007cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc2:	f000 b813 	b.w	8007cec <_close_r>
	...

08007cc8 <_write_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4d05      	ldr	r5, [pc, #20]	; (8007ce8 <_write_r+0x20>)
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f7fa f970 	bl	8001fbc <_write>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_write_r+0x1e>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_write_r+0x1e>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20000368 	.word	0x20000368

08007cec <_close_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	2300      	movs	r3, #0
 8007cf0:	4d05      	ldr	r5, [pc, #20]	; (8007d08 <_close_r+0x1c>)
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	602b      	str	r3, [r5, #0]
 8007cf8:	f7fa f97c 	bl	8001ff4 <_close>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_close_r+0x1a>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_close_r+0x1a>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	20000368 	.word	0x20000368

08007d0c <_fstat_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	2300      	movs	r3, #0
 8007d10:	4d06      	ldr	r5, [pc, #24]	; (8007d2c <_fstat_r+0x20>)
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	f7fa f976 	bl	800200a <_fstat>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	d102      	bne.n	8007d28 <_fstat_r+0x1c>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	b103      	cbz	r3, 8007d28 <_fstat_r+0x1c>
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	bd38      	pop	{r3, r4, r5, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000368 	.word	0x20000368

08007d30 <_isatty_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	2300      	movs	r3, #0
 8007d34:	4d05      	ldr	r5, [pc, #20]	; (8007d4c <_isatty_r+0x1c>)
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	f7fa f974 	bl	8002028 <_isatty>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_isatty_r+0x1a>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_isatty_r+0x1a>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	20000368 	.word	0x20000368

08007d50 <_lseek_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4604      	mov	r4, r0
 8007d54:	4608      	mov	r0, r1
 8007d56:	4611      	mov	r1, r2
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4d05      	ldr	r5, [pc, #20]	; (8007d70 <_lseek_r+0x20>)
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f7fa f96c 	bl	800203c <_lseek>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_lseek_r+0x1e>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_lseek_r+0x1e>
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	20000368 	.word	0x20000368

08007d74 <_read_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4604      	mov	r4, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4d05      	ldr	r5, [pc, #20]	; (8007d94 <_read_r+0x20>)
 8007d80:	602a      	str	r2, [r5, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	f7fa f8fd 	bl	8001f82 <_read>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_read_r+0x1e>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_read_r+0x1e>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	20000368 	.word	0x20000368

08007d98 <_init>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr

08007da4 <_fini>:
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da6:	bf00      	nop
 8007da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007daa:	bc08      	pop	{r3}
 8007dac:	469e      	mov	lr, r3
 8007dae:	4770      	bx	lr
